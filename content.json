{"meta":{"title":"楼兰","subtitle":"","description":"楼兰的Blog","author":"楼兰","url":"https://trevoewu.github.io","root":"/"},"pages":[{"title":"about","date":"2023-04-21T11:05:18.000Z","updated":"2023-04-21T11:15:05.927Z","comments":true,"path":"about/index.html","permalink":"https://trevoewu.github.io/about/index.html","excerpt":"","text":"施工中…"},{"title":"categories","date":"2023-04-21T12:11:32.000Z","updated":"2023-04-21T12:12:24.531Z","comments":true,"path":"categories/index.html","permalink":"https://trevoewu.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2023-04-21T12:23:46.000Z","updated":"2023-04-21T12:24:50.111Z","comments":true,"path":"tags/index.html","permalink":"https://trevoewu.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"回到过去，我会对自己说","slug":"给学弟学妹们的建议","date":"2023-11-09T04:07:08.000Z","updated":"2023-11-09T08:41:48.742Z","comments":true,"path":"2023/11/09/给学弟学妹们的建议/","link":"","permalink":"https://trevoewu.github.io/2023/11/09/%E7%BB%99%E5%AD%A6%E5%BC%9F%E5%AD%A6%E5%A6%B9%E4%BB%AC%E7%9A%84%E5%BB%BA%E8%AE%AE/","excerpt":"这是很难想象的事，大学生活就这么快结束了。这篇文章本来是学校要求写的给学弟学妹的建议，但对这样一个没什么并不成功的我来说，我想我是没什么资格建议的。 回到大一，现在的我又会对自己说什么呢？ 我起初想告诉自己：你要去学会“翻墙”学会在广阔的互联网中学习知识，掌握一门计算机语言，坚持英语学习。你要学会使用vscode，vim，markdown，docker，git，terminal。学会租一个服务器，买一个域名，在github上搭建自己的仓库，建立自己的博客。你要好好学高等数学，现代代数，概率论，离散数学，计算机网络，数据结构，操作系统，编译原理，计算机组成原理这些课程。","text":"这是很难想象的事，大学生活就这么快结束了。这篇文章本来是学校要求写的给学弟学妹的建议，但对这样一个没什么并不成功的我来说，我想我是没什么资格建议的。 回到大一，现在的我又会对自己说什么呢？ 我起初想告诉自己：你要去学会“翻墙”学会在广阔的互联网中学习知识，掌握一门计算机语言，坚持英语学习。你要学会使用vscode，vim，markdown，docker，git，terminal。学会租一个服务器，买一个域名，在github上搭建自己的仓库，建立自己的博客。你要好好学高等数学，现代代数，概率论，离散数学，计算机网络，数据结构，操作系统，编译原理，计算机组成原理这些课程。 我常常怪自己，怪自己为什么没有早点学会这些技能，了解这些课程的重要性。以至于让自己在无意义的洪流中忙忙碌碌，却收获甚微。上个月，南京大学的jyy在b站上传了一个课程的录播。是讲给江苏ioer看的。视频中jyy告诉同学们为什么竞赛的电脑系统全部变成了linux系统，教他们基本的linux命令，使用技巧，配置编程环境。看着这个视频，我心生羡慕，羡慕他们能这么早接触到Linux，羡慕他们能有像jyy这样的老师告诉他们，你们不要仅仅依赖window的图像界面，哪些ide强大的功能其实也是这样一些基本像gnu这样的小程序组成的。 大一的自己还在笨拙的使用codeblock这样的古老ide，还在CSDN，Baidu这样的垃圾堆里啃食，对一个两重for循环挠破头，面对冒泡排序始终没有头绪。即使这样，但我也不会苛责自己，不会要求自己一定要怎么样。因为我知道，那时候的我刚从高中毕业，沉没在高中应试教育的泥潭中，对这个世界的一切一无所知。没有人告诉我，你应该去做什么，你应该学会哪些工具。大学，对我来说是一个未知的地方，一个用高中三年苦行僧似的生活所换来的入场券。刚踏入这个未知的领域的我，对大学生活充满希望，向往着一切的美好。我去参加了社团，参加了大学的辩论队。积极的结交朋友，幻想着”大学出道“。保有高中好学生的心态，参加早操，不缺席每一堂课，就这样的不停息的转动着。 我不会责怪自己，因为我知道，在这样的环境下，我已经足够努力了。我不会要求那时候的自己去掌握那些工具，如果真有希望那时候的自己能知道的，我想告诉自己，不要放弃学习英语，去买台Mac。 大一大二两年，放弃了自己高中一直背单词的习惯，是我目前唯一遗憾的事。那时候的我不知道，英语，对我去打开了解世界的窗，在优质且丰富的网络资源中学习是多么有用的能力。这也是一个遗憾，一个作为中文母语者的遗憾。在互联网上，优质的中文资源实在太少，简体中文互联网并不是没有优质资源，而是像一个朋友圈一样，我们无法通过搜索引擎检索到这些优质内容，导致Baidu内容充斥着广告和垃圾信息。一两年前，我刚学会使用GitHub的时候，看到一位程序员在自己的项目中的readme文档中，写到：希望大家都去写中文的readme文档，一起建立良好的中文编程环境。这真的是一个悲哀，中文在互联网的占比真的太小了。在一个统计报告中，中文内容的占比只有百分之一点几，虽然不会觉得会有英语那样统治级的地位，但中国十三亿人口，十亿网民输出到互联网的中文内容竟然只有百分之一，这比不过日语，俄语，法语也就算了，竟被越南语给超过了。来到AIGC的时代，这一痛点带来的影响似乎开始显露。互联网中文内容的低质量和缺少，导致AI模型训练数据的低质量和缺少。而AI训练，恰好是急需要优质的训练数据，不然就是垃圾进垃圾出了。算力资源被锁死，中文内容稀缺且低质量，在下一个AI时代，中国会走到哪里不经让人担心起来。 去买Mac，这是一个危险的建议。互联网上的所有数码up主，所有评论都不会推荐你去买Mac，他们甚至会嘲笑，贬低。你会看到Mac跑不了C4D，跑不了工业软件，没有生产力，Max能做到事windows也能做，windows能做到事mac却不都能做，加之使用mac也基本上告别了游戏。知名百万粉丝数码up主“笔吧评测室”也会举例说：如果老师钉钉上发给你某个古老的软件，要用这个软件做实验，Mac就只能干瞪眼了。且周围都是使用windows的同学，老师不会为了专门去照顾使用Mac的同学教你如何在Mac上找到替代品。 他们说的都是真的，我也必须承认，但我始终推荐每一个计算机的学生，买Mac。国内cs教学Mac不友好是真的，不过问题应该是为什么学校要使用那些古老的32位windows软件教学呢？这些大多数软件已经不更新了，或者是有更新更好的替代产品。Mit有一个非常著名的课程，叫The Missing Semester of Your CS Education。就是教学生使用工具的，这是我国本科教育所欠缺的，我们从来没有一门课去教学生去使用Linux command进行信息处理，vim（这个有争议，但是我觉得还很有用的）编辑文档，markdown编写readme，git（非常重要，cs人必须掌握）这样的工具。课程网站上提到一个观点：学会使用工具比学会知识更重要。上面这些工具，在Mac（类unix）或者说linux这样的电脑上才有，或者是使用体验更好的。能做和做好区别很大。相较于中国，国外学校的对mac的使用环境更好，不仅老师会使用mac上课，实验指导书也会为使用mac的同学提供环境配置指导。 这些也给我使用mac带来了很多困难，学习计算机网络的时候，老师发给我们的软件是一个华为的包追踪实验模拟器。mac并没有这个软件。这就必须去找一个替代品，且老师教授软件的使用也是基于这个软件的，你就不得不去寻找替代软件的使用方法。不过搜索后，你很快就会发现，有个叫Cisco Packet Tracer的软件功能完全一样，且在网上能找到大量的教程。你不仅找到了替代品，还锻炼了自己网络信息检索的能力，主动学习的能力，也了解到计算机网络领域，有华为，思科这样的科技公司。学习oracle数据库的时候，mac平台甚至都没有这个数据库软件，也没法说找mysql，mongodb这样做替代品。我为在mac上如何配置oracle花了大量的功夫，想了很多办法，为此我还特地写了篇博客介绍了这些方法，希望对其他的mac学生有所帮助。在这个过程中，我学会了使用ssh连接到室友的电脑，使用他电脑安装的oracle软件，不仅可以一起做项目，也完全不用我安装任何其他软件。学会了在Azure租一台服务器，开一个虚拟机，在虚拟机里安装oracle环境，通过ssh连接到虚拟机，远程使用oracle。使用ssh的私钥和公钥来进行端点鉴别，加深了我对计算机网络的理解。也了解到像docker这样神奇的软件，用docker安装oracle镜像，不过那时候docker还没有oracle的基于M1的Mac镜像。 Mac究竟带了什么呢？ Mac带来了的是一个类linux环境，让你不再为配置编程环境烦恼。我记得大二的我使用Windows给vscode配置C语言环境的痛苦，我配置了整整一个星期，最后虽然配置好了，但中途也会出现各种bug。这对一个刚跨入计算机领域的学生来说，是一个极大的折磨。mac带来了脱离鼠标的体验，轻薄和可以让你使用一整天的续航。这些带给你的，是你可以随心所欲的带出门，不用特地携带鼠标和鼠标垫，不用带适配器充电，安安静静地运行，不会打扰到任何人。我们学校有一点我觉得做得非常好，会白天断电。鼓励学生们走出寝室。走出寝室，去自习室，去图书馆，去咖啡厅带来的学习效率的提升和在寝室是完全不一样的。寝室并不是一个适合学习的地方。但对于使用windows笔记本的同学来说，把笔记本带出门就变的十分痛苦了。特别是使用游戏本的人来说，你想着你要带充电器，带鼠标和鼠标垫（这个也可以不带），还要考虑去的地方有没有插座供电，可能就不愿意带电脑出门了。对计算机专业的学生来说，没带电脑很多东西都做不了，一想到这些，最终你就不想出寝室了，觉得在寝室也能学。恰好我们学校图书馆教室都是不提供插座供电的（严格的来说有，不过一间教室往往只有头尾有两个，很明显是不够的）。 大学究竟给我带来了什么呢？或者是大学给我提供了什么？ 我时常痛恨我国的大学教育，特别是本科教育，大学这四年，我并没有感受到大学对我的指导性帮助，反而给我带来了很多障碍和误导。这和我高中对大学的憧憬带来了恐怖的落差，时常觉得，我高中拼搏的三年，究竟值得吗？某国内AI巨头创始人在复旦大学本科毕业时，对学弟学妹们对一封建议书中说“我国的本科教育不是濒临崩溃，而是已经崩溃”。虽然有些夸张，但也反映我国本科教育的存在的很多问题。这些不仅是本科教育存在的问题，也是我国教育系统存在的问题。b站上宋浩老师的高等数学课程截至目前已经获得了1.2亿的播放量，大家都调侃是宋浩拯救了我的高等数学。（不过我不得不说，教授我数学的吴海燕老师是我认为大学教学最好的老师，甚至整个数学系的老师，包括教我线性代数和离散数学的老师教课都非常好。但我教授我计算机相关专业的课程的老师每一个都让我失望）。 大多数为本科教学质量差的辩护都是认为大学不仅是教育机构，更是承担着科研任务。教授考核指标也不是你的教学质量，而是你论文发了多少，影响因子多少。这些才是大学教授最关心的，所以大多数老师对教学只看作工作，这也不外乎大多数的老师拿着十几年前教材提供的ppt照本宣科。当然，这并不是我国存在的问题，全世界的大学都有这样的问题，给教工和教授的经费严重不平衡。上了大学真的很少看见有老师有着对教学的热情。让我时常不感激我的中小学老师，他们是真的热爱教书，真的是希望学生能取得更好的未来。一开始我也认为这样确实是这样的原因，最近一位多伦多大学的数学博士这样认为，“研究和教学并不冲突。教授学生知识是一个自利利他的行为，不仅是传递知识，更是提升自己对知识结构的掌握。教学的最大受益人永远是老师自己。且诸多你能在定理中看见他的名字的数学家，比如欧拉，都是著名的教育家，教出过很好的学生。” 老师不愿意认真对待教学，学校的实验实践也完全随意设置。不仅没考虑学生的学习进度，学习进度和实验进度不匹配。也不考虑实际的学生能力，不管什么计算机课都要来一个全栈系统，oracle要做一个图书管理系统，要有前端有后端。web要做一个学生管理系统也要有前端有后端，java有，c#有，mysql有，实践课有，实验课有。实验指导书不能叫做实验指导书，完全没用指导意义。多数实验只给出一个实验要求。学生拿到实验报告不知道怎么做，最终也只能去网上copy一份。我们学数据库就应该操心数据库的东西，学前端就应该去设计前端的网站，利用已经编写好的后端接口，而不用去担心后端CRUD代码的编写。这不仅是真正锻炼了学生，也是实际的工作中的流程。我当然不是认为做一个全栈系统不好，恰恰相反，我认为你去真真正正独立完成一个全栈系统的搭建，学到的东西是非常多，且非常值得的。但这样的内容应该放在一个单独的设计实践中去，并给同学们大量的时间。似乎老师不知道独立做一个全栈系统所耗费的时间，不在于难，而在于多。需要大量的时间投入，往往是一个月的投入才能做好一个全栈系统。相比之下，我自学的Computer Networking: a Top-Down Approach课程的实验就非常详尽，实验指导书详细指导了你应该怎样编写代码，所有的函数都是书上讲过的。在编写传输层的代码时，我不需要去实现整个五层架构的代码，只需要认真编写传输层的代码。应用层和其下的网络层代码已经实现，我们只需要拿到应用层的PDU，做传输层应该做的任务，打包成一个对应的的SDU。交给其下的网络层就可以了，只要我们把缺失的代码编写好，整个系统就可以完美的跑起来。不仅如此，实验提供的代码还有完备的readme文档，方便的debug信息，你可能遇到的问题都会有一一解答，可以说，你只要认真的学会了本章的内容，就可以完成实验，做完了这个实验，你才会感叹计算机网络五层架构的设计意义。 另一个本科教育的问题，就是我国优质教材的缺失。大家抨击的比较多的教材是复旦大学的线性代数，从行列式讲起，导致学生学完了线性代数都不知道这个科目是干什么呢，为什么要学。只会算行列式，矩阵。考试也只考这些。（我校的线性代数教材是自编教材，更差，删掉了很多内容，完全就是一本应付考试的书）。这些我也深有体会，线性代数的重要性不言而喻。我们的世界是连续的，很多计算机领域，工程领域的问题本质上都是线性代数的问题。国外最有名的线性代数教材是Gilbert Strang编写的《Introduction to Linear Algebra》这位教授同时也在MIT教授这门课，讲得非常有感染力且激情，这门课也被誉为线性代数的经典。CMU的镇校之课CS15-213，是一门教授学生计算机基础的课程，设计汇编语言、体系结构、操作系统、编译链接、并行、网络等，作为系统入门课，兼具深度和广度。同时这个课程也带来了《Introduction to Computer System》，国内翻译版本《深入理解计算机系统》，这本经典的教材。但这本书并不是一开始就有的，而是在教授的过程中，老师不断完善讲义，最终出版的一本教材。所以我国优秀教材的缺失，和本科教学质量的低下本质上是一个原因。好的教材是在教学过程中产生的，而不一蹴而就的。正是老师不愿意去认真对待教学，导致了优秀教材的缺失。优秀教材的缺失有反过来导致其他老师没有一本指导性教学教材而很难去进行教学。 我国大学形式主义的泛滥也是一个问题。调查问卷形同虚设。大家都知道，要全部填满意。不是我们不愿意，或者不敢指出问题，而是我们知道，没用。没有人指出问题是相当可怕的一件事。同时，早操，青年大学习，各种安全法制问答，表格要完成，学习通那些质量极差的录播课，要全部看完，","categories":[{"name":"杂谈","slug":"杂谈","permalink":"https://trevoewu.github.io/categories/%E6%9D%82%E8%B0%88/"}],"tags":[{"name":"建议","slug":"建议","permalink":"https://trevoewu.github.io/tags/%E5%BB%BA%E8%AE%AE/"}]},{"title":"📔iDictionary","slug":"iDictionary","date":"2023-10-10T13:14:49.000Z","updated":"2023-10-11T05:10:06.878Z","comments":true,"path":"2023/10/10/iDictionary/","link":"","permalink":"https://trevoewu.github.io/2023/10/10/iDictionary/","excerpt":"","text":"📔 Upset Upset n. an unhappy and worried mental stateup😭 she didn’t realize the upset she caused me synonymous： disturbance, perturbation ==the act of disturbing the mind or body== his carelessness could have caused an ecological upset synonymous： derangement, overthrow condition in which there is a disturbance of normal functioning everyone gets stomach upsets from time to time synonymous： disorder a tool used to thicken or spread metal (the end of a bar or a rivet etc.) by forging or hammering or swaging synonymous： swage the act of upsetting something he was badly bruised by the upset of his sled at a high speed synonymous： overturn, turnover an improbable and unexpected victory the biggest upset since David beat Goliath synonymous： overturn upset v. disturb the balance or stability of The hostile talks upset the peaceful relations between the two countries cause to lose one’s composure synonymous： discompose, untune, disconcert, discomfit move deeply[深深的打动] This book upset me synonymous： disturb, trouble cause to overturn from an upright or normal position synonymous： overturn, tip over, turn over, knock over, bowl over, tump over defeat suddenly and unexpectedly The foreign team upset the local team upset adj. afflicted with or marked by anxious uneasiness or trouble or grief too upset to say anything synonymous： disquieted, distressed, disturbed, worried thrown into a state of disarray or confusion with everything so upset synonymous： broken, confused, disordered used of an unexpected defeat of a team favored to win the Bills’ upset victory over the Houston Oilers mildly physically distressed an upset stomach having been turned so that the bottom is no longer the bottom the upset pitcher of milk synonymous： overturned, upturned Justice justice n. the quality of being just or fair synonymous： justness the administration of law; the act of determining rights and assigning rewards or punishments justice deferred is justice denied synonymous： judicature a public official authorized to decide questions brought before a court of justice synonymous： judge, jurist, magistrate Ethical ethical adj. of or relating to the philosophical study of ethics ==ethical codes== ==ethical theories== conforming to accepted standards of social or professional behavior an ethical lawyer ethical medical practice an ethical problem had no ethical objection to drinking Ours is a world of nuclear giants and ethical infants adhering to ethical and moral principles it seems ethical and right synonymous： honorable, honourable, moral Legitim-acy 词根&quot;legitim&quot;来自拉丁语&quot;legitimus&quot;，意为&quot;合法的&quot;或&quot;正当的&quot;。这个词根指示了legitimacy的基本含义，即合法性或合理性。 词缀&quot;-acy&quot;是一个名词后缀，用于将一个形容词转化为一个名词。 合法性，合法地位 近义词：validity, legality 反义词：illegitimacy 例句： The government’s legitimacy was questioned after allegations of electoral fraud. The court’s decision confirmed the legitimacy of the contract. Con-duct 词根：conduct的词根是“con-”，它源自拉丁语中的“conducere”，意为“引导、带领”。这个词根表达了行为或过程中引导、带领的意义。 词源：conduct的词源可以追溯到拉丁语中的“conductus”，意为“引导、带领”。这个词源进一步来自拉丁语中的“conducere”，意为“带领、引导”，由“con-”（共同）和“ducere”（引导）组成。 conduct n. manner of acting or controlling yourself ==The code of conduct== 行为准则 synonymous： behavior, behaviour, doings (behavioral attributes) the way a person behaves toward other people synonymous： demeanor, behavior, deportment conduct v. direct the course of; manage or control You cannot conduct business like this synonymous： carry on, deal lead, as in the performance of a composition conduct an orchestra Barenboim conducted the Chicago symphony for years synonymous： lead, direct behave in a certain manner They conducted themselves well during these difficult times synonymous： behave, acquit, bear, deport, comport, carry transmit or serve as the medium for transmission Many metals conduct heat synonymous： transmit, convey, carry, channel take somebody somewhere He conducted us to the palace synonymous： lead, take, direct, guide lead musicians in the performance of Bernstein conducted Mahler like no other conductor she cannot conduct modern pieces Judic-iary 词根&quot;judic-“，来自拉丁语词根&quot;iudicium”，意为&quot;裁定、判决、判断&quot;。&quot;Judic-“作为一个词根，常在与法律、司法等领域的词汇中出现，例如&quot;judge”（法官）、“judgment”（判决、判断）等。 词缀&quot;-ary&quot;，表示&quot;与…有关的&quot;或&quot;某个领域的&quot;。在这个单词中，&quot;-ary&quot;表明&quot;judiciary&quot;是与司法系统相关的事物，是指法院、法官、法庭和其他司法机构的集合。 中文意思：司法（机构/部门） 近义词：法官团队 反义词：行政部门 例句： The judiciary plays a vital role in upholding the rule of law. The appointment of judges is a crucial decision for the judiciary.（“法官团队”意义下的使用） sub-ject subject源自拉丁语的“subjectus”，意为“被置于下方的”。在拉丁语中，这个词形容一种被征服或被控制的状态。 词根“sub-”表示“在下方”，次级的意思。在subject中，词根“sub-”表达了被置于或受控制的状态。 词缀“-ject”表示“投掷”或“放置”。在subject中，词缀“-ject”表示某人或某事被放置或安置在某种情况或条件之下。 subject n. the subject matter of a conversation or discussion he didn’t want to discuss that subject synonymous： topic, theme a branch of knowledge teachers should be well trained in their subject synonymous： discipline, subject area, subject field, field, field of study, study, bailiwick, branch of knowledge something (a person or object or scene) selected by an artist or photographer for graphic representation a moving picture of a train is more dramatic than a still picture of the same subject synonymous： content, depicted object a person who is subjected to experimental or other observational procedures; someone who is an object of investigation the subjects for this investigation were selected randomly synonymous： case, guinea pig guinea pig: 豚鼠：一种小型、矮胖、无尾巴的家养啮齿动物（Cavia porcellus），原产于南美洲，通常作为宠物饲养，并广泛用于生物研究。 a person who owes allegiance to that nation[臣民] a monarch has a duty to his subjects synonymous： national (grammar) one of the two main constituents of a sentence; the grammatical constituent about which something is predicated (logic) the first term of a proposition subject v. cause to experience or suffer or make liable or vulnerable to He subjected me to his awful poetry The sergeant subjected the new recruits to many drills People in Chernobyl were subjected to radiation make accountable for He did not want to subject himself to the judgments of his superiors make subservient; force to submit or subdue synonymous： subjugate refer for judgment or consideration synonymous： submit subject adj. not exempt from tax the gift will ==be subject to== taxation possibly accepting or permitting the time is fixed by the director and players and therefore subject to much variation synonymous： capable, open being under the power or sovereignty of another or others subject peoples synonymous： dependent likely to be affected by something (especially something unpleasant) the bond is subject to taxation he is subject to fits of depression Envision envision v. imagine; conceive of; see in one’s mind synonymous： visualize, visualise, project, fancy, see, figure, picture, image picture to oneself; imagine possible I cannot envision him as President synonymous： foresee Cultivate cultivate | ˈkʌltɪveɪt | verb [with object] prepare and use (land) for crops or gardening: the peasants who cultivated the land became its owners. • break up (soil) in preparation for sowing or planting: (as adjective, with submodifier cultivated) : damp, well-cultivated soil. • raise or grow (plants), especially on a large scale for commercial purposes: they were encouraged to cultivate basic food crops | walnuts were cultivated for salad oil. • Biology grow or maintain (living cells or tissue) in culture : blood cells that can be most easily cultivated are macrophages. try to acquire or develop (a quality or skill) : he cultivated an air of indifference. • try to win the friendship or favour of (someone): *it helps if you go out of your way to cultivate the local people*. **• try to improve or develop (one's mind).** Ideology An ideology is a set of beliefs or philosophies attributed to a person or group of persons, especially those held for reasons that are not purely epistemic, in which &quot;practical elements are as prominent as theoretical ones.&quot;Formerly applied primarily to economic, political, or religious theories and policies, in a tradition going back to Karl Marx and Friedrich Engels, more recent use treats the term as mainly condemnatory 意识形态是归因于一个人或一群人的一套信仰或哲学，特别是那些出于非纯粹认识论的原因而持有的信仰或哲学， 其中“实践因素与理论因素一样突出”。 以前主要应用于经济，政治或宗教理论和政策，其传统可以追溯到卡尔马克思和弗里德里希恩格斯，最近的使用将这个词视为主要是谴责性的。 The term was coined by Antoine Destutt de Tracy, a French Enlightenment aristocrat and philosopher, who conceived it in 1796 as the “science of ideas” to develop a rational system of ideas to oppose the irrational impulses of the mob. In political science, the term is used in a descriptive sense to refer to political belief systems 这个词是由法国启蒙运动贵族和哲学家安托万·德斯图特·德·特雷西（Antoine Destutt de Tracy）创造的，他在1796年将其设想为“思想科学”，以发展一种理性的思想体系，以反对暴民的非理性冲动。在政治学中，该术语用于描述性意义，指代政治信仰体系。 Bound Examples The company is growing by ==leaps and bounds this year==. 今年公司==突飞猛进==. Even though she was fully aware of the risks, Susan refused to take the necessary precautions to prevent the spread of a contagious disease, proving that ==selfishness knows no bound== 尽管苏珊充分意识到风险，但她拒绝采取必要的预防措施来防止传染病的传播，证明自私是无止境的 bound v. to leap or spring forward with energy and enthusiasm, often with all four feet leaving the ground simultaneously synonyms : jump leap spring place limits on (extent or amount or access) synonyms : confine limit restrict throttle trammel form the boundary of; be contiguous to synonyms : border spring back; spring away from an impact synonyms : bounce rebound recoil resile reverberate ricochet spring take a hop bound adj. held with another element, substance or material in chemical or physical union confined by bonds bound and gagged hostages secured with a cover or binding; often used as a combining form bound volumes leather-bound volumes (usually followed by `to’) governed by fate bound to happen synonymous： destined covered or wrapped with a bandage an injury bound in fresh gauze synonymous： bandaged headed or intending to head in a certain direction; often used as a combining form as in `college-bound students’ children bound for school synonymous： destined bound by an oath a bound official bound by contract synonymous： apprenticed, articled, indentured confined in the bowels he is bound in the belly bound n. a line determining the limits of an area synonymous： boundary, edge the greatest possible degree of something what he did was beyond the bounds of acceptable behavior synonymous： limit, boundary a light, self-propelled movement upwards or forwards synonymous： leap, leaping, spring, saltation, bounce Accountable accountable | əˈkaʊntəbl | adjective required or expected to justify actions or decisions; responsible: ministers are *accountable to* Parliament | parents cannot be *held accountable for* their children’s actions. **able to be explained or understood: ** the delayed introduction of characters’ names is accountable, if we consider that names have a low** priority*. shape /ʃˈe‍ɪp/ shape n. any spatial attributes (especially as defined by outline) he could barely make out their shapes synonymous： form, configuration, contour, conformation the spatial arrangement of something as distinct from its substance geometry is the mathematical science of shape synonymous： form alternative names for the body of a human being synonymous： human body, physical body, material body, soma, build, figure, physique, anatomy, bod, chassis, frame, form, flesh a concrete representation of an otherwise nebulous concept synonymous： embodiment the visual appearance of something or someone synonymous： form, cast the state of (good) health (especially in the phrases in condition' or in shape’ or out of condition' or out of shape’) synonymous： condition the supreme headquarters that advises NATO on military matters and oversees all aspects of the Allied Command Europe synonymous： Supreme Headquarters Allied Powers Europe a perceptual structure synonymous： form, pattern shape v. shape or influence; give direction to synonymous： determine, mold, influence, regulate make something, usually for a specific function shape a figure synonymous： form, work, mold, mould, forge give shape or form to shape the dough synonymous： form","categories":[{"name":"考研","slug":"考研","permalink":"https://trevoewu.github.io/categories/%E8%80%83%E7%A0%94/"}],"tags":[{"name":"考研","slug":"考研","permalink":"https://trevoewu.github.io/tags/%E8%80%83%E7%A0%94/"},{"name":"英语学习","slug":"英语学习","permalink":"https://trevoewu.github.io/tags/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"}]},{"title":"必要的记录-别停下来","slug":"必要的记录","date":"2023-09-10T14:35:27.000Z","updated":"2023-09-17T14:39:53.780Z","comments":true,"path":"2023/09/10/必要的记录/","link":"","permalink":"https://trevoewu.github.io/2023/09/10/%E5%BF%85%E8%A6%81%E7%9A%84%E8%AE%B0%E5%BD%95/","excerpt":"","text":"早上起床，我想也不能称之为早上，发现昨天开始的症状并没有减轻。昨天早上开始，屁股眼里的肌肉便开始不受控制的的筋挛，好像在昭示自己的存在般。虽不严重，但总让我心烦，完全没法沉浸在眼前的学习中。 上次这种情况出现是在我一段生活极其不规律的时光，但，这段时间我我的生活相当规律吧。每天一点睡，早上十点起，应该对于一个大学生来说相当好了。 但情况依旧发生了，早上去了图书馆，做不了几分钟便被干扰得心烦意乱。彻底放下笔，背着书包离开了图书馆。想着做点什么运动，我确实也好久没运动了。做点什么呢，突然感觉很遗憾，没什么运动可做啊。我会的也就只有羽毛球和乒乓球。现在，羽毛球没有拍，乒乓球场馆就没见学校开过几次，真不知道学校修这么豪华的体育馆有什么用了。利用率最高的时候恐怕是疫情时候被用来做核酸吧。 Dear Wilbur, I am thrilled to learn of your interest in seeking employment opportunities in my country, China, which is undergoing rapid development and brimming with possibilities. I have a few suggestions that I would like to share with you. Primarily, ensure that you pursue a profession that suits your preferences. China being a vast and diversified economy, you can certainly find a job that aligns with your interests. Additionally, try to exhibit a positive attitude while presenting your resume. If you receive no response after submitting a document to a prospective employer, it may leave you feeling perplexed and rejected. However, do not lose heart and continue to hone the skills you lack, and persist in your pursuit of employment. Congratulations when you receive an offer! The employer and you are bound to find their match in each other. Finally, maintain a healthy lifestyle while tackling the challenges that lie in store for you. Besides work, China offers a plethora of fantastic cuisine and social activities. Do not forget to savour life’s little pleasures! Sincerely, Li Ming. This picture depicts that the son feels discouraged by peers comments that opera is not enjoyable at all, but the father thinks it is enough if you and yourself like opera in your heart. Children always pay attention to peers’ thoughs unduly when they trying to something them want to do but compare peers that behaviors are relative strange. Thus children are easily be influented cause them finally give the thing them loved up. It is important for a yong children to offer them confience and courage when they were confused and though themselves were perculiar. The depicted picture portrays a disheartened son who has been discouraged by his peers’ negative opinions on opera. His father, on the other hand, believes that it is enough for one to enjoy opera in their own heart, regardless of what others think. It is common for children to be overly concerned with the opinions of their peers, especially when it comes to pursuing interests that may not be widely accepted. However, comparing oneself to others is a peculiar behavior that can ultimately lead to feeling influenced and giving up on what is truly loved. Thus, it is crucial for young children to be instilled with confidence and bravery during moments of confusion or doubt, even in seemingly odd situations. The image presented shows a despondent son who has been disheartened by the negative opinions of his peers regarding opera. In contrast, his father believes that it is paramount for an individual to derive pleasure from opera within themselves, irrespective of the views of others. Peer pressure is a common phenomenon that affects children, and it can be particularly challenging when a child is interested in something that is not generally applauded. Comparing oneself to peers is a strange habit that often leads to conformity and abandoning what one truly loves. Hence, it is essential to instill self-confidence and bravery in children, particularly when they are unsure of themselves in unusual situations. It is imperative to teach children to believe in themselves and follow their hearts, even when others do not understand or approve of their interests. Encouraging children to embrace their passions, hobbies, and talents can help them grow into more fulfilled adults who are capable of pursuing their dreams despite any form of negativity around them. In conclusion, children must be taught to follow their aspirations and be brave enough to march to the beat of their drum. By doing so, they are more likely to develop a sense of self-awareness, self-love, and self-confidence that will stay with them for life. The depicted image serves as a gentle reminder that it is vital to believe in oneself and live life by one’s own terms.","categories":[{"name":"必要的记录","slug":"必要的记录","permalink":"https://trevoewu.github.io/categories/%E5%BF%85%E8%A6%81%E7%9A%84%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"日记","slug":"日记","permalink":"https://trevoewu.github.io/tags/%E6%97%A5%E8%AE%B0/"}]},{"title":"Writing Your Own Unix Shell","slug":"Writing-Your-Own-Unix-Shell","date":"2023-07-09T08:26:25.000Z","updated":"2023-07-11T11:14:23.397Z","comments":true,"path":"2023/07/09/Writing-Your-Own-Unix-Shell/","link":"","permalink":"https://trevoewu.github.io/2023/07/09/Writing-Your-Own-Unix-Shell/","excerpt":"Introduce 这个任务的目的是让你更加熟悉进程控制和信号传递的概念。你将通过编写一个简单的Unix shell程序来实现作业控制。","text":"Introduce 这个任务的目的是让你更加熟悉进程控制和信号传递的概念。你将通过编写一个简单的Unix shell程序来实现作业控制。 使用说明 输入命令 tar xvf shlab-handout.tar 解压 tarfile文件。 tar xvf shlab-handout.tar 键入 make 命令以编译和链接一些测试例程。 查看 tsh.c 文件，它包含一个简单 Unix shell 的函数框架。为了帮助你入门，我们已经实现了一些不那么有趣的函数。你的任务就是完成下列函数。为了让你进行一次合理性检查，我们列出了我们参考解决方案中每个函数的大致代码行数（包括大量注释）。 eval: 解析和解释命令行的 Main 例程. [70 行] builtin cmd: 识别和解释内置命令: quit，fg，bg，and jobs [25 行] do_bgfg: Implements the bg and fg built-in commands. [50 lines] waitfg: 等待前台作业完成。[20 行] sigchld handler: 捕捉 SIGCHILD 信号。[80 行] sigint handler: 捕获SIGINT（ctrl-c）信号。[15行] sigtstp handler: 捕捉 SIGTSTP (ctrl-z)信号。[15 行] 每次修改 tsh.c 文件时，输入 make 重新编译它。要运行 shell，在命令行中输入 ./tsh: unix> ./tsh tsh 规范 您的 tsh shell 应该具有以下特性: 提示符应该是字符串“ tsh &gt;”。 用户输入的命令行应该包含一个名称，零个或多个参数，所有参数都由一个或多个空格分隔。 如果 name 是一个内置命令，那么 tsh 应该立即处理它并等待下一个命令行。否则，tsh 应该 假定 name 是一个可执行文件的路径，它在一个初始子进程的上下文中加载并运行该文件(在这个上下文中，术语 job 指的是这个初始子进程)。 tsh 不需要支持管道(|)或 i/o 重定向(&lt; 和 &gt;)。 键入 ctrl-c (ctrl-z)应该导致将 SIGINT (SIGTSTP)信号发送到前台作业，以及该作业的任何后代(例如，它分叉的任何子进程)。如果没有前台作业，那么该信号应该没有作用。 如果命令行以 &amp; 结尾，那么 tsh 应该在后台运行作业。否则，它应该在前台运行作业。 每个作业可以由进程 ID (PID)或作业 ID (JID)标识，后者是由 tsh 分配的一个正整数。Jid 应该 在命令行中用前缀“%”表示。例如，“% 5”表示 JID 5，“5”表示 PID 5。(我们已经为您提供了 操纵工作列表所需的所有例程） tsh 应该支持以下内置命令: Quit 命令终止 shell。 Jobs 命令列出了所有的后台工作。 Bg &lt; job &gt; 命令通过发送 SIGCONT 信号重启 &lt; job &gt; ，然后在后台运行。参数 &lt; job &gt; 可以是 PID 或 JID。 fg &lt; job &gt; 命令通过发送 SIGCONT 信号重新启动 &lt; job &gt; ，然后在前台运行它。参数 &lt; job &gt; 可以是 PID 或 JID。 tsh 应该回收所有的僵尸子进程。如果有任何作业因接收到未捕获的信号而终止，那么 tsh 应该识别此事件，并打印一条包含作业的 PID 和触发信号描述的消息。 检查你的程序 我们提供了一些工具来帮助你检查你的程序。 参考解决方案。 Linux 可执行文件 tshref 是该 Shell 的参考解决方案。运行此程序以解答您对您的 Shell 应如何行为的任何疑问。您的 Shell 应生成与参考解决方案完全相同的输出（当然，除了进程ID，因为它们在每次运行时会变化）。 Shell 驱动程序 sdriver.pl程序将shell作为子进程执行，根据跟踪文件的指示发送命令和信号，并捕获并显示shell的输出。 使用 -h 参数查找 sdriver.pl 的用法: -> ./sdriver.pl -h Usage: ./sdriver.pl [-hv] -t &lt;trace> -s &lt;shellprog> -a &lt;args> Options: -h Print this message -v Be more verbose -t &lt;trace> Trace file -s &lt;shell> Shell program to test -a &lt;args> Shell arguments -g Generate output for autograder 我们还提供了16个跟踪文件（trace{01-16}.txt），您将与Shell驱动程序一起使用这些文件来测试您的Shell的正确性。较低编号的跟踪文件执行非常简单的测试，而较高编号的测试执行更复杂的测试。 您可以通过输入以下命令，在您的Shell上使用trace文件trace01.txt来运行Shell驱动程序： - a“-p”参数告诉你的 shell 忽略提示信息 unix> ./sdriver.pl -t trace01.txt -s ./tsh -a \"-p\" 或者 unix> make test01 类似地，您可以通过输入以下命令来运行跟踪驱动程序，并将其应用于参考Shell，以将结果与参考Shell进行比较： ./sdriver.pl -t trace01.txt -s ./tshref -a \"-p\" 或者 make rtest01 tshref.out提供了参考解决方案在所有跟踪文件上的输出。这可能比您手动在所有跟踪文件上运行Shell驱动程序更方便。 跟踪文件的好处在于，它们生成的输出与您以交互方式运行Shell时获得的输出相同（除了一个标识跟踪的初始注释）。 例如： bass> make test15 ./sdriver.pl -t trace15.txt -s ./tsh -a \"-p\" # # trace15.txt - Putting it all together # tsh> ./bogus ./bogus: Command not found. tsh> ./myspin 10 Job (9721) terminated by signal 2 tsh> ./myspin 3 &amp; [1] (9723) ./myspin 3 &amp; tsh> ./myspin 4 &amp; 5 [2] (9725) ./myspin 4 &amp; tsh> jobs [1] (9723) Running ./myspin 3 &amp; [2] (9725) Running ./myspin 4 &amp; tsh> fg %1 Job [1] (9723) stopped by signal 20 tsh> jobs [1] (9723) Stopped [2] (9725) Running tsh> bg %3 %3: No such job tsh> bg %1 [1] (9723) ./myspin 3 &amp; tsh> jobs [1] (9723) [2] (9725) tsh> fg %1 tsh> quit bass> 提示： 仔细阅读教材第8章（异常控制流）的每一个词。 使用跟踪文件指导您的Shell的开发。从trace01.txt开始，确保您的Shell产生与参考Shell完全相同的输出。然后继续处理trace02.txt，以此类推。 waitpid、kill、fork、execve、setpgid和sigprocmask函数将非常有用。waitpid的WUNTRACED和WNOHANG选项也很有用。 在实现信号处理程序时，请确保使用kill函数的参数中的&quot;-pid&quot;而不是&quot;pid&quot;，向整个前台进程组发送SIGINT和SIGTSTP信号。sdriver.pl程序会检查此错误。 任务的一个棘手部分是决定waitfg和sigchld处理函数之间的工作分配。我们推荐以下方法： 在waitfg中，使用sleep函数周围的忙等待循环。 在sigchld处理程序中，只调用一次waitpid。 虽然还有其他可能的解决方案，比如在waitfg和sigchld处理程序中都调用waitpid，但这可能非常令人困惑。在处理程序中完成所有的收集工作更简单。 在eval中，父进程在fork子进程之前必须使用sigprocmask阻塞SIGCHLD信号，然后在将子进程添加到作业列表中时，通过调用addjob后再解除阻塞。由于子进程继承了其父进程的阻塞向量，因此子进程在执行新程序之前必须确保解除阻塞SIGCHLD信号。 父进程以这种方式阻塞SIGCHLD信号，以避免在父进程调用addjob之前，子进程被sigchld处理程序收回（从而从作业列表中移除）的竞争条件。 诸如more、less、vi和emacs之类的程序会对终端设置进行奇怪的操作。不要从您的Shell中运行这些程序。坚持使用简单的基于文本的程序，例如/bin/ls、/bin/ps和/bin/echo。 当您从标准Unix Shell运行您的Shell时，您的Shell正在运行在前台进程组中。如果您的Shell创建了一个子进程，默认情况下，该子进程也将成为前台进程组的成员。由于键入ctrl-c会向前台组中的每个进程发送SIGINT信号，因此键入ctrl-c将向您的Shell发送SIGINT信号，以及您的Shell创建的每个进程，这显然是不正确的。 以下是解决方法： 在fork之后但在execve之前，子进程应调用setpgid(0, 0)，这将子进程放入一个新的进程组，其组ID与子进程的PID相同。这确保前台进程组中只有一个进程，即您的Shell。当您键入ctrl-c时，Shell应捕获生成的SIGINT信号，然后将其转发给相应的前台作业（更确切地说，包含前台作业的进程组）。 评估 根据以下分配，您的得分将计为最高90分中的一部分： 80分 正确性： 16个跟踪文件，每个文件5分。 10分 风格分。 我们期望您有良好的注释（5分），并检查每个系统调用的返回值（5分）。 您的解决方案将在Linux机器上进行正确性测试，使用与实验目录中包含的Shell驱动程序和跟踪文件相同的工具。您的Shell应在这些跟踪文件上产生与参考Shell完全相同的输出，只有两个例外： • PID可能会不同（会变化）。 • trace11.txt、trace12.txt和trace13.txt中/bin/ps命令的输出会因每次运行而有所不同。然而，在/bin/ps命令的输出中，mysplit进程的运行状态应保持一致。","categories":[{"name":"csapp","slug":"csapp","permalink":"https://trevoewu.github.io/categories/csapp/"}],"tags":[{"name":"lab","slug":"lab","permalink":"https://trevoewu.github.io/tags/lab/"},{"name":"csapp","slug":"csapp","permalink":"https://trevoewu.github.io/tags/csapp/"}]},{"title":"学习杂谈：持久层框架那些链接数据库的操作","slug":"学习杂谈：持久层框架那些链接数据库的操作","date":"2023-06-10T11:26:53.000Z","updated":"2023-06-11T11:53:02.194Z","comments":true,"path":"2023/06/10/学习杂谈：持久层框架那些链接数据库的操作/","link":"","permalink":"https://trevoewu.github.io/2023/06/10/%E5%AD%A6%E4%B9%A0%E6%9D%82%E8%B0%88%EF%BC%9A%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6%E9%82%A3%E4%BA%9B%E9%93%BE%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%93%8D%E4%BD%9C/","excerpt":"为了进行数据的持久化，和数据库操作是必须的操作。 本文探讨不同的持久层框架链接数据库的操作。","text":"为了进行数据的持久化，和数据库操作是必须的操作。 本文探讨不同的持久层框架链接数据库的操作。 JDBC JDBC 为多个不同的数据库实现提供了同一的接口，使得我们可以通过JDBC来操作不同的数据库，而不需要担心数据库的具体实现。 要在Java项目中使用JDBC，首先需要引进jar包。假设我们需要链接的数据库是mysql，则需要引进mysql相关的jar包。 使用Maven是进行包管理是相当便捷的做法，要使用maven，首先我们需要新建一个Maven的项目或者模块。这里就用Java唯一指定IDE IntlliJ IDEA 来演示。 &lt;!-- mysql --> &lt;dependency> &lt;groupId>mysql&lt;/groupId> &lt;artifactId>mysql-connector-java&lt;/artifactId> &lt;version>8.0.28&lt;/version> &lt;/dependency> 要链接数据库，自然少不了要链接数据库的参数，比如Driver，URL，以及Username，Password等等。所以我们需要新建一个properties 来存放这些数据，而不是写死在Java代码中。 DRIVER=com.mysql.cj.jdbc.Driver URL=mysql://localhost:3306/demo?useUnicode=true&amp;characterEncoding=utf-8 USERNAME=root PASSWORD=root 加载驱动 数据库有着不同的实现，mysql，oracle，monogDB，SQL Server等等，而每个数据库都提供一个驱动程序，驱动程序是与数据库系统进行通信的软件组件。每种数据库系统都有自己的驱动程序，这是因为不同数据库系统采用不同的协议和通信方式。 驱动程序充当Java程序与数据库之间的桥梁，负责处理与数据库的连接、执行SQL语句以及获取和处理查询结果等任务。它们提供了一组标准的接口和方法，使得Java程序能够通过统一的方式与不同数据库进行交互，而不需要了解底层数据库的具体实现细节。 加载数据库驱动程序的常用方式是使用Class.forName()方法，例如： 在这里，我们需要加载mysql的驱动程序，MySQL数据库的驱动程序类名为com.mysql.jdbc.Driver（旧版）或com.mysql.cj.jdbc.Driver（新版）。 Class.forName(\"com.mysql.cj.jdbc.Driver\"); // 加载MySQL驱动程序 一旦数据库驱动程序加载成功，就可以通过JDBC建立与数据库的连接并执行相关操作。 建立数据库连接 要和数据库进程操作，我们需要和数据库建立一个会话关系，就像在web中一样，在web中，这个会话被称为httpSession, 而在数据库中，也同样存在着这个会话。 一个会话代表了客户端与数据库之间的通信通道，它允许客户端应用程序与数据库服务器进行交互。 // 2.连接数据库 Connection connection = DriverManager.getConnection(url, username, password); 在JDBC中，通过DriverManager.getConnection()方法建立数据库连接时，实际上是在建立一个会话。该方法返回一个Connection对象，表示与数据库的连接。这个Connection对象封装了与数据库服务器的底层通信细节，包括连接信息、会话状态和数据传输等。 通过会话，可以在连接期间执行多个SQL语句，保持数据库连接的状态。这样可以避免每次执行SQL语句都重新建立连接，提高性能和效率。当不再需要连接时，可以调用Connection对象的close()方法关闭连接，释放相关资源。 创建执行SQL语句的对象 有了链接，我们就可以通过Connection对象的createStatement()方法创建Statement对象或prepareStatement()方法创建PreparedStatement对象。 Statement用于执行静态的SQL语句，而PreparedStatement用于执行预编译的SQL语句，可以提高性能和安全性，防止SQL注入。 执行SQL语句： 通过Statement或PreparedStatement对象的executeQuery()方法执行查询语句，返回一个ResultSet对象，其中包含查询结果；通过executeUpdate()方法执行更新语句（如插入、更新、删除），返回受影响的行数。 处理结果集： 但是仅仅是往数据库中传SQL语句，显然是不够的，我们还需要接受数据库返回的数据。 数据库的操作有四种，我们将其称为CRUD，即CREATE, READ, UPDATE and DELETE，也就是我们常说的增删改查。其中查询操作返回一个结果集Result，其他的操作都返回一个int类型的整数，代表受影响的行数。 所以，我们只需要编写两个函数，处理这两种不同的操作。 对于查询操作 //执行查询, 返回结果集 public static ResultSet executeQuery(Connection conn,String query,Object[] params) throws SQLException, ClassNotFoundException&#123; ResultSet resultSet = null; if(conn != null &amp;&amp; !query.isEmpty() &amp;&amp; params != null)&#123; //预处理 PreparedStatement statement = conn.prepareStatement(query); for (int i = 0; i &lt; params.length;i++)&#123; //设置SQL 语句中的参数 statement.setObject(i+1,params[i]); &#125; //执行 resultSet = statement.executeQuery(); &#125; return resultSet; &#125; 对于更新删除，增加操作： //执行更新， 返回影响行数 public static int executeUpdate(Connection conn,String query,Object[] params) throws SQLException &#123; int affectedRows = 0; if(conn != null &amp;&amp; !query.isEmpty() &amp;&amp; params != null)&#123; //预处理 PreparedStatement statement = conn.prepareStatement(query); for (int i = 0; i &lt; params.length;i++)&#123; //设置SQL 语句中的参数 statement.setObject(i+1,params[i]); &#125; //执行 affectedRows = statement.executeUpdate(); &#125; return affectedRows; &#125; 关闭连接和资源 使用完ResultSet、Statement和Connection等对象后，需要调用它们的close()方法来关闭连接和释放资源，以免造成内存泄漏和资源浪费。 我们可以编写一个函数来专门关闭这些资源，但这不是必须的，你也可以手动关闭。 //释放链接资源 public static void close(Connection conn, PreparedStatement pstmt, ResultSet resSet) throws SQLException &#123; if(resSet != null) resSet.close(); if(pstmt != null) pstmt.close(); if(conn != null) conn.close(); &#125; 果然好麻烦，但是还没有结束，查询操作返回了一个结果集，我们还需要对这个结果集进行ORM处理，即Object Relationship Mapping。把数据库中的entity映射到一个bean上，这是最麻烦的。因为我们需要一一个处理这些字段和属性的对应关系。 下面这段代码就是一个一个例子，可以看到，对于每一个对象的属性值，我们需要一一的找到对应的字段值。这还只是查询一张表，在多表联合查询的过程中，我们需要封装的对象数量更多。我们不应该花太多时间处理这些重复而又无意义的事。 下面介绍的持久层框架，就是对JDBC的二次封装，免去了我们编写ORM的代码。 public User findById(int id) &#123; Object[] params = &#123;id&#125;; ResultSet set; sql = \"SELECT * FROM smbms_user,smbms_role Where smbms_user.userRole = smbms_role.id and smbms_user.id = ?\"; try &#123; conn = DB.getConnection(); set = DB.executeQuery(conn, sql,params); if(set != null)&#123; user = new User(); while (set.next()) &#123; user.setUserRoleName(set.getString(\"roleName\")); user.setUserPassword(set.getString(\"userPassword\")); user.setId(set.getInt(\"id\")); user.setUserCode(set.getString(\"userCode\")); user.setUserName(set.getString(\"userName\")); user.setAddress(set.getString(\"address\")); user.setBirthday((Date) set.getObject(\"birthday\")); user.setGender(set.getInt(\"gender\")); user.setPhone(set.getString(\"phone\")); user.setIdPicPath(set.getString(\"idPicPath\")); user.setUserRole(set.getInt(\"userRole\")); user.setCreatedBy(set.getInt(\"createdBy\")); user.setCreationDate( set.getDate(\"creationDate\")); user.setModifyBy(set.getInt(\"modifyBy\")); user.setModifyDate(set.getDate(\"modifyDate\")); user.setWorkPicPath(\"workPicPath\"); &#125; &#125; else &#123; return null; &#125; //关闭链接和结果集 DB.close(conn,null,set); &#125; catch (SQLException e) &#123; throw new RuntimeException(e); &#125; catch (ClassNotFoundException e) &#123; throw new RuntimeException(e); &#125; return user; &#125; MyBatis MyBatis是一个优秀的持久层框架，是对JDBC的二次封装。该框架大大简化了ORM过程，MyBatis可以通过字段和属性名自动进行ORM操作。 要使用MyBatis，当然需要引入相关的jar包： &lt;dependency> &lt;groupId>org.mybatis&lt;/groupId> &lt;artifactId>mybatis&lt;/artifactId> &lt;version>3.5.13&lt;/version> &lt;/dependency> 编写MyBatis配置文件，这个配置文件我们可以从官网中拿到对应的模版，这是mybatis的核心配置文件，通过编写配置文件，我们可以得到mybatis的不同表现。 最好将这个配置文件编写在根路径下，放在资源文件有是再好不过的选择 &lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?> &lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"https://mybatis.org/dtd/mybatis-3-config.dtd\"> &lt;configuration> &lt;!-- 从db.properties读取数据库属性--> &lt;properties resource=\"db.properties\"/> &lt;environments default=\"development\"> &lt;environment id=\"development\"> &lt;transactionManager type=\"JDBC\"/> &lt;dataSource type=\"POOLED\"> &lt;property name=\"driver\" value=\"$&#123;DRIVER&#125;\"/> &lt;property name=\"url\" value=\"$&#123;URL&#125;\"/> &lt;property name=\"username\" value=\"$&#123;USERNAME&#125;\"/> &lt;property name=\"password\" value=\"\"/> &lt;/dataSource> &lt;/environment> &lt;/environments> &lt;/configuration> 在这个配置文件中，我们只配置的数据源，后续的配置随着讲解的深入再一一添加 编写bean package cn.loulan.bean; import lombok.Data; @Data public class Student &#123; private int id; private String name; private String sex; private String major; private int age; &#125; 编写接口 和JDBC一样，我们需要编写接口，在接口中定义方法。面向接口编程可以大大降低层与层之间的耦合度。 package cn.loulan.dao; import cn.loulan.bean.Student; import org.apache.ibatis.annotations.Param; import java.util.List; public interface StudentMapper &#123; int insert(Student student); int update(Student student); Student getStudent(int id); List&lt;Student> getAll(); int delete(@Param(\"id\") int id); &#125; 不同的是，由于不需要编写接口实现类了，Mybatis会通过反射的方式在程序运行时生成实现类。所以我们需要使用@Param注解来指定参数，如果参数只有一个则不需要显式的给出，参数类型是复杂类型如java bean时也不需要显式的给出。 编写mapper 没有了实现了类，但是我们还需要编写mapper文件，其实也可以直接使用注解的方式定义SQL语句，但是这样对于较为复杂的SQL语句代码的可读性将大大降低。所以我们还是基于xml的的方式。 mapper使用xml格式，且需要保证与接口名称相同。 在mapper中，要指定命名空间，这个命名空间指向接口类，使用接口类的全限定名。 &lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?> &lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"> &lt;mapper namespace=\"cn.loulan.dao.StudentMapper\"> &lt;select id=\"getStudent\" resultType=\"cn.loulan.bean.Student\"> select * from student where id=#&#123;id&#125;; &lt;/select> &lt;/mapper> 和JDBC一样，我们需要和数据库建立连接，拿到会话，在Mybatis中，这个会话被称为Sql Session要拿到这个SqlSession, 还有点麻烦，这里Mybatis使用了一个设计模式，叫做建造者模式。这是GOF23种设计模式的创造型设计模式之一。要理解建造者模式，我们需要首先了解工厂模式。 工厂模式在spring中有着大量的运用，比如动态代理中Bean的实例化就是工厂模式的一个运用。每一个bean都对应一个工厂，用来生成这个bean。这里的工厂模式确实的说是静态工厂模式，也叫做简单工厂模式，这个设计模式并不在GOF23种设计模式之内，但是运用的也比较多，而且简单工厂模式其实算得上是工厂模式的一个特例。 要理解工厂模式，首先我们需要知道为什么需要工厂模式？ 面向对象有七大设计原则，第一个便是单一职责原则。顾名思义就是一个类只负责一个职责。我们使用一个类，不需要担心这个是如何被创建出来的，就像在生活中我们买一台电脑不需要关心这个电脑是如何生产出来的。电脑的生产由生产这个电脑的工厂负责。相较于自己造一台电脑，显然去买一台工厂生产的电脑更为现实。 简单工厂模式就是这样思想的一种体验，在软件开发过程中，我们往往需要实例化一些来着同一个父类的对象, 这个父类定义了这个工厂下所以对象的通用方法。为此专门提供一个工厂来帮我们实例化这个对象，我们只需要提供不同的参数，就可以得到不同的实例化对象，在Java开发中，我们常常把工厂类的实例化这个对象的方法定义为一个静态方法，这样，我们就不需要实例化这个类就可以调用这个方法了，这也就是静态工厂模式名字的来源。 简单工厂模式包含三个重要的角色： 工厂 Factory: 工厂模式的核心角色，这个角色提供了一个静态方法，这个方法负责实例化对象并返回，返回类型为抽象产品。 抽象产品 Product： 抽象产品是工厂建造的所以具体对象的父类，负责描述所以实例化对象的公共接口。它的引入使得系统更加灵活，在工厂类中只需要定义一个方法，因为所以的具体产品对象都是其子类对象。 具体产品 ConcreteProduct： 简单工厂模式的创建目标，是抽象产品的具体表现，需要实现抽象产品中定义的方法。 在Mybatis中，便使用工厂模式这一思想。要拿到sqlsession，我们需要先拿到工厂对象，通过读取配置文件，MyBatis会创建一个SqlSessionFactory对象。通过工厂对象的openSession我们就可以拿到这个Sql Session了。SqlSession是与数据库进行交互的主要接口，它封装了数据库会话和执行SQL操作的方法。 package cn.loulan.dao; import cn.loulan.bean.Student; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import org.junit.Test; import java.io.InputStream; public class TestStudent &#123; @Test public void testGetStudent() throws Exception &#123; //1. 加载mybatis配置文件 InputStream resourceAsStream = TestStudent.class.getClassLoader().getResourceAsStream(\"mybatis.xml\"); //2. 拿到工厂对象 SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(resourceAsStream); //3. sqlSession对象 SqlSession sqlSession = sqlSessionFactory.openSession(); //4. 拿到接口实现类 StudentMapper mapper = sqlSession.getMapper(StudentMapper.class); //5. 关闭sql session释放资源 sqlSession.close(); //6. 输出查询结果 Student student = mapper.getStudent(1); System.out.println(student); &#125; &#125; 到这里Mybatis链接数据库的操作就结束了，虽然还有很多没有设计，比如事务管理，对象关系映射啊，但是这又不是Mybatis教程，要看mybatis教程的话移步博客文章mybatis。 总得来说，mybatis确实相较于直接用JDBC方便很多，自己再也不用处理令人头疼的结果集了，只需要写些配置文件就好了，效率提高了很多。但是听说到了spring boot就更方便了，总感觉学不完啊。 Spring集成Mybatis框架 接下来就是spring集成mybatis框架了，集成spring可以通过依赖注入（Dependency Injection）来降低层与层之间的耦合度，具体来说就是对象不需要我们自己new了，对象间关系的维护也不需要我们自己维护了，全部交给Spring来管理。 spring集成mybatis框架感觉就是把mybatis配置移到了Spring的配置中去，以前是mybatis通过反射实例化对象，变成了spring和mybatis共同完成了。 MyBatis部分：MyBatis通过Mapper接口的代理方式来执行SQL操作。在MyBatis中，通过配置映射文件（Mapper XML）来定义SQL语句和映射关系。MyBatis会根据映射文件中的配置，动态生成Mapper接口的代理对象，实现了Mapper接口中定义的方法。 Spring部分：Spring负责管理和配置应用程序中的各个组件，包括Mapper接口的实例化和依赖注入。在集成MyBatis时，Spring会扫描指定的包路径，检测并实例化Mapper接口的代理对象。Spring提供了@MapperScan注解来自动扫描和实例化Mapper接口。 当Spring实例化Mapper接口时，它会使用MyBatis提供的MapperProxyFactory类来创建Mapper接口的代理对象。该代理对象在执行方法时，会委托给MyBatis的底层实现来执行相应的SQL操作。 通过Spring和MyBatis的协作，实现了Mapper接口的实例化和使用，使得开发者可以在Spring中轻松地使用MyBatis进行数据库操作。同时，Spring还负责管理事务、数据源配置等与数据库相关的事务处理和连接管理工作，与MyBatis相结合提供了更完整的数据库访问解决方案。 以上内容全由chatGPT生成，我是不会的。 继续。 照例，先引入jar包 &lt;dependency> &lt;groupId>org.mybatis&lt;/groupId> &lt;artifactId>mybatis-spring&lt;/artifactId> &lt;version>3.0.0&lt;/version> &lt;/dependency> &lt;dependency> &lt;groupId>com.alibaba&lt;/groupId> &lt;artifactId>druid&lt;/artifactId> &lt;version>1.2.16&lt;/version> &lt;/dependency> &lt;dependency> &lt;groupId>org.springframework&lt;/groupId> &lt;artifactId>spring-tx&lt;/artifactId> &lt;version>6.0.8&lt;/version> &lt;/dependency> &lt;dependency> &lt;groupId>org.springframework&lt;/groupId> &lt;artifactId>spring-jdbc&lt;/artifactId> &lt;version>6.0.8&lt;/version> &lt;/dependency> &lt;!-- MyBatis--> &lt;dependency> &lt;groupId>org.mybatis&lt;/groupId> &lt;artifactId>mybatis&lt;/artifactId> &lt;version>3.5.13&lt;/version> &lt;/dependency> &lt;dependency> &lt;groupId>org.springframework&lt;/groupId> &lt;artifactId>spring-context&lt;/artifactId> &lt;version>6.0.8&lt;/version> &lt;/dependency> 差不多就这些了，主要包括spring框架的依赖，mybatis依赖，spring集成mybatis的依赖，德鲁伊的依赖。 累了，不想写了。下次补充。。","categories":[{"name":"杂谈","slug":"杂谈","permalink":"https://trevoewu.github.io/categories/%E6%9D%82%E8%B0%88/"}],"tags":[{"name":"杂谈","slug":"杂谈","permalink":"https://trevoewu.github.io/tags/%E6%9D%82%E8%B0%88/"},{"name":"mybatis","slug":"mybatis","permalink":"https://trevoewu.github.io/tags/mybatis/"},{"name":"JDBC","slug":"JDBC","permalink":"https://trevoewu.github.io/tags/JDBC/"},{"name":"JDBCtemplate","slug":"JDBCtemplate","permalink":"https://trevoewu.github.io/tags/JDBCtemplate/"}]},{"title":"手写简易Spring框架","slug":"手写简易Spring框架","date":"2023-06-09T06:10:22.000Z","updated":"2023-06-09T06:11:33.799Z","comments":true,"path":"2023/06/09/手写简易Spring框架/","link":"","permalink":"https://trevoewu.github.io/2023/06/09/%E6%89%8B%E5%86%99%E7%AE%80%E6%98%93Spring%E6%A1%86%E6%9E%B6/","excerpt":"","text":"手写Spring框架 Spring底层是通过反射机制来实例化对象，以及属性注入的，在手写Spring框架之前，我们需要了解反射机制。 JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。Java反射机制在框架设计中极为广泛，需要深入理解。 通过反射，我们可以拿到类的属性，方法。 回顾Spring框架，我们需要编写一个spring的配置文件例如：spring.xml，在这个配置文件中，我们注册一个类，并注入属性值。 &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?> &lt;beans> &lt;beans> &lt;bean name=\"user\" class=\"bean.User\"> &lt;property name=\"id\" value=\"1\"/> &lt;property name=\"username\" value=\"sonetto\"/> &lt;property name=\"password\" value=\"123456\"/> &lt;property name=\"points\" value=\"12.3\"/> &lt;property name=\"isActive\" value=\"true\"/> &lt;/bean> &lt;bean name=\"userDao\" class=\"bean.UserDao\"/> &lt;bean name=\"userService\" class=\"bean.UserService\"> &lt;property name=\"userDao\" ref=\"userDao\"/> &lt;/bean> &lt;/beans> &lt;/beans> 在实例化一个对象时，我们通过ClassPathXmlApplicationContext()，传入我们的配置文件，拿到一个ApplicationContext对象，通过ApplicationContext对象调用getBean（）方法来获取对象, 最终调用对象发方法，来使用Bean。 ApplicationContext context = new ClassPathXmlApplicationContext(\"mySpring.xml\"); User user = (User) context.getBean(\"user\"); System.out.println(user); UserService userService = (UserService) context.getBean(\"userService\"); userService.createUser(); 我们的最终目的就是调用对象的方法，而一个指定一个方法需要四要素： 什么对象（对象的全限定类名是什么？）什么方法（方法名），什么参数（参数的类型和数量），返回什么值。 指定来这方法的四个要素，我们就可以唯一的确定一个方法，然后调用该方法。 在spring的配置文件中，注册一个Bean时，我们需要提供这个Bean的全限定类名，也就是Bean标签内的class属性的内容。有了全限定类名，我们就可以通过反射机制调用class.forName()拿到这个对象的类。更进一步，通过这个类拿到构造方法，实例化对象。拿到我们需要的目标方法，最终调用这个目标方法。 有了整个大概的全景图，我们就可以开始编写我们自己的Spring框架了。 首先，让我们先编写一个ApplicationContext 接口类，这个类定义了getBean()方法 package org.loulan.spring; public interface ApplicationContext &#123; Object getBean(String name); &#125; 然后编写该接口的实现类ClassPathXmlApplicationContext 我们正是通过这个类来实例化一个ApplicationContext 对象。回顾ApplicationContext context = new ClassPathXmlApplicationContext(&quot;mySpring.xml&quot;); 这段代码，实例化这个类时，我们需要一个参数——Spring配置文件，这个参数对应一个构造方法，所以我们的ClassPathXmlApplicationContext也需要提供这个构造方法。 public ClassPathXmlApplicationContext(String resource) &#123;&#125; 我们需要读取使用这个框架的配置文件，并拿到所有的Bean标签。要拿到这个xml文件并读取里面的标签已经属性，我们可以借助SAXReader 这个类来完成。通过Maven我们可以轻松的引入这个jar包。同时，我们还需要解析这个xml文件，通过Document 来完成。所以我还需要dom4j的依赖。 &lt;!-- dom4j依赖--> &lt;dependency> &lt;groupId>org.dom4j&lt;/groupId> &lt;artifactId>dom4j&lt;/artifactId> &lt;version>2.1.4&lt;/version> &lt;/dependency> &lt;!-- jaxen的依赖，因为要使用它解析XML文件--> &lt;dependency> &lt;groupId>jaxen&lt;/groupId> &lt;artifactId>jaxen&lt;/artifactId> &lt;version>2.0.0&lt;/version> &lt;/dependency> 接下来就是愉快的编写代码啦！ package org.loulan.spring; import org.dom4j.Document; import org.dom4j.DocumentException; import org.dom4j.Element; import org.dom4j.Node; import org.dom4j.io.SAXReader; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import java.lang.reflect.Constructor; import java.lang.reflect.Field; import java.lang.reflect.Method; import java.util.HashMap; import java.util.List; import java.util.Map; public class ClassPathXmlApplicationContext implements ApplicationContext&#123; private Map&lt;String,Object>beans = new HashMap&lt;String,Object>(); private Logger logger = LoggerFactory.getLogger(ClassPathXmlApplicationContext.class); public ClassPathXmlApplicationContext(String resource) &#123; //1. 拿到这个xml配置文件 SAXReader reader = new SAXReader(); Document document = null; try &#123; document = reader.read(ClassLoader.getSystemClassLoader().getResourceAsStream(resource)); // 获取所有的bean标签 List&lt;Node> beanNodes = document.selectNodes(\"//bean\"); // 遍历集合 beanNodes.forEach(beanNode -> &#123; Element beanElt = (Element) beanNode; // 获取id String id = beanElt.attributeValue(\"name\"); // 获取className String className = beanElt.attributeValue(\"class\"); logger.info(\"id->\"+id+\" className->\"+className); try &#123; //通过反射拿到class Class&lt;?> clazz = Class.forName(className); // 获得class的构造器 Constructor&lt;?> constructor = clazz.getConstructor(); // 实例化对象 Object o = constructor.newInstance(); logger.info(\"实例化对象->\"+o); // 暴露bean，放在map（缓存） beans.put(id,o); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;); //再次遍历bean，给属性赋值（DI） beanNodes.forEach(beanNode -> &#123; Element beanElt = (Element) beanNode; // 获取id String id = beanElt.attributeValue(\"name\"); // 获取className String className = beanElt.attributeValue(\"class\"); // 获取实例化对象 Object bean = beans.get(id); logger.info(\"获取实例化对象\"+bean.toString()); //拿到properties List&lt;Node> properties = beanElt.selectNodes(\"property\"); properties.forEach(property ->&#123; logger.info(\"获取property-> \" + property); Element element = (Element) property; String name = element.attributeValue(\"name\"); String arg = element.attributeValue(\"value\"); String ref = element.attributeValue(\"ref\"); String methodName = \"set\"+name.toUpperCase().charAt(0)+name.substring(1); logger.info(\"methodName=\"+methodName+\" arg=\"+arg); Object actualValue = null; try &#123; //获得属性 Field field = bean.getClass().getDeclaredField(name); Method method = bean.getClass().getMethod(methodName, field.getType()); logger.info(\"参数类型->\"+field.getType().getSimpleName()); if(ref != null)&#123; //如果参数是引用数据类型 method.invoke(bean,beans.get(ref)); &#125; else if( arg != null)&#123; //参数是简单数据类型 switch (field.getType().getSimpleName())&#123; case \"boolean\",\"Boolean\": actualValue = Boolean.parseBoolean(arg); break; case \"byte\",\"Byte\": actualValue = Byte.parseByte(arg); break; case \"short\",\"Short\": actualValue = Short.parseShort(arg); break; case \"int\",\"Integer\": actualValue = Integer.parseInt(arg); break; case \"long\", \"Long\": actualValue = Long.parseLong(arg); break; case \"float\",\"Float\": actualValue = Float.parseFloat(arg); break; case \"double\",\"Double\": actualValue = Double.parseDouble(arg); break; case \"char\",\"Character\": actualValue = arg.charAt(0); break; case \"String\": actualValue = arg; break; &#125; method.invoke(bean,actualValue); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;); &#125;); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; @Override public Object getBean(String name) &#123; return beans.get(name); &#125; &#125; 代码很长，别急我们一步步分析： 这段代码做三件事： 通过 document = reader.read(ClassLoader.getSystemClassLoader().getResourceAsStream(resource));拿到配置文件。 拿到所以的bean标签,获取标签的name属性和和class属性值，name属性值是这个bean的id，class是这个类的全限定类名。 通过反射机制实例化对象，并放到map集合中。 这一步相当于把bean放入二级缓存中，提前暴露bean。map集合就是二级缓存，其中key存放对象的name或id，value存放这个实例化的对象。 //1. 拿到这个xml配置文件 SAXReader reader = new SAXReader(); Document document = null; try &#123; document = reader.read(ClassLoader.getSystemClassLoader().getResourceAsStream(resource)); // 获取所有的bean标签 List&lt;Node> beanNodes = document.selectNodes(\"//bean\"); // 遍历集合 beanNodes.forEach(beanNode -> &#123; Element beanElt = (Element) beanNode; // 获取id String id = beanElt.attributeValue(\"name\"); // 获取className String className = beanElt.attributeValue(\"class\"); logger.info(\"id->\"+id+\" className->\"+className); try &#123; //通过反射拿到class Class&lt;?> clazz = Class.forName(className); // 获得class的构造器 Constructor&lt;?> constructor = clazz.getConstructor(); // 实例化对象 Object o = constructor.newInstance(); logger.info(\"实例化对象->\"+o); // 暴露bean，放在map（缓存） beans.put(id,o); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;); 实例化bean之后，接下里就是依赖注入了（Dependency Injection）。我们需要再次遍历每一个bean节点，一个bean节点相当于一个bean对象。对于每一个bean对象，再次遍历bean对象的标签，这对于这些bena对象的属性值，对于这些属性值，我们需要通过set注入的方法给属性赋值。 这时候就是调用对象的set方法了，还记得调用方法的四要素吗？没错，我们需要方法所属的对象，方法名，方法参数，以及返回值类型。 其中，对象我们可以通过二级缓存拿到，也就是上一部分的map集合。方法参数也是属性值，在property标签的value属性值指明。返回值就更轻松了，set方法的返回值都是void。 那么剩下的，就是方法名了，按照Java命名规范规范，set方法名有set加上属性名的首字母大小组成，符合驼峰命名规范。我们拿到了属性值，就可以通过拼接字符串的方法来得到方法名。 但是还有一个问题，属性值有普通类型和引用类型两种，对应引用类型，我们的做法很简单，通过二级缓存拿到引用对象，再通过set方法注入就好啦。但是普通类型就比较麻烦了。 首先，普通类型太多，而我们从配置文件中拿到的数据都是字符串类型，如果目标属性是String类型的话很直接，直接调用set方法即可。但是如果属性类型是int类型，或者bool类型，我们就需要把String类型转换成对应的类型。 好在这些普通类都有对应的包装类型，通包装类型我们可以轻松的实现字符串类型的转换，所以我们需要的就是匹配每一个普通类型，对这样的类型做类型转换即可。 普通类型太多，出于学习的目的，假设我们的Spring框架只支持其中部分类型。 //再次遍历bean，给属性赋值（DI） beanNodes.forEach(beanNode -> &#123; Element beanElt = (Element) beanNode; // 获取id String id = beanElt.attributeValue(\"name\"); // 获取className String className = beanElt.attributeValue(\"class\"); // 获取实例化对象 Object bean = beans.get(id); logger.info(\"获取实例化对象\"+bean.toString()); //拿到properties List&lt;Node> properties = beanElt.selectNodes(\"property\"); properties.forEach(property ->&#123; logger.info(\"获取property-> \" + property); Element element = (Element) property; String name = element.attributeValue(\"name\"); String arg = element.attributeValue(\"value\"); String ref = element.attributeValue(\"ref\"); String methodName = \"set\"+name.toUpperCase().charAt(0)+name.substring(1); logger.info(\"methodName=\"+methodName+\" arg=\"+arg); Object actualValue = null; try &#123; //获得属性 Field field = bean.getClass().getDeclaredField(name); Method method = bean.getClass().getMethod(methodName, field.getType()); logger.info(\"参数类型->\"+field.getType().getSimpleName()); if(ref != null)&#123; //如果参数是引用数据类型 method.invoke(bean,beans.get(ref)); &#125; else if( arg != null)&#123; //参数是简单数据类型 switch (field.getType().getSimpleName())&#123; case \"boolean\",\"Boolean\": actualValue = Boolean.parseBoolean(arg); break; case \"byte\",\"Byte\": actualValue = Byte.parseByte(arg); break; case \"short\",\"Short\": actualValue = Short.parseShort(arg); break; case \"int\",\"Integer\": actualValue = Integer.parseInt(arg); break; case \"long\", \"Long\": actualValue = Long.parseLong(arg); break; case \"float\",\"Float\": actualValue = Float.parseFloat(arg); break; case \"double\",\"Double\": actualValue = Double.parseDouble(arg); break; case \"char\",\"Character\": actualValue = arg.charAt(0); break; case \"String\": actualValue = arg; break; &#125; method.invoke(bean,actualValue); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; 最后，提供一个getBean方法的接口，用于活动实例化的bean @Override public Object getBean(String name) &#123; return beans.get(name); &#125; 到这里，我们的Spring框架就算编写完了，打包发布吧！ 测试自己的Spring框架 创建一个Maven模块，并引入刚刚打包好的jar包吧 &lt;dependency> &lt;groupId>cn.loulan&lt;/groupId> &lt;artifactId>MySpring&lt;/artifactId> &lt;version>1.0-SNAPSHOT&lt;/version> &lt;/dependency> 首先，我们需要一个Bean类 package bean; import lombok.Data; @Data public class User &#123; private int id; private String username; private String password; private float points; private boolean isActive; public void setIsActive(boolean active) &#123; isActive = active; &#125; &#125; 然后是Spring配置文件 &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?> &lt;beans> &lt;beans> &lt;bean name=\"user\" class=\"bean.User\"> &lt;property name=\"id\" value=\"1\"/> &lt;property name=\"username\" value=\"sonetto\"/> &lt;property name=\"password\" value=\"123456\"/> &lt;property name=\"points\" value=\"12.3\"/> &lt;property name=\"isActive\" value=\"true\"/> &lt;/bean> &lt;bean name=\"userDao\" class=\"bean.UserDao\"/> &lt;bean name=\"userService\" class=\"bean.UserService\"> &lt;property name=\"userDao\" ref=\"userDao\"/> &lt;/bean> &lt;/beans> &lt;/beans> 编写测试类： package bean; import org.junit.Test; import org.loulan.spring.ApplicationContext; import org.loulan.spring.ClassPathXmlApplicationContext; import org.springframework.beans.factory.support.DefaultSingletonBeanRegistry; public class TestBean &#123; @Test public void test()&#123; ApplicationContext context = new ClassPathXmlApplicationContext(\"mySpring.xml\"); User user = (User) context.getBean(\"user\"); System.out.println(user); &#125; &#125; 跑起来了！","categories":[{"name":"spring","slug":"spring","permalink":"https://trevoewu.github.io/categories/spring/"},{"name":"java","slug":"spring/java","permalink":"https://trevoewu.github.io/categories/spring/java/"},{"name":"javaweb","slug":"spring/java/javaweb","permalink":"https://trevoewu.github.io/categories/spring/java/javaweb/"}],"tags":[{"name":"spring","slug":"spring","permalink":"https://trevoewu.github.io/tags/spring/"}]},{"title":"Spring 学习笔记","slug":"Spring-学习笔记","date":"2023-06-03T07:49:54.000Z","updated":"2023-06-10T08:43:20.933Z","comments":true,"path":"2023/06/03/Spring-学习笔记/","link":"","permalink":"https://trevoewu.github.io/2023/06/03/Spring-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"","text":"Spring概述 Spring框架是Java平台的一个开源的全栈（full-stack）应用程式框架和控制反转容器实现，一般被直接称为Spring。 Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器框架。 Spring最初的出现是为了解决EJB臃肿的设计，以及难以测试等问题。 Spring为简化开发而生，让程序员只需关注核心业务的实现，尽可能的不再关注非业务逻辑代码（事务控制，安全日志等）。 Spring特点 轻量 从大小与开销两方面而言Spring都是轻量的。完整的Spring框架可以在一个大小只有1MB多的JAR文件里发布。并且Spring所需的处理开销也是微不足道的。 Spring是非侵入式的：Spring应用中的对象不依赖于Spring的特定类。 控制反转 Spring通过一种称作控制反转（IoC）的技术促进了松耦合。当应用了IoC，一个对象依赖的其它对象会通过被动的方式传递进来，而不是这个对象自己创建或者查找依赖对象。你可以认为IoC与JNDI相反——不是对象从容器中查找依赖，而是容器在对象初始化时不等对象请求就主动将依赖传递给它。 面向切面 Spring提供了面向切面编程的丰富支持，允许通过分离应用的业务逻辑与系统级服务（例如审计（auditing）和事务（transaction）管理）进行内聚性的开发。应用对象只实现它们应该做的——完成业务逻辑——仅此而已。它们并不负责（甚至是意识）其它的系统级关注点，例如日志或事务支持。 容器 Spring包含并管理应用对象的配置和生命周期，在这个意义上它是一种容器，你可以配置你的每个bean如何被创建——基于一个可配置原型（prototype），你的bean可以创建一个单独的实例或者每次需要时都生成一个新的实例——以及它们是如何相互关联的。然而，Spring不应该被混同于传统的重量级的EJB容器，它们经常是庞大与笨重的，难以使用。 框架 Spring可以将简单的组件配置、组合成为复杂的应用。在Spring中，应用对象被声明式地组合，典型地是在一个XML文件里。Spring也提供了很多基础功能（事务管理、持久化框架集成等等），将应用逻辑的开发留给了你。 所有Spring的这些特征使你能够编写更干净、更可管理、并且更易于测试的代码。它们也为Spring中的各种模块提供了基础支持。 Spring对IOC的实现 控制反转（Inversion of Control，IoC）是面向对象编程中的一种设计思想，可以用来降低代码之间的耦合度，符合依赖倒置原则。 控制反转的核心是：将对象的创建权交出去，将对象和对象之间关系的管理权交出去，由第三方容器来负责创建与维护。 控制反转常见的实现方式：依赖注入（Dependency Injection，简称DI） Spring通过依赖注入的方式来完成Bean管理的。 Bean管理说的是：Bean对象的创建，以及Bean对象中属性的赋值（或者叫做Bean对象之间关系的维护）。 依赖注入： 依赖指的是对象和对象之间的关联关系。 注入指的是一种数据传递行为，通过注入行为来让对象和对象产生关系。 依赖注入常见的实现方式包括两种：set注入 构造注入 set注入 原理： 通过property标签获取到属性名：userDao 通过属性名推断出set方法名：setUserDao 通过反射机制调用setUserDao()方法给属性赋值 property标签的name是属性名。 property标签的ref是要注入的bean对象的id。 (通过ref属性来完成bean的装配，这是bean最简单的一种装配方式。装配指的是：创建系统组件之间关联的动作) ==set注入的核心实现原理：通过反射机制调用set方法来给属性赋值，让两个对象之间产生关系。== TeacherService往往需要依赖TeacherMapper/Dao 对象， 为了降低类与类，层与层之间的耦合度，我们通常采用面向接口编程。把对象的创建权交出去，交给Spring容器来管理。由Spring容器来创建对象和维护对象与对象之间的关系。 通过在spring配置文件（如spring-config.xml）中，注册Bean，以及Bean与Bean的关系，Bean的属性值，来让Spring去创建和注入Bean。 &lt;bean id=\"teacherMapper\" class=\"mapper.teacher.TeacherMapperImpl\">&lt;/bean> &lt;!-- 基于setter的外部Bean注入--> &lt;!-- &lt;property> 标签内的name属性是对应setter方法的方法名去掉setter，首字母小写--> &lt;!-- 在规范的Bean setter 方法中，这个值就等于Bean的属性名称--> &lt;bean id=\"teacherService\" class=\"service.teacher.TeacherService\"> &lt;property name=\"teacherMapper\" ref=\"teacherMapper\"/> &lt;/bean> 在这个配置文件中，我们注册了两个Bean，teacherMapper和teacherService ，并通过set注入来给属性负责。 public class TestTeacherService &#123; public void testTeacher()&#123; ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"spring.xml\"); TeacherService teacherService = applicationContext.getBean(\"teacherService\", TeacherService.class); teacherService.getTeachers(); &#125; &#125; 这样，我们就可以通过applicatContext对象得到，applicationContext对象通过读取配置文件得到。 调用applicatonContext.getBean(&quot;Bean id&quot;)我们就可以得到实例化的Bean了。 构造注入 ==通过调用构造方法来给属性赋值。== &lt;!-- 基于构造方法注入--> &lt;!-- 要求对应Bean中要有对应的构造方法--> &lt;!-- 可以通过&lt;constructor-arg>标签 注入属性值--> &lt;!-- 其中，name属性通过属性名完成注入，值为value--> &lt;!-- index 使用属性值下标完成注入，从0开始--> &lt;bean id=\"blog\" class=\"bean.Blog\"> &lt;constructor-arg name=\"title\" value=\"unveil a new cd\"/> &lt;constructor-arg name=\"author\" value=\"regulus\"/> &lt;constructor-arg name=\"description\" value=\"new cd\"/> &lt;constructor-arg name=\"id\" value=\"1\"/> &lt;/bean> set注入专题 注入外部Bean和内部Bean &lt;!-- 基于setter的外部Bean注入--> &lt;!-- &lt;property> 标签内的name属性是对应setter方法的方法名去掉setter，首字母小写--> &lt;!-- 在规范的Bean setter 方法中，这个值就等于Bean的属性名称--> &lt;bean id=\"teacherService\" class=\"service.teacher.TeacherService\"> &lt;property name=\"teacherMapper\" ref=\"teacherMapper\"/> &lt;/bean> &lt;!-- 同样，我们可以基于内部Bean注入--> &lt;!-- 内部Bean就是在&lt;bean> 标签里嵌套定义的Bean--> &lt;bean id=\"teacherService2\" class=\"service.teacher.TeacherService\"> &lt;property name=\"teacherMapper\"> &lt;bean id=\"teacherMapper\" class=\"mapper.teacher.TeacherMapperImpl\">&lt;/bean> &lt;/property> &lt;/bean> 注入简单类型 ==如果给简单类型赋值，使用value属性或value标签。而不是ref。== package bean; import lombok.Data; @Data public class Person &#123; private String name; private int age; private String gender; &#125; &lt;bean id=\"person\" class=\"bean.Person\"> &lt;property name=\"age\" value=\"20\"/> &lt;property name=\"gender\" value=\"female\"/> &lt;property name=\"name\" value=\"sonetto\"/> &lt;/bean 简单类型包括哪些呢？ 可以通过Spring的源码来分析一下：BeanUtils类 public class BeanUtils&#123; //....... public static boolean isSimpleValueType(Class&lt;?> type) &#123; return (Void.class != type &amp;&amp; void.class != type &amp;&amp; (ClassUtils.isPrimitiveOrWrapper(type) || Enum.class.isAssignableFrom(type) || CharSequence.class.isAssignableFrom(type) || Number.class.isAssignableFrom(type) || Date.class.isAssignableFrom(type) || Temporal.class.isAssignableFrom(type) || URI.class == type || URL.class == type || Locale.class == type || Class.class == type)); &#125; //........ &#125; 通过源码分析得知，简单类型包括： 基本数据类型(int,char) 基本数据类型对应的包装类(String, Interger) String或其他的CharSequence子类 Number子类 Date子类 Enum子类 URI URL Temporal子类 Locale Class 另外还包括以上简单值类型对应的数组类型。 注入集合数组 数组 package bean; import lombok.Data; @Data public class Article &#123; private String tags[]; private Person person[]; &#125; &lt;!-- 注入数组--> &lt;!-- 1. 数组元素是简单类型--> &lt;bean id=\"article\" class=\"bean.Article\"> &lt;property name=\"tags\"> &lt;array > &lt;value>mac&lt;/value> &lt;value>c++&lt;/value> &lt;value>app recommend&lt;/value> &lt;/array> &lt;/property> &lt;!-- 数组元素是引用类型--> &lt;property name=\"person\"> &lt;array> &lt;ref bean=\"person\"/> &lt;/array> &lt;/property> &lt;/bean> 要点： 如果数组中是简单类型，使用value标签。 如果数组中是非简单类型，使用ref标签。 集合 import lombok.Data; import java.util.List; import java.util.Set; @Data public class Library &#123; private List&lt;Book> bookList; private List&lt;String> classifications; private Set&lt;Book> bookSet; &#125; &lt;!-- 注入集合--> &lt;bean name=\"library\" class=\"bean.Library\"> &lt;!-- 注入List集合--> &lt;property name=\"bookList\"> &lt;list> &lt;bean class=\"bean.Book\"> &lt;property name=\"bookName\" value=\"爱丽丝梦游仙境\"/> &lt;property name=\"ISBN\" value=\"1192-2313-31-13\"/> &lt;/bean> &lt;bean class=\"bean.Book\"> &lt;property name=\"bookName\" value=\"追风筝的人\"/> &lt;property name=\"ISBN\" value=\"1192-2343-34-33\"/> &lt;/bean> &lt;/list> &lt;/property> &lt;!-- 注入set集合--> &lt;property name=\"bookSet\"> &lt;set> &lt;bean class=\"bean.Book\"> &lt;property name=\"bookName\" value=\"爱丽丝梦游仙境\"/> &lt;property name=\"ISBN\" value=\"1192-2313-31-13\"/> &lt;/bean> &lt;bean class=\"bean.Book\"> &lt;property name=\"bookName\" value=\"追风筝的人\"/> &lt;property name=\"ISBN\" value=\"1192-2343-34-33\"/> &lt;/bean> &lt;/set> &lt;/property> &lt;!-- 注入简单类型 String--> &lt;property name=\"classifications\"> &lt;array> &lt;value>小说&lt;/value> &lt;value>教育&lt;/value> &lt;/array> &lt;/property> &lt;/bean> 注入List集合的时候使用list标签，如果List集合中是简单类型使用value标签，反之使用ref标签。 set集合中元素是简单类型的使用value标签，反之使用ref标签。 map ==使用标签和嵌套== package bean; import lombok.Data; import java.util.Map; @Data public class Color &#123; private Map&lt;String,String> colorMap; &#125; &lt;!-- 注入map--> &lt;bean name=\"color\" class=\"bean.Color\"> &lt;property name=\"colorMap\"> &lt;map> &lt;entry key=\"RED\" value=\"255,0,255\"/> &lt;entry key=\"GREEN\" value=\"0,255,0\"/> &lt;entry key=\"BLUE\" value=\"0,0,255\"/> &lt;/map> &lt;/property> &lt;/bean> 注入Propertis ==使用标签嵌套标签完成。== package bean; import lombok.Data; import java.util.Properties; @Data public class JDBC &#123; private Properties properties; &#125; &lt;!--注入properties--> &lt;bean name=\"JDBC\" class=\"bean.JDBC\"> &lt;property name=\"properties\" > &lt;props> &lt;prop key=\"DRIVER\">com.mysql.jdbc.Driver&lt;/prop> &lt;prop key=\"URL\">jdbc:mysql://localhost:3306/demo?useUnicode=true&amp;amp;characterEncoding=utf-8&lt;/prop> &lt;prop key=\"USERNAME\">root&lt;/prop> &lt;prop key=\"PASSWORD\">password&lt;/prop> &lt;/props> &lt;/property> &lt;/bean> 注入空字符串和NULL 不注入就是null，空字符串可以设置value=&quot;&quot;注入 除此之外，还可以使用&lt;value/&gt;这个自闭和标签注入空字符串，以及使用&lt;null/&gt;标签注入null。 &lt;!--空串的第一种方式--> &lt;property name=\"email\" value=\"\"/> &lt;!--空串的第二种方式--> &lt;property name=\"email\"> &lt;value/> &lt;/property> &lt;!--注入null--> &lt;bean id=\"vipBean\" class=\"com.powernode.spring6.beans.Vip\"> &lt;property name=\"email\"> &lt;null/> &lt;/property> &lt;/bean> 注入特殊符号 XML中有5个特殊字符，分别是：&lt;、&gt;、'、&quot;、&amp; 以上5个特殊符号在XML中会被特殊对待，会被当做XML语法的一部分进行解析，如果这些特殊符号直接出现在注入的字符串当中，会报错。 解决方案包括两种： 第一种：特殊符号使用转义字符代替。 第二种：将含有特殊符号的字符串放到： 当中。因为放在CDATA区中的数据不会被XML文件解析器解析。 5个特殊字符对应的转义字符分别是： 特殊字符 转义字符 &gt; &amp;gt; &lt; &amp;lt; ’ &amp;apos; &quot; &amp;quot; &amp; &amp;amp; Bean的实例化方式 通过构造方法实例化 通过简单工厂模式实例化 通过factory-bean实例化 通过factoryBean接口实例化 通过构造方法实例化Bean 通过构造方法实例化Bean时，默认情况下Spring会在加载配置文件的时候，也就是我们调用 ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"spring.xml\"); 这段代码时，Spring调用目标Bean的无参构造方法实例化Bean。 通过简单工厂模式实例化Bean 在Spring框架中，你可以使用简单工厂模式来实例化Bean。 创建一个工厂类，该类负责实例化Bean并返回实例化后的对象。这个工厂类可以是一个普通的Java类，不需要实现特定的接口。 public class BeanFactory &#123; public static MyBean createBean() &#123; // 在这里进行实例化Bean的逻辑 MyBean bean = new MyBean(); // 可以进行一些初始化操作 bean.setName(\"Example Bean\"); // 返回实例化后的Bean对象 return bean; &#125; &#125; 在上面的示例中，MyBean是要实例化的Bean类，你可以根据实际情况替换为你自己的Bean类。在createBean()方法中，你可以根据需要进行Bean的实例化，并对其进行一些初始化操作。 在你的Spring配置文件中，可以使用工厂方法来创建Bean的实例。通过在配置文件中声明一个工厂方法，Spring将调用该方法来获取Bean的实例。 &lt;bean id=\"myBean\" class=\"com.example.BeanFactory\" factory-method=\"createBean\" /> 在上面的示例中，id属性指定了Bean的ID，class属性指定了工厂类的全限定名，factory-method属性指定了工厂类中用于创建Bean实例的方法名。 现在，当Spring容器启动时，它将使用工厂方法来实例化myBean。你可以通过从容器中获取该Bean来使用它。 MyBean bean = (MyBean) applicationContext.getBean(\"myBean\"); 通过这种方式，你可以使用简单工厂模式来实例化Bean，并将其集成到Spring框架中。 简单工厂模式（Simple Factory Pattern）是一种创建型设计模式，它提供了一种集中化的方法来创建对象，而不需要在客户端代码中直接实例化具体的对象。 简单工厂模式由三个主要组件组成： 工厂类（Factory Class）：负责创建对象的类。它包含一个或多个创建对象的静态方法，这些方法根据传入的参数或条件确定要创建的具体对象类型，并返回相应的对象实例。 产品类（Product Class）：被工厂类创建的对象。它们共享一个共同的父类或接口，并定义了一组共同的行为和属性。 客户端（Client）：使用工厂类创建对象的代码。客户端通过调用工厂类的方法来获取所需的对象，而无需直接实例化具体的产品类。 简单工厂模式的工作原理如下： 客户端通过调用工厂类的方法请求创建对象。 工厂类根据传入的参数或条件确定要创建的对象类型。 工厂类实例化相应的对象，并返回给客户端。 客户端使用返回的对象进行后续操作。 简单工厂模式的优点包括： 将对象的创建逻辑集中在工厂类中，客户端无需知道具体的对象实现。 简化了客户端代码，客户端只需要关注如何使用对象，而不需要关注对象的创建过程。 通过工厂类可以轻松添加新的产品类，无需修改客户端代码。 然而，简单工厂模式也有一些局限性： 如果需要添加新的产品类，需要修改工厂类的代码，违背了开闭原则。 工厂类的职责较重，可能会导致类的职责不够单一。 客户端只能通过工厂类提供的方法来创建对象，缺乏灵活性。 简单工厂模式适用于对象的创建逻辑相对简单、对象类型较少且不经常变化的情况。对于复杂的对象创建逻辑或对象类型频繁变化的情况，可以考虑使用其他创建型设计模式，如工厂方法模式或抽象工厂模式。 Bean的生命周期 五步 实例化Bean。默认使用无参数构造方法new一个Bean 注入Bean。通过Settet方法给属性赋值 初始化Bean。调用Bean的init方法，这个方法需要程序员自己编写，下destoy方法同。 使用Bean。 销毁Bean。调用bean的destroy方法。 package bean; public class Cat &#123; private String name; public Cat() &#123; System.out.println(\"1. new cat is instantiated\"); &#125; public void miao()&#123; System.out.println(\"4. cat: miao miao miao....\"); &#125; public void setName(String name) &#123; System.out.println(\"2. bean resign properties\"); this.name = name; &#125; public void init()&#123; System.out.println(\"3. cat is initialized\"); &#125; public void destroy() &#123; System.out.println(\"5. cat is destroyed\"); &#125; &#125; &lt;bean name=\"cat\" class=\"bean.Cat\" init-method=\"init\" destroy-method=\"destroy\"> &lt;property name=\"name\" value=\"Mio\"/> &lt;/bean> 七步（需要掌握） 实例化Bean。默认使用无参数构造方法new一个Bean 注入Bean。通过Settet方法给属性赋值 ==Bean后处理器Before方法执行== 初始化Bean。调用Bean的init方法，这个方法需要程序员自己编写，下destoy方法同。==←在这里插入== ==Bean后处理器的After方法执行== 使用Bean。 销毁Bean。调用bean的destroy方法。 在以上的5步中，第3步是初始化Bean，如果你还想在初始化前和初始化后添加代码，可以加入“Bean后处理器”。 编写一个类实现BeanPostProcessor类，并且重写before和after方法： package bean; import org.springframework.beans.BeansException; import org.springframework.beans.factory.config.BeanPostProcessor; public class PostProcessor implements BeanPostProcessor &#123; @Override public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException &#123; System.out.println(\"------------------------>beforeInitialization\"); return BeanPostProcessor.super.postProcessBeforeInitialization(bean, beanName); &#125; @Override public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException &#123; System.out.println(\"------------------------>afterInitialization\"); return BeanPostProcessor.super.postProcessAfterInitialization(bean, beanName); &#125; &#125; 在spring.xml文件中配置“Bean后处理器”： &lt;!-- 在spring.xml文件中配置“Bean后处理器”：--> &lt;bean class=\"bean.PostProcessor\"/> ==一定要注意：在spring.xml文件中配置的Bean后处理器将作用于当前配置文件中所有的Bean。== 十步 实例化Bean。默认使用无参数构造方法new一个Bean 注入Bean。通过Settet方法给属性赋值 ==检查Bean是否实现了Aware相关接口，并设置相关依赖。== Bean后处理器Before方法执行 ==检查Bean是否实现了InitializingBean接口 &amp; 调用接口方法。== 初始化Bean。调用Bean的init方法，这个方法需要程序员自己编写，下destoy方法同。 Bean后处理器的After方法执行 使用Bean。 ==检查Bean是否实现了DisposableBean接口，并调用接口方法== 销毁Bean。调用bean的destroy方法。 Aware相关的接口包括：BeanNameAware、BeanClassLoaderAware、BeanFactoryAware 当Bean实现了BeanNameAware，Spring会将Bean的名字传递给Bean。 当Bean实现了BeanClassLoaderAware，Spring会将加载该Bean的类加载器传递给Bean。 当Bean实现了BeanFactoryAware，Spring会将Bean工厂对象传递给Bean。 测试以上10步，可以让User类实现5个接口，并实现所有方法： BeanNameAware BeanClassLoaderAware BeanFactoryAware InitializingBean DisposableBean Bean的循环依赖问题 Overview Bean的循环依赖指的是在Spring容器中存在相互依赖的Bean实例。这种循环依赖会导致Bean的创建过程陷入死循环或无法完成，从而导致应用程序无法正常启动或出现其他异常。 循环依赖通常发生在以下情况下： 构造函数循环依赖：一个Bean的构造函数参数依赖于另一个Bean，而另一个Bean的构造函数参数又依赖于第一个Bean。这种情况下，当容器尝试实例化其中一个Bean时，它需要先实例化另一个Bean，而后者又依赖于前者，从而导致循环依赖。 属性循环依赖：一个Bean的属性依赖于另一个Bean，而另一个Bean的属性又依赖于第一个Bean。这种情况下，当容器尝试为一个Bean注入属性时，它需要先实例化另一个Bean，而后者又依赖于前者，从而导致循环依赖。 Spring框架通过使用三级缓存来解决Bean的循环依赖问题。在实例化Bean的过程中，如果发现循环依赖，Spring会先创建一个尚未完成初始化的早期对象并缓存起来，然后继续完成当前Bean的实例化和初始化。当其他Bean需要访问当前Bean时，将返回该早期对象。待当前Bean初始化完成后，Spring会将其设置到早期对象中，从而解决循环依赖。 然而，需要注意的是，循环依赖可能会导致潜在的问题，如死锁或不确定性状态。因此，应该尽量避免循环依赖的产生，合理设计Bean之间的依赖关系，或者考虑通过重构代码来消除循环依赖。 Spring的三级缓存 Spring为什么可以解决set + singleton模式下循环依赖？ ==根本的原因在于：这种方式可以做到将“实例化Bean”和“给Bean属性赋值”这两个动作分开去完成。== 实例化Bean的时候：调用无参数构造方法来完成。此时可以先不给属性赋值，可以提前将该Bean对象“曝光”给外界。 给Bean属性赋值的时候：调用setter方法来完成。 两个步骤是完全可以分离开去完成的，并且这两步不要求在同一个时间点上完成。 也就是说，Bean都是单例的，我们可以先把所有的单例Bean实例化出来，放到一个集合当中（我们可以称之为缓存），所有的单例Bean全部实例化完成之后，以后我们再慢慢的调用setter方法给属性赋值。这样就解决了循环依赖的问题。 那么在Spring框架底层源码级别上是如何实现的呢？请看： public class DefaultSingletonBeanRegistry extends SimpleAliasRegistry implements SingletonBeanRegistry &#123; /** Maximum number of suppressed exceptions to preserve. */ private static final int SUPPRESSED_EXCEPTIONS_LIMIT = 100; // 1. 一级缓存 单例对象缓存池 /** Cache of singleton objects: bean name to bean instance. */ private final Map&lt;String, Object> singletonObjects = new ConcurrentHashMap&lt;>(256); // 3. 三级缓存 原始对象缓存池 /** Cache of singleton factories: bean name to ObjectFactory. */ private final Map&lt;String, ObjectFactory&lt;?>> singletonFactories = new HashMap&lt;>(16); // 2. 二级缓存 早期对象缓存池 /** Cache of early singleton objects: bean name to bean instance. */ private final Map&lt;String, Object> earlySingletonObjects = new ConcurrentHashMap&lt;>(16); &#125; Spring的三级缓存（Three-Level Cache）是Spring框架在处理Bean实例化和循环依赖时使用的一种机制。它是为了解决Bean的循环依赖问题而引入的。 三级缓存在Spring容器的Bean生命周期中扮演重要角色，它包含了以下三个层次的缓存： 第一级缓存：单例对象缓存池（Singleton Cache）。 第一级缓存是Spring容器中的单例Bean缓存。 当Spring容器创建一个单例Bean时，会首先尝试从第一级缓存中获取已经创建的实例。 如果能够找到实例，则直接返回给调用者，避免重复实例化相同的单例Bean。 第一级缓存的键值对结构为 &lt;Bean名称, Bean实例&gt;。 第二级缓存：早期对象缓存池（Early-Stage Object Cache）。 第二级缓存用于解决Bean的循环依赖问题。 当Bean实例化过程中存在循环依赖时，Spring会将已经创建但尚未完成初始化的Bean对象放入第二级缓存中。 早期对象指的是在Bean实例化过程中已经创建出来但尚未完全初始化的对象。 通过第二级缓存，Spring能够在后续的Bean初始化阶段中解决循环依赖，将依赖的Bean设置到早期对象中。 第二级缓存的键值对结构为 &lt;Bean名称, 早期对象&gt;。 第三级缓存：原始对象缓存池（Raw Object Cache）。 第三级缓存是最底层的缓存，用于存储尚未经过任何处理的原始Bean对象。 当容器创建Bean时，如果无法从第一级和第二级缓存中获取Bean实例，Spring会将正在创建的Bean放入第三级缓存中，作为缓存的最后一道防线。 原始对象指的是尚未经过任何处理的初始对象，尚未进行依赖注入等操作。 通过第三级缓存，Spring可以确保在解决循环依赖后，将原始对象进行进一步的初始化操作。 第三级缓存的键值对结构为 &lt;Bean名称, 原始对象&gt;。 在Bean的实例化过程中，Spring框架会依次尝试从三级缓存中获取Bean的实例，以满足依赖注入和循环依赖的需求。这种缓存机制使得Spring能够高效地处理复杂的Bean依赖关系，保证了Bean的正确创建和初始化。 需要注意的是，三级缓存仅在处理单例（Singleton）作用域的Bean时使用，对于其他作用域（如原型Prototype）的Bean，不会使用三级缓存。每次请求原型Bean时，Spring都会创建一个新的实例，避免了循环依赖的问题。 手写Spring框架 Spring底层是通过反射机制来实例化对象，以及属性注入的，在手写Spring框架之前，我们需要了解反射机制。 JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。Java反射机制在框架设计中极为广泛，需要深入理解。 通过反射，我们可以拿到类的属性，方法。 回顾Spring框架，我们需要编写一个spring的配置文件例如：spring.xml，在这个配置文件中，我们注册一个类，并注入属性值。 &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?> &lt;beans> &lt;beans> &lt;bean name=\"user\" class=\"bean.User\"> &lt;property name=\"id\" value=\"1\"/> &lt;property name=\"username\" value=\"sonetto\"/> &lt;property name=\"password\" value=\"123456\"/> &lt;property name=\"points\" value=\"12.3\"/> &lt;property name=\"isActive\" value=\"true\"/> &lt;/bean> &lt;bean name=\"userDao\" class=\"bean.UserDao\"/> &lt;bean name=\"userService\" class=\"bean.UserService\"> &lt;property name=\"userDao\" ref=\"userDao\"/> &lt;/bean> &lt;/beans> &lt;/beans> 在实例化一个对象时，我们通过ClassPathXmlApplicationContext()，传入我们的配置文件，拿到一个ApplicationContext对象，通过ApplicationContext对象调用getBean（）方法来获取对象, 最终调用对象发方法，来使用Bean。 ApplicationContext context = new ClassPathXmlApplicationContext(\"mySpring.xml\"); User user = (User) context.getBean(\"user\"); System.out.println(user); UserService userService = (UserService) context.getBean(\"userService\"); userService.createUser(); 我们的最终目的就是调用对象的方法，而一个指定一个方法需要四要素： 什么对象（对象的全限定类名是什么？）什么方法（方法名），什么参数（参数的类型和数量），返回什么值。 指定来这方法的四个要素，我们就可以唯一的确定一个方法，然后调用该方法。 在spring的配置文件中，注册一个Bean时，我们需要提供这个Bean的全限定类名，也就是Bean标签内的class属性的内容。有了全限定类名，我们就可以通过反射机制调用class.forName()拿到这个对象的类。更进一步，通过这个类拿到构造方法，实例化对象。拿到我们需要的目标方法，最终调用这个目标方法。 有了整个大概的全景图，我们就可以开始编写我们自己的Spring框架了。 首先，让我们先编写一个ApplicationContext 接口类，这个类定义了getBean()方法 package org.loulan.spring; public interface ApplicationContext &#123; Object getBean(String name); &#125; 然后编写该接口的实现类ClassPathXmlApplicationContext 我们正是通过这个类来实例化一个ApplicationContext 对象。回顾ApplicationContext context = new ClassPathXmlApplicationContext(&quot;mySpring.xml&quot;); 这段代码，实例化这个类时，我们需要一个参数——Spring配置文件，这个参数对应一个构造方法，所以我们的ClassPathXmlApplicationContext也需要提供这个构造方法。 public ClassPathXmlApplicationContext(String resource) &#123;&#125; 我们需要读取使用这个框架的配置文件，并拿到所有的Bean标签。要拿到这个xml文件并读取里面的标签已经属性，我们可以借助SAXReader 这个类来完成。通过Maven我们可以轻松的引入这个jar包。同时，我们还需要解析这个xml文件，通过Document 来完成。所以我还需要dom4j的依赖。 &lt;!-- dom4j依赖--> &lt;dependency> &lt;groupId>org.dom4j&lt;/groupId> &lt;artifactId>dom4j&lt;/artifactId> &lt;version>2.1.4&lt;/version> &lt;/dependency> &lt;!-- jaxen的依赖，因为要使用它解析XML文件--> &lt;dependency> &lt;groupId>jaxen&lt;/groupId> &lt;artifactId>jaxen&lt;/artifactId> &lt;version>2.0.0&lt;/version> &lt;/dependency> 接下来就是愉快的编写代码啦！ package org.loulan.spring; import org.dom4j.Document; import org.dom4j.DocumentException; import org.dom4j.Element; import org.dom4j.Node; import org.dom4j.io.SAXReader; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import java.lang.reflect.Constructor; import java.lang.reflect.Field; import java.lang.reflect.Method; import java.util.HashMap; import java.util.List; import java.util.Map; public class ClassPathXmlApplicationContext implements ApplicationContext&#123; private Map&lt;String,Object>beans = new HashMap&lt;String,Object>(); private Logger logger = LoggerFactory.getLogger(ClassPathXmlApplicationContext.class); public ClassPathXmlApplicationContext(String resource) &#123; //1. 拿到这个xml配置文件 SAXReader reader = new SAXReader(); Document document = null; try &#123; document = reader.read(ClassLoader.getSystemClassLoader().getResourceAsStream(resource)); // 获取所有的bean标签 List&lt;Node> beanNodes = document.selectNodes(\"//bean\"); // 遍历集合 beanNodes.forEach(beanNode -> &#123; Element beanElt = (Element) beanNode; // 获取id String id = beanElt.attributeValue(\"name\"); // 获取className String className = beanElt.attributeValue(\"class\"); logger.info(\"id->\"+id+\" className->\"+className); try &#123; //通过反射拿到class Class&lt;?> clazz = Class.forName(className); // 获得class的构造器 Constructor&lt;?> constructor = clazz.getConstructor(); // 实例化对象 Object o = constructor.newInstance(); logger.info(\"实例化对象->\"+o); // 暴露bean，放在map（缓存） beans.put(id,o); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;); //再次遍历bean，给属性赋值（DI） beanNodes.forEach(beanNode -> &#123; Element beanElt = (Element) beanNode; // 获取id String id = beanElt.attributeValue(\"name\"); // 获取className String className = beanElt.attributeValue(\"class\"); // 获取实例化对象 Object bean = beans.get(id); logger.info(\"获取实例化对象\"+bean.toString()); //拿到properties List&lt;Node> properties = beanElt.selectNodes(\"property\"); properties.forEach(property ->&#123; logger.info(\"获取property-> \" + property); Element element = (Element) property; String name = element.attributeValue(\"name\"); String arg = element.attributeValue(\"value\"); String ref = element.attributeValue(\"ref\"); String methodName = \"set\"+name.toUpperCase().charAt(0)+name.substring(1); logger.info(\"methodName=\"+methodName+\" arg=\"+arg); Object actualValue = null; try &#123; //获得属性 Field field = bean.getClass().getDeclaredField(name); Method method = bean.getClass().getMethod(methodName, field.getType()); logger.info(\"参数类型->\"+field.getType().getSimpleName()); if(ref != null)&#123; //如果参数是引用数据类型 method.invoke(bean,beans.get(ref)); &#125; else if( arg != null)&#123; //参数是简单数据类型 switch (field.getType().getSimpleName())&#123; case \"boolean\",\"Boolean\": actualValue = Boolean.parseBoolean(arg); break; case \"byte\",\"Byte\": actualValue = Byte.parseByte(arg); break; case \"short\",\"Short\": actualValue = Short.parseShort(arg); break; case \"int\",\"Integer\": actualValue = Integer.parseInt(arg); break; case \"long\", \"Long\": actualValue = Long.parseLong(arg); break; case \"float\",\"Float\": actualValue = Float.parseFloat(arg); break; case \"double\",\"Double\": actualValue = Double.parseDouble(arg); break; case \"char\",\"Character\": actualValue = arg.charAt(0); break; case \"String\": actualValue = arg; break; &#125; method.invoke(bean,actualValue); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;); &#125;); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; @Override public Object getBean(String name) &#123; return beans.get(name); &#125; &#125; 代码很长，别急我们一步步分析： 这段代码做三件事： 通过 document = reader.read(ClassLoader.getSystemClassLoader().getResourceAsStream(resource));拿到配置文件。 拿到所以的bean标签,获取标签的name属性和和class属性值，name属性值是这个bean的id，class是这个类的全限定类名。 通过反射机制实例化对象，并放到map集合中。 这一步相当于把bean放入二级缓存中，提前暴露bean。map集合就是二级缓存，其中key存放对象的name或id，value存放这个实例化的对象。 //1. 拿到这个xml配置文件 SAXReader reader = new SAXReader(); Document document = null; try &#123; document = reader.read(ClassLoader.getSystemClassLoader().getResourceAsStream(resource)); // 获取所有的bean标签 List&lt;Node> beanNodes = document.selectNodes(\"//bean\"); // 遍历集合 beanNodes.forEach(beanNode -> &#123; Element beanElt = (Element) beanNode; // 获取id String id = beanElt.attributeValue(\"name\"); // 获取className String className = beanElt.attributeValue(\"class\"); logger.info(\"id->\"+id+\" className->\"+className); try &#123; //通过反射拿到class Class&lt;?> clazz = Class.forName(className); // 获得class的构造器 Constructor&lt;?> constructor = clazz.getConstructor(); // 实例化对象 Object o = constructor.newInstance(); logger.info(\"实例化对象->\"+o); // 暴露bean，放在map（缓存） beans.put(id,o); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;); 实例化bean之后，接下里就是依赖注入了（Dependency Injection）。我们需要再次遍历每一个bean节点，一个bean节点相当于一个bean对象。对于每一个bean对象，再次遍历bean对象的标签，这对于这些bena对象的属性值，对于这些属性值，我们需要通过set注入的方法给属性赋值。 这时候就是调用对象的set方法了，还记得调用方法的四要素吗？没错，我们需要方法所属的对象，方法名，方法参数，以及返回值类型。 其中，对象我们可以通过二级缓存拿到，也就是上一部分的map集合。方法参数也是属性值，在property标签的value属性值指明。返回值就更轻松了，set方法的返回值都是void。 那么剩下的，就是方法名了，按照Java命名规范规范，set方法名有set加上属性名的首字母大小组成，符合驼峰命名规范。我们拿到了属性值，就可以通过拼接字符串的方法来得到方法名。 但是还有一个问题，属性值有普通类型和引用类型两种，对应引用类型，我们的做法很简单，通过二级缓存拿到引用对象，再通过set方法注入就好啦。但是普通类型就比较麻烦了。 首先，普通类型太多，而我们从配置文件中拿到的数据都是字符串类型，如果目标属性是String类型的话很直接，直接调用set方法即可。但是如果属性类型是int类型，或者bool类型，我们就需要把String类型转换成对应的类型。 好在这些普通类都有对应的包装类型，通包装类型我们可以轻松的实现字符串类型的转换，所以我们需要的就是匹配每一个普通类型，对这样的类型做类型转换即可。 普通类型太多，出于学习的目的，假设我们的Spring框架只支持其中部分类型。 //再次遍历bean，给属性赋值（DI） beanNodes.forEach(beanNode -> &#123; Element beanElt = (Element) beanNode; // 获取id String id = beanElt.attributeValue(\"name\"); // 获取className String className = beanElt.attributeValue(\"class\"); // 获取实例化对象 Object bean = beans.get(id); logger.info(\"获取实例化对象\"+bean.toString()); //拿到properties List&lt;Node> properties = beanElt.selectNodes(\"property\"); properties.forEach(property ->&#123; logger.info(\"获取property-> \" + property); Element element = (Element) property; String name = element.attributeValue(\"name\"); String arg = element.attributeValue(\"value\"); String ref = element.attributeValue(\"ref\"); String methodName = \"set\"+name.toUpperCase().charAt(0)+name.substring(1); logger.info(\"methodName=\"+methodName+\" arg=\"+arg); Object actualValue = null; try &#123; //获得属性 Field field = bean.getClass().getDeclaredField(name); Method method = bean.getClass().getMethod(methodName, field.getType()); logger.info(\"参数类型->\"+field.getType().getSimpleName()); if(ref != null)&#123; //如果参数是引用数据类型 method.invoke(bean,beans.get(ref)); &#125; else if( arg != null)&#123; //参数是简单数据类型 switch (field.getType().getSimpleName())&#123; case \"boolean\",\"Boolean\": actualValue = Boolean.parseBoolean(arg); break; case \"byte\",\"Byte\": actualValue = Byte.parseByte(arg); break; case \"short\",\"Short\": actualValue = Short.parseShort(arg); break; case \"int\",\"Integer\": actualValue = Integer.parseInt(arg); break; case \"long\", \"Long\": actualValue = Long.parseLong(arg); break; case \"float\",\"Float\": actualValue = Float.parseFloat(arg); break; case \"double\",\"Double\": actualValue = Double.parseDouble(arg); break; case \"char\",\"Character\": actualValue = arg.charAt(0); break; case \"String\": actualValue = arg; break; &#125; method.invoke(bean,actualValue); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; 最后，提供一个getBean方法的接口，用于活动实例化的bean @Override public Object getBean(String name) &#123; return beans.get(name); &#125; 到这里，我们的Spring框架就算编写完了，打包发布吧！ 测试自己的Spring框架 创建一个Maven模块，并引入刚刚打包好的jar包吧 &lt;dependency> &lt;groupId>cn.loulan&lt;/groupId> &lt;artifactId>MySpring&lt;/artifactId> &lt;version>1.0-SNAPSHOT&lt;/version> &lt;/dependency> 首先，我们需要一个Bean类 package bean; import lombok.Data; @Data public class User &#123; private int id; private String username; private String password; private float points; private boolean isActive; public void setIsActive(boolean active) &#123; isActive = active; &#125; &#125; 然后是Spring配置文件 &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?> &lt;beans> &lt;beans> &lt;bean name=\"user\" class=\"bean.User\"> &lt;property name=\"id\" value=\"1\"/> &lt;property name=\"username\" value=\"sonetto\"/> &lt;property name=\"password\" value=\"123456\"/> &lt;property name=\"points\" value=\"12.3\"/> &lt;property name=\"isActive\" value=\"true\"/> &lt;/bean> &lt;bean name=\"userDao\" class=\"bean.UserDao\"/> &lt;bean name=\"userService\" class=\"bean.UserService\"> &lt;property name=\"userDao\" ref=\"userDao\"/> &lt;/bean> &lt;/beans> &lt;/beans> 编写测试类： package bean; import org.junit.Test; import org.loulan.spring.ApplicationContext; import org.loulan.spring.ClassPathXmlApplicationContext; import org.springframework.beans.factory.support.DefaultSingletonBeanRegistry; public class TestBean &#123; @Test public void test()&#123; ApplicationContext context = new ClassPathXmlApplicationContext(\"mySpring.xml\"); User user = (User) context.getBean(\"user\"); System.out.println(user); &#125; &#125; 跑起来了！ Spring 集成MyBatis框架 Overview 需要的依赖 Spring-context(关联引入Spring-aop) Spring-MyBatis（Spring 集成MyBatis） Mysql-connetor(Mysql驱动) Spring-jdbc（链接数据库） MyBatis Junit（单元测试） druid(数据源) Lombok 配置数据库 account表，字段act_no,banlance 项目结构搭建 Bean(pojo) Account mapper AccountMapper AccountMapper.xml Service AccountService AccountServiceImpl resources Spring核心配置文件Spring.xml 组建扫描 事务管理器 MyBatis核心配置文件MyBatis.xml 注册Mapper 类别名 设置日志实现 该文件可以没有，大部分的配置可以转移到spring配置文件中。 如果遇到mybatis相关的系统级配置，还是需要这个文件。 DB.propertis Driver→com.mysql.jdbc.Driver url→jdbc:mysql://localhost:3307/class?useUnicode=true&amp;characterEncoding=utf-8 username→root Password→root 编写测试类 编写mapper package cn.loulan.mapper; import cn.loulan.bean.Account; import java.util.List; public interface AccountMapper &#123; int insert(Account account); int delete(String actNo); int update(Account account); Account getById(String actNo); List&lt;Account> getAll(); &#125; &lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?> &lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"https://mybatis.org/dtd/mybatis-3-mapper.dtd\"> &lt;mapper namespace=\"cn.loulan.mapper.AccountMapper\"> &lt;insert id=\"insert\"> Insert into account values(#&#123;actNo&#125;,#&#123;balance&#125;) &lt;/insert> &lt;update id=\"update\" parameterType=\"Account\"> update account set balance = #&#123;balance&#125; where act_no = #&#123;actNo&#125; &lt;/update> &lt;delete id=\"delete\" > delete account where act_no = #&#123;actNo&#125;; &lt;/delete> &lt;select id=\"getById\" resultType=\"Account\"> select * from account where act_no =#&#123;actNo&#125; &lt;/select> &lt;select id=\"getAll\" resultType=\"Account\"> select * from account; &lt;/select> &lt;/mapper> Service package cn.loulan.service; import cn.loulan.bean.Account; import java.util.List; public interface AccountService &#123; boolean save(Account account); boolean delete(String actNo); boolean modify(Account account); Account getById(String actNo); List&lt;Account> getAllAccounts(); boolean transaction(String from, String to,double amount); &#125; package cn.loulan.service; import cn.loulan.bean.Account; import cn.loulan.mapper.AccountMapper; import lombok.Data; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import java.util.List; @Service(\"accountService\") @Transactional public class AccountServiceImpl implements AccountService &#123; private AccountMapper accountMapper; @Autowired public void setMapper(AccountMapper mapper) &#123; this.accountMapper = mapper; &#125; @Override public boolean save(Account account) &#123; accountMapper.insert(account); return true; &#125; @Override public boolean delete(String actNo) &#123; accountMapper.delete(actNo); return true; &#125; @Override public boolean modify(Account account) &#123; accountMapper.update(account); return false; &#125; @Override public Account getById(String actNo) &#123; return accountMapper.getById(actNo); &#125; @Override public List&lt;Account> getAllAccounts() &#123; return accountMapper.getAll(); &#125; @Override public boolean transaction(String from, String to, double amount) &#123; Account fromAccount = accountMapper.getById(from); Account toAccount = accountMapper.getById(to); if(fromAccount.getBalance() &lt; amount) &#123; throw new RuntimeException(\"余额不足\"); &#125; fromAccount.setBalance(fromAccount.getBalance() - amount); toAccount.setBalance(toAccount.getBalance() + amount); int count = accountMapper.update(fromAccount); count += accountMapper.update(toAccount); if (count != 2) throw new RuntimeException(\"异常\"); return count == 2 ? true : false; &#125; &#125; resources 数据配置文件 #DRIVER=com.mysql.jdbc.Driver DRIVER=com.mysql.cj.jdbc.Driver URL=jdbc:mysql://localhost:3306/demo?useUnicode=true&amp;characterEncoding=utf-8 USERNAME=root PASSWORD=root MyBatis核心配置文件： &lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?> &lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"https://mybatis.org/dtd/mybatis-3-config.dtd\"> &lt;configuration> &lt;!--日志实现--> &lt;settings> &lt;setting name=\"logImpl\" value=\"STDOUT_LOGGING\"/> &lt;/settings> &lt;typeAliases> &lt;typeAlias alias=\"Account\" type=\"cn.loulan.bean.Account\"/> &lt;/typeAliases> &lt;/configuration> Spring核心配置文件 &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?> &lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:tx=\"http://www.springframework.org/schema/tx\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd\"> &lt;!--开启组件自动扫描--> &lt;context:component-scan base-package=\"cn.loulan.service\"/> &lt;!-- 加载数据库配置文件--> &lt;context:property-placeholder location=\"DB.properties\"/> &lt;!-- 配置数据源--> &lt;bean id=\"dataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\"> &lt;property name=\"driverClassName\" value=\"$&#123;DRIVER&#125;\"/> &lt;property name=\"url\" value=\"$&#123;URL&#125;\"/> &lt;property name=\"username\" value=\"$&#123;USERNAME&#125;\"/> &lt;property name=\"password\" value=\"$&#123;PASSWORD&#125;\"/> &lt;/bean> &lt;!--Mapper扫描器--> &lt;bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\"> &lt;property name=\"basePackage\" value=\"cn.loulan.mapper\"/> &lt;/bean> &lt;!--SqlSessionFactoryBean--> &lt;bean class=\"org.mybatis.spring.SqlSessionFactoryBean\"> &lt;!--mybatis核心配置文件路径--> &lt;property name=\"configLocation\" value=\"mybatis.xml\"/> &lt;!--注入数据源--> &lt;property name=\"dataSource\" ref=\"dataSource\"/> &lt;!--起别名--> &lt;property name=\"typeAliasesPackage\" value=\"cn.loulan.bean\"/> &lt;/bean> &lt;!--事务管理器--> &lt;bean id=\"txManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"> &lt;property name=\"dataSource\" ref=\"dataSource\"/> &lt;/bean> &lt;!--开启事务注解--> &lt;tx:annotation-driven transaction-manager=\"txManager\"/> &lt;/beans> 编写测试类 package cn.loulan.service; import cn.loulan.bean.Account; import cn.loulan.mapper.AccountMapper; import cn.loulan.util.MybatisUtil; import org.apache.ibatis.session.SqlSession; import org.junit.Test; import org.springframework.context.ApplicationContext; import org.springframework.context.support.ClassPathXmlApplicationContext; import java.util.List; public class ServiceTest &#123; @Test public void mapper()&#123; SqlSession sqlSession = MybatisUtil.getSqlSession(); AccountMapper mapper = sqlSession.getMapper(AccountMapper.class); // mapper.insert(new Account(\"123\",500.00)); mapper.insert(new Account(\"234\",500.00)); sqlSession.commit(); sqlSession.close(); &#125; @Test public void testSpring()throws Exception &#123; ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"spring.xml\"); AccountService accountService = applicationContext.getBean(\"accountService\", AccountService.class); List&lt;Account> allAccounts = accountService.getAllAccounts(); allAccounts.forEach(account ->&#123; System.out.println(account); &#125;); &#125; @Test public void testTransaction()&#123; ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"spring.xml\"); AccountService accountService = applicationContext.getBean(\"accountService\", AccountService.class); accountService.transaction(\"1\",\"234\",100); &#125; &#125; 总结 配置文件还是要写好多，而且完全靠记忆嘛。简单整理一下这些配置文件，主要分为两部分，spring的配置文件和mybatis的配置文件。spring配置文件中主要的配置有： 注册bean，在用注解开发时开启组建自动扫描 加载数据库配置文件。 配置数据源。包括数据库的一下配置信息，驱动器啊url之类的。 Mapper扫描器。相当于在mybatis中注册mapper，使用包名扫描这个包下的所有mapper。 配置sqlSessionFactoryBean在这个bean中价值mybatis的核心配置文件，以及价值数据源，类型别名等等可以在mybatis中配置的内容都可以通过这个bean来配置。 配置事务管理器 开启事务注解 这样在MyBatis配置文件的内容就少很多了，甚至可以不配或者没有。这个案例中，我们配置了日志实现和类型别名。 感觉好乱，课程的这一段讲得太快了，老杜是不是赶着吃饭啊。 Spring框架下的mybatis还是和直接用mybatis有很大区别。Spring中，我们不需要一个工具类用于价值mybatis配置文件以便获取sqlsession对象了。事务的处理也不需要管了，虽然简化了很多代码，但是总有一种项目莫名其妙就跑起来的感觉，终极还是我了解得不够多了吧。","categories":[{"name":"java EE","slug":"java-EE","permalink":"https://trevoewu.github.io/categories/java-EE/"}],"tags":[{"name":"Spring","slug":"Spring","permalink":"https://trevoewu.github.io/tags/Spring/"},{"name":"Java","slug":"Java","permalink":"https://trevoewu.github.io/tags/Java/"}]},{"title":"MyBatis学习笔记","slug":"MyBatis学习笔记","date":"2023-05-27T10:14:52.000Z","updated":"2023-06-09T04:41:45.731Z","comments":true,"path":"2023/05/27/MyBatis学习笔记/","link":"","permalink":"https://trevoewu.github.io/2023/05/27/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"","text":"入门之环境搭建 导入依赖的jar包 &lt;dependency> &lt;groupId>org.mybatis&lt;/groupId> &lt;artifactId>mybatis&lt;/artifactId> &lt;version>3.5.13&lt;/version> &lt;/dependency> *解决Maven静态资源过滤问题 导致生成的target文件不包含xml，导致IO错误 &lt;resources> &lt;resource> &lt;directory>src/main/java&lt;/directory> &lt;includes> &lt;include>**/*.properties&lt;/include> &lt;include>**/*.xml&lt;/include> &lt;/includes> &lt;filtering>false&lt;/filtering> &lt;/resource> &lt;resource> &lt;directory>src/main/resources&lt;/directory> &lt;includes> &lt;include>**/*.properties&lt;/include> &lt;include>**/*.xml&lt;/include> &lt;/includes> &lt;filtering>false&lt;/filtering> &lt;/resource> &lt;/resources> 新建MyBatis配置文件→mybatis-config.xml, 放在resource目录下. 理论上放在哪里都可以, 文件名叫什么也随意, 但是按照规范来能让代码更规范, 更具有可读性. 标签: &lt;properties resource=&quot;db.properties&quot;/&gt;指代数据库的属性, 用于读取properties, 这样我们就配置数据库的属性比如Driver, URL时直接使用配置文件中的变量. 注意 XML 头部的声明，它用来验证 XML 文档的正确性。 environment 元素体中包含了事务管理和连接池的配置。mappers 元素则包含了一组映射器（mapper），这些映射器的 XML 映射文件包含了 SQL 代码和映射定义信息。 &lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?> &lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"https://mybatis.org/dtd/mybatis-3-config.dtd\"> &lt;configuration> &lt;!-- 从db.properties读取数据库属性--> &lt;properties resource=\"db.properties\"/> &lt;environments default=\"development\"> &lt;environment id=\"development\"> &lt;transactionManager type=\"JDBC\"/> &lt;dataSource type=\"POOLED\"> &lt;property name=\"driver\" value=\"$&#123;DRIVER&#125;\"/> &lt;property name=\"url\" value=\"$&#123;URL&#125;\"/> &lt;property name=\"username\" value=\"$&#123;USERNAME&#125;\"/> &lt;property name=\"password\" value=\"$&#123;PASSWORD&#125;\"/> &lt;/dataSource> &lt;/environment> &lt;/environments> &lt;mappers> &lt;mapper class=\"dao.book.BookMapper\">&lt;/mapper> &lt;/mappers> &lt;/configuration> 编写实体类 编写dao层接口 public interface BookMapper &#123; Book getRelativeBook( @Param(\"id\") int id, @Param(\"bookDesc\") String bookDesc); &#125; 这段代码用于模糊查询同类书籍, @Param注解用于指明参数, 指明参数也可以通过xml文档在指明 编写SQL 一个语句既可以通过 XML 定义，也可以通过注解定义。我们先看看 XML 定义语句的方式 &lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?> &lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"> &lt;!--namespace：绑定一个对应的Dao/Mapper接口--> &lt;!-- dao.book.BookMapper--> &lt;mapper namespace=\"dao.book.BookMapper\"> &lt;!--select查询语句--> &lt;select id=\"getRelativeBook\" resultType=\"Bean.Book\"> select * from smbms_provider where proDesc like #&#123;bookDesc&#125; and id != #&#123;id&#125; limit 1; &lt;/select> &lt;/mapper> Namespace: 指明接口类的命名空间, 用接口类的权限定名 命名空间的作用有两个，一个是利用更长的全限定名来将不同的语句隔离开来，同时实现了接口绑定。 将命名空间置于合适的 Java 包命名空间之中，你的代码会变得更加整洁，也有利于你更方便地使用 MyBatis。 select便签: 用于查询语句 id: 在命名空间中唯一的标识符，可以被用来引用这条语句. 对应接口类的方法名, 必须和接口类的方法名一致 resultType: 期望从这条语句中返回结果的类全限定名或别名。 注意，如果返回的是集合，那应该设置为集合包含的类型，而不是集合本身的类型。 resultType 和 resultMap 之间只能同时使用一个. parameterType: 将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为 MyBatis 可以根据语句中实际传入的参数计算出应该使用的类型处理器（TypeHandler），默认值为未设置（unset）。 为了这个简单的例子，我们似乎写了不少配置，但其实并不多。在一个 XML 映射文件中，可以定义无数个映射语句，这样一来，XML 头部和文档类型声明部分就显得微不足道了。文档的其它部分很直白，容易理解。 它在命名空间 dao.book.BookMapper 中定义了一个名为 selectBlog 的映射语句 注册Mapper 在mybatis-config.xml中注册Mapper &lt;mappers> &lt;!-- 方式1： 通过resource注册mapper--> &lt;mapper resource=\"dao/book/BookMapper.xml\">&lt;/mapper> &lt;/mappers> 编写获取数据库连接的工具类Util public class MybatisUtil &#123; static SqlSessionFactory sqlSessionFactory; static &#123; InputStream inputStream = null; try &#123; // 从 XML 文件中构建 SqlSessionFactory 的实例 String resource = \"mybatis-config.xml\"; inputStream = Resources.getResourceAsStream(resource); sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); &#125; catch (IOException e) &#123; throw new RuntimeException(e); &#125; &#125; public static SqlSession getSqlSession() &#123; return sqlSessionFactory.openSession(); &#125; &#125; 每个基于 MyBatis 的应用都是以一个SqlSessionFactory的实例为核心的。SqlSessionFactory 的实例可以通过 SqlSessionFactoryBuilder 的build方法获得。而SqlSessionFactoryBuilder则可以从 XML 配置文件或一个预先配置的 Configuration 实例来构建出 SqlSessionFactory 实例。(工厂模式) 工厂模式是一种创建型设计模式，用于封装对象的创建过程。它通过定义一个共同的接口或基类来创建对象，但具体的对象创建逻辑被移到工厂类中。这样，客户端代码只需要与工厂类交互，而不需要直接创建对象，从而降低了代码的耦合性。 通过工厂模式，代码实现了对象的创建与使用的分离，使得代码更具可维护性和扩展性。如果将来需要修改 SqlSessionFactory 对象的创建逻辑，只需修改 MybatisUtil 类中的代码，而不需要修改客户端代码。同时，工厂模式也隐藏了具体对象的创建细节，使得客户端代码更加简洁和可读。 代码通过静态代码块在类加载时初始化了一个全局的 SqlSessionFactory 对象，并提供了一个公共的静态方法用于获取 SqlSession 实例。这样其他类在使用 MyBatis 进行数据库操作时，可以通过调用 MybatisUtil.getSqlSession() 方法来获取 SqlSession 对象，从而简化了 MyBatis 的配置和使用过程。 SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。你可以通过 SqlSession 实例来直接执行已映射的 SQL 语句. 编写测试类 @Test public void testGetRelativeBook()&#123; SqlSession sqlSession = MybatisUtil.getSqlSession(); BookMapper mapper = sqlSession.getMapper(BookMapper.class); Book relativeBook = mapper.getRelativeBook(12, \"%计算机%\"); System.out.println(relativeBook.toString()); &#125; 参数 对于大多数简单的使用场景，你都不需要使用复杂的参数，比如： &lt;select id=\"selectUsers\" resultType=\"User\"> select id, username, password from users where id = #&#123;id&#125; &lt;/select> 参数类型（parameterType）会被自动设置为 int，这个参数可以随意命名。原始类型或简单数据类型（比如 Integer 和 String）因为没有其它属性，会用它们的值来作为参数. 然而，如果传入一个复杂的对象，行为就会有点不一样了。比如 &lt;insert id=\"insertUser\" parameterType=\"User\"> insert into users (id, username, password) values (#&#123;id&#125;, #&#123;username&#125;, #&#123;password&#125;) &lt;/insert> 如果 User 类型的参数对象传递到了语句中，会查找 id、username 和 password 属性，然后将它们的值传入预处理语句的参数中。如果参数类型是具体的类, 参数可以直接通过属性名直接得到, 即使属性是私有的. 参数类型是HashMap 这时候, 参数名会被映射为Map中的key. @Param注解用于给方法参数起一个名字。以下是总结的使用原则： 在方法只接受一个参数的情况下，可以不使用@Param。 在方法接受多个参数的情况下，建议一定要使用@Param注解给参数命名。 如果参数是 JavaBean ， 则不能使用@Param。 不使用@Param注解时，参数只能有一个，并且是Javabean。 字符串替换 默认情况下，使用 #&#123;&#125; 参数语法时，MyBatis 会创建 PreparedStatement 参数占位符，并通过占位符安全地设置参数（就像使用 ? 一样）。 这样做更安全，更迅速，通常也是首选做法，不过有时你就是想直接在 SQL 语句中直接插入一个不转义的字符串。 比如 ORDER BY 子句，这时候你可以： ORDER BY $&#123;columnName&#125; 这样，MyBatis 就不会修改或转义该字符串了。 当 SQL 语句中的元数据（如表名或列名）是动态生成的时候，字符串替换将会非常有用。 举个例子，如果你想 select 一个表任意一列的数据时，不需要这样写： @Select(\"select * from user where id = #&#123;id&#125;\") User findById(@Param(\"id\") long id); @Select(\"select * from user where name = #&#123;name&#125;\") User findByName(@Param(\"name\") String name); @Select(\"select * from user where email = #&#123;email&#125;\") User findByEmail(@Param(\"email\") String email); // 其它的 \"findByXxx\" 方法 而是可以只写这样一个方法： @Select(\"select * from user where $&#123;column&#125; = #&#123;value&#125;\") User findByColumn(@Param(\"column\") String column, @Param(\"value\") String value); 其中 $&#123;column&#125; 会被直接替换，而 #&#123;value&#125; 会使用 ? 预处理。 这样，就能完成同样的任务： User userOfId1 = userMapper.findByColumn(\"id\", 1L); User userOfNameKid = userMapper.findByColumn(\"name\", \"kid\"); User userOfEmail = userMapper.findByColumn(\"email\", \"noone@nowhere.com\"); 这种方式也同样适用于替换表名的情况。 提示 : 用这种方式接受用户的输入，并用作语句参数是不安全的，会导致潜在的 SQL 注入攻击。因此，要么不允许用户输入这些字段，要么自行转义并检验这些参数。 XML配置解析 MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。 能配置的内容如下： configuration（配置） properties（属性） settings（设置） typeAliases（类型别名） typeHandlers（类型处理器） objectFactory（对象工厂） plugins（插件） environments（环境配置） environment（环境变量） transactionManager（事务管理器） dataSource（数据源） databaseIdProvider（数据库厂商标识） mappers（映射器） &lt;!-- 注意元素节点的顺序！顺序不对会报错 --> environments environments 元素定义了如何配置环境。 &lt;environments default=\"development\"> &lt;environment id=\"development\"> &lt;transactionManager type=\"JDBC\"> &lt;property name=\"...\" value=\"...\"/> &lt;/transactionManager> &lt;dataSource type=\"POOLED\"> &lt;property name=\"driver\" value=\"$&#123;driver&#125;\"/> &lt;property name=\"url\" value=\"$&#123;url&#125;\"/> &lt;property name=\"username\" value=\"$&#123;username&#125;\"/> &lt;property name=\"password\" value=\"$&#123;password&#125;\"/> &lt;/dataSource> &lt;/environment> &lt;/environments> 注意一些关键点: 默认使用的环境 ID（比如：default=“development”）。 环境，将SQL映射到多个不同的数据库上，**不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。**必须指定其中一个为默认运行环境（通过default指定） 环境可以随意命名，但务必保证默认的环境 ID 要匹配其中一个环境 ID。 事务管理器的配置（比如：type=“JDBC”）。 在 MyBatis 中有两种类型的事务管理器（也就是 type=“[JDBC|MANAGED]”）： JDBC – 这个配置直接使用了 JDBC 的提交和回滚功能 MANAGED – 这个配置几乎没做什么。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接。 如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器，因为 Spring 模块会使用自带的管理器来覆盖前面的配置。 数据源的配置（比如：type=“POOLED”）。 dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。 数据源是必须配置的。 有三种内建的数据源类型 type&#x3D;&quot;[UNPOOLED|POOLED|JNDI]&quot;） unpooled： 这个数据源的实现会每次请求时打开和关闭连接。虽然有点慢，但对那些数据库连接可用性要求不高的简单应用程序来说，是一个很好的选择。 性能表现则依赖于使用的数据库，对某些数据库来说，使用连接池并不重要，这个配置就很适合这种情形。 pooled： 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来 , 避免了创建新的连接实例时所必需的初始化和认证时间。 这种处理方式很流行，能使并发 Web 应用快速响应请求。 jndi： 这个数据源的实现是为了能在如 Spring 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的引用。 映射器（mappers） 我们需要告诉 MyBatis 到哪里去找到这些语句。 在自动查找资源方面，Java 并没有提供一个很好的解决方案，所以最好的办法是直接告诉 MyBatis 到哪里去找映射文件。 &lt;!-- 使用相对于类路径的资源引用 --> &lt;mappers> &lt;mapper resource=\"org/mybatis/builder/AuthorMapper.xml\"/> &lt;mapper resource=\"org/mybatis/builder/BlogMapper.xml\"/> &lt;mapper resource=\"org/mybatis/builder/PostMapper.xml\"/> &lt;/mappers> &lt;!-- 使用完全限定资源定位符（URL） --> &lt;mappers> &lt;mapper url=\"file:///var/mappers/AuthorMapper.xml\"/> &lt;mapper url=\"file:///var/mappers/BlogMapper.xml\"/> &lt;mapper url=\"file:///var/mappers/PostMapper.xml\"/> &lt;/mappers> &lt;!-- 使用映射器接口实现类的完全限定类名 --> &lt;mappers> &lt;mapper class=\"org.mybatis.builder.AuthorMapper\"/> &lt;mapper class=\"org.mybatis.builder.BlogMapper\"/> &lt;mapper class=\"org.mybatis.builder.PostMapper\"/> &lt;/mappers> &lt;!-- 将包内的映射器接口全部注册为映射器 --> &lt;mappers> &lt;package name=\"org.mybatis.builder\"/> &lt;/mappers> ⚠️注意: 使用将包内的映射器接口全部注册为映射器时, 必须保证接口和对应的mapper.xml文件名一致 类型别名（typeAliases） 类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，用于降低冗余的全限定类名书写。例如： &lt;typeAliases> &lt;typeAlias alias=\"Author\" type=\"domain.blog.Author\"/> &lt;typeAlias alias=\"Blog\" type=\"domain.blog.Blog\"/> &lt;typeAlias alias=\"Comment\" type=\"domain.blog.Comment\"/> &lt;typeAlias alias=\"Post\" type=\"domain.blog.Post\"/> &lt;typeAlias alias=\"Section\" type=\"domain.blog.Section\"/> &lt;typeAlias alias=\"Tag\" type=\"domain.blog.Tag\"/> &lt;/typeAliases> 当这样配置时，Blog 可以用在任何使用 domain.blog.Blog 的地方。 也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如： &lt;typeAliases> &lt;package name=\"domain.blog\"/> &lt;/typeAliases> 每一个在包 domain.blog 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。 比如 domain.blog.Author 的别名为 author；若有注解，则别名为其注解值. 作用域（Scope）和生命周期 作用域和生命周期类别是至关重要的，因为错误的使用会导致非常严重的并发问题。 SqlSessionFactoryBuilder 这个类可以被实例化、使用和丢弃，一旦创建了 SqlSessionFactory，就不再需要它了。因此 SqlSessionFactoryBuilder 实例的最佳作用域是方法作用域（也就是局部方法变量）。 SqlSessionFactory SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。 使用 SqlSessionFactory 的最佳实践是在应用运行期间不要重复创建多次，多次重建 SqlSessionFactory 被视为一种代码“坏习惯”。因此 SqlSessionFactory 的最佳作用域是应用作用域(Application)。 有很多方法可以做到，最简单的就是使用单例模式或者静态单例模式。 单例模式是一种创建型设计模式，用于确保一个类只有一个实例，并提供一个全局访问点来访问该实例。它通常适用于需要在整个应用程序中共享状态或资源的情况，以及需要对实例进行严格控制的情况。 实现单例模式的关键是将类的构造函数私有化，这样就无法通过常规的方式创建类的实例。然后，通过一个静态方法或属性来创建并返回类的唯一实例。每次调用这个方法时，都会返回同一个实例。 静态单例模式是单例模式的一种变体，它使用静态变量来保存单例实例，并提供一个静态方法来获取该实例。在静态单例模式中，实例的创建和获取方法都是静态的，因此可以通过类名直接调用，无需实例化类。 单例模式示例： >javaCopy code >public class Singleton &#123; private static Singleton instance; private Singleton() &#123; // 私有化构造函数 &#125; public static Singleton getInstance() &#123; if (instance == null) &#123; instance = new Singleton(); &#125; return instance; &#125; // 其他方法... >&#125; SqlSession 每个线程都应该有它自己的 SqlSession 实例。SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。 如果说 SqlSessionFactory 相当于数据库连接池，那么 SqlSession 就相当于一个数据库连接（Connection 对象），你可以在一个事务里面执行多条 SQL，然后通过它的 commit、rollback 等方法，提交或者回滚事务。所以它应该存活在一个业务请求中，处理完整个请求后，应该关闭这条连接，让它归还给 SqlSessionFactory，否则数据库资源就很快被耗费精光，系统就会瘫痪，所以用 try…catch…finally… 语句来保证其正确关闭。 比如 Servlet 框架中的 HttpSession, 每次收到 HTTP 请求，就可以打开一个 SqlSession，返回一个响应后，就关闭它。 映射器(Mapper)实例 映射器实例的生命周期与 SqlSession 相关联，作用域是每个 SqlSession。它们在每个 SqlSession 中创建，并在 SqlSession 关闭时销毁。可以通过依赖注入等方式实现映射器实例在不同 SqlSession 中的重用。这样可以确保映射器实例的正确性和资源的有效利用。 ResultMap 问题引出 类属性名property和数据库字段名column名不一致的问题: 如果我们更改实体类的属性名把proName改为BookName, 再次执行查询我们会得到值为null. 这是因为mybatis会根据这些查询的列名(会将列名转化为小写,数据库不区分大小写) , 去对应的实体类中查找相应列名的set方法设值 , 由于找不到setProName() , 所以返回null . 下面介绍ResultMap来解决这个问题: 解决 **resultMap 元素是 MyBatis 中最重要最强大的元素。它可以让你从 90% 的 JDBC ResultSets 数据提取代码中解放出来。**实际上，在为一些比如连接的复杂语句编写映射代码的时候，一份 resultMap 能够代替实现同等功能的长达数千行的代码. ResultMap 的设计思想是，对于简单的语句根本不需要配置显式的结果映射，而对于复杂一点的语句只需要描述它们的关系就行了。 你已经见过简单映射语句的示例了，但并没有显式指定 resultMap。比如： &lt;select id&#x3D;&quot;selectUserById&quot; resultType&#x3D;&quot;map&quot;&gt; select id , name , pwd from user where id &#x3D; #&#123;id&#125; &lt;&#x2F;select&gt; 上述语句只是简单地将所有的列映射到 HashMap 的键上，这由 resultType 属性指定。虽然在大部分情况下都够用，但是 HashMap 不是一个很好的模型。你的程序更可能会使用 JavaBean 或 POJO（Plain Old Java Objects，普通老式 Java 对象）作为模型。 ResultMap 最优秀的地方在于，虽然你已经对它相当了解了，但是根本就不需要显式地用到他们。看看下面这个 JavaBean： public class User &#123; private int id; private String username; private String hashedPassword; /* * setter and getter... */ &#125; 基于 JavaBean 的规范，上面这个类有 3 个属性：id，username 和 hashedPassword。这些属性会对应到 select 语句中的列名。 这样的一个 JavaBean 可以被映射到 ResultSet，就像映射到 HashMap 一样简单。 &lt;select id=\"selectUsers\" resultType=\"com.someapp.model.User\"> select id, username, hashedPassword from some_table where id = #&#123;id&#125; &lt;/select> 类型别名是你的好帮手。使用它们，你就可以不用输入类的全限定名了。比如： &lt;!-- mybatis-config.xml 中 --> &lt;typeAlias type=\"com.someapp.model.User\" alias=\"User\"/> &lt;!-- SQL 映射 XML 中 --> &lt;select id=\"selectUsers\" resultType=\"User\"> select id, username, hashedPassword from some_table where id = #&#123;id&#125; &lt;/select> 在这些情况下，MyBatis 会在幕后自动创建一个 ResultMap，再根据属性名来映射列到 JavaBean 的属性上。如果列名和属性名不能匹配上，可以在 SELECT 语句中设置列别名（这是一个基本的 SQL 特性）来完成匹配。比如： &lt;select id=\"selectUsers\" resultType=\"User\"> select user_id as \"id\", user_name as \"userName\", hashed_password as \"hashedPassword\" from some_table where id = #&#123;id&#125; &lt;/select> 在学习了上面的知识后，你会发现上面的例子没有一个需要显式配置 ResultMap，这就是 ResultMap 的优秀之处——你完全可以不用显式地配置它们。 虽然上面的例子不用显式配置 ResultMap。 但为了讲解，我们来看看如果在刚刚的示例中，显式使用外部的 resultMap 会怎样，这也是解决列名不匹配的另外一种方式。 &lt;resultMap id=\"userResultMap\" type=\"User\"> &lt;id property=\"id\" column=\"user_id\" /> &lt;result property=\"username\" column=\"user_name\"/> &lt;result property=\"password\" column=\"hashed_password\"/> &lt;/resultMap> 然后在引用它的语句中设置 resultMap 属性就行了（注意我们去掉了 resultType 属性）。比如: &lt;select id=\"selectUsers\" resultMap=\"userResultMap\"> select user_id, user_name, hashed_password from some_table where id = #&#123;id&#125; &lt;/select> 如果这个世界总是这么简单就好了。 日志工厂 日志记录是任何优秀软件开发过程的重要组成部分。通过日志记录，您可以检测和修复问题、了解用户的行为. 如果一个 数据库相关的操作出现了问题，我们可以根据输出的SQL语句快速排查问题。 对于以往的开发过程，我们会经常使用到debug模式来调节，跟踪我们的代码执行过程。但是现在使用Mybatis是基于接口，配置文件的源代码执行过程。因此，我们必须选择日志工具来作为我们开发，调节程序的工具。 Mybatis内置的日志工厂提供日志功能，具体的日志实现有以下几种工具： SLF4J Apache Commons Logging Log4j 2 Log4j (3.5.9 起废弃） JDK logging STDOUT_LOGGING NO_LOGGING 具体选择哪个日志实现工具由MyBatis的内置日志工厂确定。它会使用最先找到的（按上文列举的顺序查找）。如果一个都未找到，日志功能就会被禁用。 **标准日志实现 **STDOUT_LOGGING 指定 MyBatis 应该使用哪个日志记录实现。如果此设置不存在，则会自动发现日志记录实现。 &lt;settings> &lt;setting name=\"logImpl\" value=\"STDOUT_LOGGING\"/> &lt;/settings> 测试，可以看到控制台有大量的输出！我们可以通过这些输出来判断程序到底哪里出了Bug Log4j2 简介： Log4j2 是Java语言的日志记录框架，由 Apache 基金会维护。Log4j2 是对其前身 Log4j 的改进。它的主要好处是： API独立于实现 更好地支持并发 通过构建自定义组件轻松扩展 使用步骤： 1、导入log4j2的包 &lt;!-- log4j-core- 核心Log4j实现类。--> &lt;dependency> &lt;groupId>org.apache.logging.log4j&lt;/groupId> &lt;artifactId>log4j-core&lt;/artifactId> &lt;version>2.20.0&lt;/version> &lt;/dependency> &lt;!-- log4j-api- 提供实现者创建日志实现所需的适配器组件。--> &lt;dependency> &lt;groupId>org.apache.logging.log4j&lt;/groupId> &lt;artifactId>log4j-api&lt;/artifactId> &lt;version>2.20.0&lt;/version> &lt;/dependency> 2、配置文件编写 &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?> &lt;Configuration status=\"INFO\"> &lt;Appenders> &lt;Console name=\"ConsoleAppender\" target=\"SYSTEM_OUT\"> &lt;PatternLayout pattern=\"%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n\" /> &lt;/Console> &lt;File name=\"FileAppender\" fileName=\"application-$&#123;date:yyyyMMdd&#125;.log\" immediateFlush=\"false\" append=\"true\"> &lt;PatternLayout pattern=\"%d&#123;yyy-MM-dd HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n\"/> &lt;/File> &lt;/Appenders> &lt;Loggers> &lt;Root level=\"debug\"> &lt;AppenderRef ref=\"ConsoleAppender\" /> &lt;AppenderRef ref=\"FileAppender\"/> &lt;/Root> &lt;/Loggers> &lt;/Configuration> 仔细看看我们的配置文件。它首先定义两个 appender，一个称为“FileAppender”，另一个称为“ConsoleAppender”appender 是有效地将日志消息写入其目的地的组件。 第一个 appender 将 stdout 定义为其目标，而第二个 appender 定义文件名的模式。 换句话说，第一个 appender 记录到标准输出，而第二个 appender 记录到一个文件。 然后该文件继续定义记录器。记录器负责实际记录传递给它的消息。每个记录器都可以引用一个或多个附加程序，这正是这里发生的事情。记录器引用了两个附加程序，因此当它被调用时，它将同时记录到标准输出和日志文件中。 3、setting设置日志实现 &lt;settings&gt; &lt;setting name&#x3D;&quot;logImpl&quot; value&#x3D;&quot;LOG4J2&quot;&#x2F;&gt; &lt;&#x2F;settings&gt; 4、在程序中使用Log4j进行输出！ import org.apache.logging.log4j.LogManager; import org.apache.logging.log4j.Logger; public class App &#123; private static final Logger logger = LogManager.getLogger(App.class); ; public static void main( String[] args ) &#123; System.out.println( \"Hello World!\" ); logger.info( \"又浪费了一早上， 都在弄这个破log4j fuck!\" ); logger.trace(\"We've just greeted the user!\"); logger.debug(\"We've just greeted the user!\"); logger.info(\"We've just greeted the user!\"); logger.warn(\"We've just greeted the user!\"); logger.error(\"We've just greeted the user!\"); logger.fatal(\"We've just greeted the user!\"); &#125; &#125; 5、测试，看控制台输出！ 使用Log4j 2输出日志 可以看到还生成了一个日志的文件 【需要修改file的日志级别】 Ref: 在 Web 应用程序中使用 Log4j 2 Log4j2 in a Maven Project: How to Setup, Configure, and Use 多对一处理之高级结果映射 MyBatis 创建时的一个思想是： 数据库不可能永远是你所想或所需的那个样子。 我们希望每个数据库都具备良好的第三范式或 BCNF 范式，可惜它们并不都是那样。 如果能有一种数据库映射模式，完美适配所有的应用程序，那就太好了，但可惜也没有。 而 ResultMap 就是 MyBatis 对这个问题的答案。 第一范式（1NF）：表中的每个属性都是原子的，即不可再分。每个属性只包含单个值，不包含多个值或重复的组合值。 第二范式（2NF）：表中的非主键属性必须完全依赖于主键。换句话说，表中的每个非主键属性必须完全依赖于表中的主键，而不是部分依赖于主键的某个子集。 第三范式（3NF）：表中的非主键属性之间不应该存在传递依赖关系。换句话说，表中的每个非主键属性应该直接依赖于主键，而不是依赖于其他非主键属性。 通过将表设计为第三范式，可以避免数据冗余和不一致性，提高数据存储的效率和一致性。这样的设计有助于减少数据修改的复杂性，提高数据查询和更新的性能，并支持更好的数据一致性维护。 然而，需要注意的是，严格遵循第三范式并不一定是最佳选择。在某些情况下，为了满足特定的性能需求或简化复杂查询，可能需要在设计中引入一些冗余数据或非范式化的结构。在数据库设计过程中，需要根据具体需求和性能考虑，权衡范式化和非范式化的设计选择。 先从简单的开始, 老师和学生的关系, 多个学生存在同属于一个老师, 这就是多对一关系, 我们设计以下Java Bean import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; @Data @AllArgsConstructor @NoArgsConstructor public class Student &#123; private int id; private String name; private int tId; private Teacher teacher; &#125; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; @Data @NoArgsConstructor @AllArgsConstructor public class Teacher &#123; private int id; private String name; &#125; 如果我们需要查询所有的学生信息以及学生对应的老师, 我们编写SQL select s.id, s.name as sName, tid,t.name as tName from students s, teachers t where s.tid = t.id; 执行SQL可以得到 但是这样是得不到Teacher对象的值的，只能得到null，所以我需要编写ResutlMap &lt;resultMap id=\"ST\" type=\"org.example.Bean.Student\"> &lt;id property=\"id\" column=\"id\"/> &lt;result property=\"name\" column=\"sName\"/> &lt;association property=\"teacher\" javaType=\"org.example.Bean.Teacher\"> &lt;id property=\"id\" column=\"tid\">&lt;/id> &lt;result property=\"name\" column=\"tName\"/> &lt;/association> &lt;/resultMap 这段代码是一个 MyBatis 的结果映射配置（resultMap），用于将查询结果映射到 Java 对象。根据给定的配置，它定义了一个名为 “ST” 的结果映射，将查询结果映射到 org.example.Bean.Student 类型的对象。 该 resultMap 包含三个映射项： id 映射：将查询结果的 “id” 列映射到 Student 对象的 “id” 属性。标记出作为 ID 的结果可以帮助提高整体性能 name 映射：将查询结果的 “sName” 列映射到 Student 对象的 “name” 属性。 association（关联）映射：将查询结果中的部分字段映射到关联的 Teacher 对象。 id 映射：将查询结果的 “tid” 列映射到 Teacher 对象的 “id” 属性。 name 映射：将查询结果的 “tName” 列映射到 Teacher 对象的 “name” 属性。 通过使用 resultMap，MyBatis 可以根据查询结果自动将数据填充到 Student 对象中，并可通过访问 Student 对象的属性来获取查询结果的值。此外，关联映射允许将关联表的部分字段映射到关联对象中，以便在查询结果中包含关联对象的相关信息。 编写测试类 public class MapperTest &#123; @Test public void test() &#123; SqlSession sqlSession = MybatisUtil.getSqlSession(); StudentMapper mapper = sqlSession.getMapper(StudentMapper.class); List&lt;Student> students = mapper.getStudents(); for (Student student : students) &#123; System.out.println(student.toString()); &#125; sqlSession.close(); &#125; &#125; 这样我们就可以给Teacher对象赋值了 实际项目中我们可能对多个表进行连表查询，比如，我们如何映射下面这个语句？ &lt;!-- 非常复杂的语句 --> &lt;select id=\"selectBlogDetails\" resultMap=\"detailedBlogResultMap\"> select B.id as blog_id, B.title as blog_title, B.author_id as blog_author_id, A.id as author_id, A.username as author_username, A.password as author_password, A.email as author_email, A.bio as author_bio, A.favourite_section as author_favourite_section, P.id as post_id, P.blog_id as post_blog_id, P.author_id as post_author_id, P.created_on as post_created_on, P.section as post_section, P.subject as post_subject, P.draft as draft, P.body as post_body, C.id as comment_id, C.post_id as comment_post_id, C.name as comment_name, C.comment as comment_text, T.id as tag_id, T.name as tag_name from Blog B left outer join Author A on B.author_id = A.id left outer join Post P on B.id = P.blog_id left outer join Comment C on P.id = C.post_id left outer join Post_Tag PT on PT.post_id = P.id left outer join Tag T on PT.tag_id = T.id where B.id = #&#123;id&#125; &lt;/select> 你可能想把它映射到一个智能的对象模型，这个对象表示了一篇博客，它由某位作者所写，有很多的博文，每篇博文有零或多条的评论和标签。 我们先来看看下面这个完整的例子，它是一个非常复杂的结果映射（假设作者，博客，博文，评论和标签都是类型别名）。 不用紧张，我们会一步一步地来说明。虽然它看起来令人望而生畏，但其实非常简单。 &lt;!-- 非常复杂的结果映射 --> &lt;resultMap id=\"detailedBlogResultMap\" type=\"Blog\"> &lt;constructor> &lt;idArg column=\"blog_id\" javaType=\"int\"/> &lt;/constructor> &lt;result property=\"title\" column=\"blog_title\"/> &lt;association property=\"author\" javaType=\"Author\"> &lt;id property=\"id\" column=\"author_id\"/> &lt;result property=\"username\" column=\"author_username\"/> &lt;result property=\"password\" column=\"author_password\"/> &lt;result property=\"email\" column=\"author_email\"/> &lt;result property=\"bio\" column=\"author_bio\"/> &lt;result property=\"favouriteSection\" column=\"author_favourite_section\"/> &lt;/association> &lt;collection property=\"posts\" ofType=\"Post\"> &lt;id property=\"id\" column=\"post_id\"/> &lt;result property=\"subject\" column=\"post_subject\"/> &lt;association property=\"author\" javaType=\"Author\"/> &lt;collection property=\"comments\" ofType=\"Comment\"> &lt;id property=\"id\" column=\"comment_id\"/> &lt;/collection> &lt;collection property=\"tags\" ofType=\"Tag\" > &lt;id property=\"id\" column=\"tag_id\"/> &lt;/collection> &lt;discriminator javaType=\"int\" column=\"draft\"> &lt;case value=\"1\" resultType=\"DraftPost\"/> &lt;/discriminator> &lt;/collection> &lt;/resultMap> resultMap 元素有很多子元素和一个值得深入探讨的结构。 下面是resultMap 元素的概念视图。 结果映射（resultMap） constructor- 用于在实例化类时，注入结果到构造方法中 idArg - ID 参数；标记出作为 ID 的结果可以帮助提高整体性能 arg - 将被注入到构造方法的一个普通结果 id – 一个 ID 结果；标记出作为 ID 的结果可以帮助提高整体性能 result – 注入到字段或 JavaBean 属性的普通结果 association– 一个复杂类型的关联；许多结果将包装成这种类型 嵌套结果映射 – 关联可以是 resultMap 元素，或是对其它结果映射的引用 collection– 一个复杂类型的集合 嵌套结果映射 – 集合可以是 resultMap 元素，或是对其它结果映射的引用 discriminator– 使用结果值来决定使用哪个resultMap case– 基于某些值的结果映射 嵌套结果映射 – case 也是一个结果映射，因此具有相同的结构和元素；或者引用其它的结果映射 ResultMap 的属性列表 属性 描述 id 当前命名空间中的一个唯一标识，用于标识一个结果映射。 type 类的完全限定名, 或者一个类型别名（关于内置的类型别名，可以参考上面的表格）。 autoMapping 如果设置这个属性，MyBatis 将会为本结果映射开启或者关闭自动映射。 这个属性会覆盖全局的属性 autoMappingBehavior。默认值：未设置（unset）。 最好逐步建立结果映射。单元测试可以在这个过程中起到很大帮助。 如果你尝试一次性创建像上面示例那么巨大的结果映射，不仅容易出错，难度也会直线上升。 所以，从最简单的形态开始，逐步迭代。而且别忘了单元测试！ 有时候，框架的行为像是一个黑盒子（无论是否开源）。因此，为了确保实现的行为与你的期望相一致，最好编写单元测试。 并且单元测试在提交 bug 时也能起到很大的作用。 下一部分将详细说明每个元素。 id &amp; result &lt;id property=\"id\" column=\"post_id\"/> &lt;result property=\"subject\" column=\"post_subject\"/> 这些元素是结果映射的基础。id 和 result 元素都将一个列的值映射到一个简单数据类型（String, int, double, Date 等）的属性或字段。 这两者之间的唯一不同是，id 元素对应的属性会被标记为对象的标识符，在比较对象实例时使用。 这样可以提高整体的性能，尤其是进行缓存和嵌套结果映射（也就是连接映射）的时候。 两个元素都有一些属性： 属性 描述 property 映射到列结果的字段或属性。如果 JavaBean 有这个名字的属性（property），会先使用该属性。否则 MyBatis 将会寻找给定名称的字段（field）。 无论是哪一种情形，你都可以使用常见的点式分隔形式进行复杂属性导航。 比如，你可以这样映射一些简单的东西：“username”，或者映射到一些复杂的东西上：“address.street.number”。 column 数据库中的列名，或者是列的别名。一般情况下，这和传递给 resultSet.getString(columnName) 方法的参数一样。 *javaType* 一个 Java 类的全限定名，或一个类型别名（关于内置的类型别名，可以参考上面的表格）。 如果你映射到一个 JavaBean，MyBatis 通常可以推断类型。然而，如果你映射到的是 HashMap，那么你应该明确地指定 javaType 来保证行为与期望的相一致。 jdbcType JDBC 类型 typeHandler 我们在前面讨论过默认的类型处理器。使用这个属性，你可以覆盖默认的类型处理器。 这个属性值是一个类型处理器实现类的全限定名，或者是类型别名。 构造方法 构造方法注入允许你在初始化时为类设置属性的值，而不用暴露出公有方法。MyBatis 也支持私有属性和私有 JavaBean 属性来完成注入，但有一些人更青睐于通过构造方法进行注入。 constructor 元素就是为此而生的。 看看下面这个构造方法: public class User &#123; //... public User(Integer id, String username, int age) &#123; //... &#125; //... &#125; 为了将结果注入构造方法，MyBatis 需要通过某种方式定位相应的构造方法。 在下面的例子中，MyBatis 搜索一个声明了三个形参的构造方法，参数类型以 java.lang.Integer, java.lang.String 和 int 的顺序给出。 &lt;constructor> &lt;idArg column=\"id\" javaType=\"int\"/> &lt;arg column=\"username\" javaType=\"String\"/> &lt;arg column=\"age\" javaType=\"_int\"/> &lt;/constructor> 当你在处理一个带有多个形参的构造方法时，很容易搞乱 arg 元素的顺序。 从版本 3.4.3 开始，可以在指定参数名称的前提下，以任意顺序编写 arg 元素。 为了通过名称来引用构造方法参数，你可以添加 @Param 注解。 下面是一个等价的例子，尽管函数签名中第二和第三个形参的顺序与 constructor 元素中参数声明的顺序不匹配。 &lt;constructor> &lt;idArg column=\"id\" javaType=\"int\" name=\"id\" /> &lt;arg column=\"age\" javaType=\"_int\" name=\"age\" /> &lt;arg column=\"username\" javaType=\"String\" name=\"username\" /> &lt;/constructor> 如果存在名称和类型相同的可写属性，那么可以省略 javaType 。 剩余的属性和规则和普通的 id 和 result 元素是一样的。 关联 &lt;association property=\"author\" column=\"blog_author_id\" javaType=\"Author\"> &lt;id property=\"id\" column=\"author_id\"/> &lt;result property=\"username\" column=\"author_username\"/> &lt;/association> 关联（association）元素处理“有一个”类型的关系。 比如，在我们的示例中，一个博客有一个用户。关联结果映射和其它类型的映射工作方式差不多。 你需要指定目标属性名以及属性的javaType（很多时候 MyBatis 可以自己推断出来）。 关联的不同之处是，你需要告诉 MyBatis 如何加载关联。MyBatis 有两种不同的方式加载关联： 嵌套 Select 查询：通过执行另外一个 SQL 映射语句来加载期望的复杂类型。 嵌套结果映射：使用嵌套的结果映射来处理连接结果的重复子集。 首先，先让我们来看看这个元素的属性。你将会发现，和普通的结果映射相比，它只在 select 和 resultMap 属性上有所不同。 属性 描述 column 数据库中的列名，或者是列的别名。一般情况下，这和传递给 resultSet.getString(columnName) 方法的参数一样。 javaType 一个 Java 类的完全限定名，或一个类型别名（关于内置的类型别名，可以参考上面的表格）。 如果你映射到一个 JavaBean，MyBatis 通常可以推断类型。然而，如果你映射到的是 HashMap，那么你应该明确地指定 javaType 来保证行为与期望的相一致。 jdbcType JDBC 类型 typeHandler 我们在前面讨论过默认的类型处理器。使用这个属性，你可以覆盖默认的类型处理器。 这个属性值是一个类型处理器实现类的完全限定名，或者是类型别名。 select 用于加载复杂类型属性的映射语句的 ID，它会从 column 属性中指定的列检索数据，作为参数传递给此 select 语句。具体请参考关联元素。 resultMap 结果映射的 ID，可以将嵌套的结果集映射到一个合适的对象树中。 它可以作为使用额外 select 语句的替代方案。它可以将多表连接操作的结果映射成一个单一的 ResultSet。这样的 ResultSet 将会将包含重复或部分数据重复的结果集。为了将结果集正确地映射到嵌套的对象树中，MyBatis 允许你 “串联”结果映射，以便解决嵌套结果集的问题。想了解更多内容，请参考下面的关联元素。 name 构造方法形参的名字。从 3.4.3 版本开始，通过指定具体的参数名，你可以以任意顺序写入 arg 元素。参看上面的解释。 关联的嵌套 Select 查询 属性 描述 column 数据库中的列名，或者是列的别名。一般情况下，这和传递给 resultSet.getString(columnName) 方法的参数一样。 注意：在使用复合主键的时候，你可以使用 column=&quot;&#123;prop1=col1,prop2=col2&#125;&quot; 这样的语法来指定多个传递给嵌套 Select 查询语句的列名。这会使得 prop1 和 prop2 作为参数对象，被设置为对应嵌套 Select 语句的参数。 select 用于加载复杂类型属性的映射语句的 ID，它会从 column 属性指定的列中检索数据，作为参数传递给目标 select 语句。 具体请参考下面的例子。注意：在使用复合主键的时候，你可以使用 column=&quot;&#123;prop1=col1,prop2=col2&#125;&quot; 这样的语法来指定多个传递给嵌套 Select 查询语句的列名。这会使得 prop1 和 prop2 作为参数对象，被设置为对应嵌套 Select 语句的参数。 fetchType 可选的。有效值为 lazy 和 eager。 指定属性后，将在映射中忽略全局配置参数 lazyLoadingEnabled，使用属性的值。 示例： &lt;resultMap id=\"blogResult\" type=\"Blog\"> &lt;association property=\"author\" column=\"author_id\" javaType=\"Author\" select=\"selectAuthor\"/> &lt;/resultMap> &lt;select id=\"selectBlog\" resultMap=\"blogResult\"> SELECT * FROM BLOG WHERE ID = #&#123;id&#125; &lt;/select> &lt;select id=\"selectAuthor\" resultType=\"Author\"> SELECT * FROM AUTHOR WHERE ID = #&#123;id&#125; &lt;/select> 就是这么简单。我们有两个 select 查询语句：一个用来加载博客（Blog），另外一个用来加载作者（Author），而且博客的结果映射描述了应该使用 selectAuthor 语句加载它的 author 属性。 其它所有的属性将会被自动加载，只要它们的列名和属性名相匹配。 这种方式虽然很简单，但在大型数据集或大型数据表上表现不佳。这个问题被称为“N+1 查询问题”。 概括地讲，N+1 查询问题是这样子的： 你执行了一个单独的 SQL 语句来获取结果的一个列表（就是“+1”）。 对列表返回的每条记录，你执行一个 select 查询语句来为每条记录加载详细信息（就是“N”）。 这个问题会导致成百上千的 SQL 语句被执行。有时候，我们不希望产生这样的后果。 好消息是，MyBatis 能够对这样的查询进行延迟加载，因此可以将大量语句同时运行的开销分散开来。 然而，如果你加载记录列表之后立刻就遍历列表以获取嵌套的数据，就会触发所有的延迟加载查询，性能可能会变得很糟糕。 所以还有另外一种方法。 关联的嵌套结果映射 属性 描述 resultMap 结果映射的 ID，可以将此关联的嵌套结果集映射到一个合适的对象树中。 它可以作为使用额外 select 语句的替代方案。它可以将多表连接操作的结果映射成一个单一的 ResultSet。这样的 ResultSet 有部分数据是重复的。 为了将结果集正确地映射到嵌套的对象树中, MyBatis 允许你“串联”结果映射，以便解决嵌套结果集的问题。使用嵌套结果映射的一个例子在表格以后。 columnPrefix 当连接多个表时，你可能会不得不使用列别名来避免在 ResultSet 中产生重复的列名。指定 columnPrefix 列名前缀允许你将带有这些前缀的列映射到一个外部的结果映射中。 详细说明请参考后面的例子。 notNullColumn 默认情况下，在至少一个被映射到属性的列不为空时，子对象才会被创建。 你可以在这个属性上指定非空的列来改变默认行为，指定后，Mybatis 将只在这些列中任意一列非空时才创建一个子对象。可以使用逗号分隔来指定多个列。默认值：未设置（unset）。 autoMapping 如果设置这个属性，MyBatis 将会为本结果映射开启或者关闭自动映射。 这个属性会覆盖全局的属性 autoMappingBehavior。注意，本属性对外部的结果映射无效，所以不能搭配 select 或 resultMap 元素使用。默认值：未设置（unset）。 之前，你已经看到了一个非常复杂的嵌套关联的例子。 下面的例子则是一个非常简单的例子，用于演示嵌套结果映射如何工作。 现在我们将博客表和作者表连接在一起，而不是执行一个独立的查询语句，就像这样： &lt;select id=\"selectBlog\" resultMap=\"blogResult\"> select B.id as blog_id, B.title as blog_title, B.author_id as blog_author_id, A.id as author_id, A.username as author_username, A.password as author_password, A.email as author_email, A.bio as author_bio from Blog B left outer join Author A on B.author_id = A.id where B.id = #&#123;id&#125; &lt;/select> 注意查询中的连接，以及为确保结果能够拥有唯一且清晰的名字，我们设置的别名。 这使得进行映射非常简单。现在我们可以映射这个结果： &lt;resultMap id=\"blogResult\" type=\"Blog\"> &lt;id property=\"id\" column=\"blog_id\" /> &lt;result property=\"title\" column=\"blog_title\"/> &lt;association property=\"author\" column=\"blog_author_id\" javaType=\"Author\" resultMap=\"authorResult\"/> &lt;/resultMap> &lt;resultMap id=\"authorResult\" type=\"Author\"> &lt;id property=\"id\" column=\"author_id\"/> &lt;result property=\"username\" column=\"author_username\"/> &lt;result property=\"password\" column=\"author_password\"/> &lt;result property=\"email\" column=\"author_email\"/> &lt;result property=\"bio\" column=\"author_bio\"/> &lt;/resultMap> 在上面的例子中，你可以看到，博客（Blog）作者（author）的关联元素委托名为 “authorResult” 的结果映射来加载作者对象的实例。 非常重要： id 元素在嵌套结果映射中扮演着非常重要的角色。你应该总是指定一个或多个可以唯一标识结果的属性。 虽然，即使不指定这个属性，MyBatis 仍然可以工作，但是会产生严重的性能问题。 只需要指定可以唯一标识结果的最少属性。显然，你可以选择主键（复合主键也可以）。 现在，上面的示例使用了外部的结果映射元素来映射关联。这使得 Author 的结果映射可以被重用。 然而，如果你不打算重用它，或者你更喜欢将你所有的结果映射放在一个具有描述性的结果映射元素中。 你可以直接将结果映射作为子元素嵌套在内。这里给出使用这种方式的等效例子： &lt;resultMap id=\"blogResult\" type=\"Blog\"> &lt;id property=\"id\" column=\"blog_id\" /> &lt;result property=\"title\" column=\"blog_title\"/> &lt;association property=\"author\" javaType=\"Author\"> &lt;id property=\"id\" column=\"author_id\"/> &lt;result property=\"username\" column=\"author_username\"/> &lt;result property=\"password\" column=\"author_password\"/> &lt;result property=\"email\" column=\"author_email\"/> &lt;result property=\"bio\" column=\"author_bio\"/> &lt;/association> &lt;/resultMap> 那如果博客（blog）有一个共同作者（co-author）该怎么办？select 语句看起来会是这样的： &lt;select id=\"selectBlog\" resultMap=\"blogResult\"> select B.id as blog_id, B.title as blog_title, A.id as author_id, A.username as author_username, A.password as author_password, A.email as author_email, A.bio as author_bio, CA.id as co_author_id, CA.username as co_author_username, CA.password as co_author_password, CA.email as co_author_email, CA.bio as co_author_bio from Blog B left outer join Author A on B.author_id = A.id left outer join Author CA on B.co_author_id = CA.id where B.id = #&#123;id&#125; &lt;/select> 回忆一下，Author 的结果映射定义如下： &lt;resultMap id=\"authorResult\" type=\"Author\"> &lt;id property=\"id\" column=\"author_id\"/> &lt;result property=\"username\" column=\"author_username\"/> &lt;result property=\"password\" column=\"author_password\"/> &lt;result property=\"email\" column=\"author_email\"/> &lt;result property=\"bio\" column=\"author_bio\"/> &lt;/resultMap> 由于结果中的列名与结果映射中的列名不同。你需要指定 columnPrefix 以便重复使用该结果映射来映射 co-author 的结果。 &lt;resultMap id=\"blogResult\" type=\"Blog\"> &lt;id property=\"id\" column=\"blog_id\" /> &lt;result property=\"title\" column=\"blog_title\"/> &lt;association property=\"author\" resultMap=\"authorResult\" /> &lt;association property=\"coAuthor\" resultMap=\"authorResult\" columnPrefix=\"co_\" /> &lt;/resultMap> 关联的多结果集（ResultSet） 属性 描述 column 当使用多个结果集时，该属性指定结果集中用于与 foreignColumn 匹配的列（多个列名以逗号隔开），以识别关系中的父类型与子类型。 foreignColumn 指定外键对应的列名，指定的列将与父类型中 column 的给出的列进行匹配。 resultSet 指定用于加载复杂类型的结果集名字。 从版本 3.2.3 开始，MyBatis 提供了另一种解决 N+1 查询问题的方法。 某些数据库允许存储过程返回多个结果集，或一次性执行多个语句，每个语句返回一个结果集。 我们可以利用这个特性，在不使用连接的情况下，只访问数据库一次就能获得相关数据。 在例子中，存储过程执行下面的查询并返回两个结果集。第一个结果集会返回博客（Blog）的结果，第二个则返回作者（Author）的结果。 SELECT * FROM BLOG WHERE ID = #&#123;id&#125; SELECT * FROM AUTHOR WHERE ID = #&#123;id&#125; 在映射语句中，必须通过 resultSets 属性为每个结果集指定一个名字，多个名字使用逗号隔开。 &lt;select id=\"selectBlog\" resultSets=\"blogs,authors\" resultMap=\"blogResult\" statementType=\"CALLABLE\"> &#123;call getBlogsAndAuthors(#&#123;id,jdbcType=INTEGER,mode=IN&#125;)&#125; &lt;/select> 现在我们可以指定使用 “authors” 结果集的数据来填充 “author” 关联： &lt;resultMap id=\"blogResult\" type=\"Blog\"> &lt;id property=\"id\" column=\"id\" /> &lt;result property=\"title\" column=\"title\"/> &lt;association property=\"author\" javaType=\"Author\" resultSet=\"authors\" column=\"author_id\" foreignColumn=\"id\"> &lt;id property=\"id\" column=\"id\"/> &lt;result property=\"username\" column=\"username\"/> &lt;result property=\"password\" column=\"password\"/> &lt;result property=\"email\" column=\"email\"/> &lt;result property=\"bio\" column=\"bio\"/> &lt;/association> &lt;/resultMap> 你已经在上面看到了如何处理“有一个”类型的关联。但是该怎么处理“有很多个”类型的关联呢？这就是我们接下来要介绍的。 一对多处理之集合 &lt;collection property=\"posts\" ofType=\"domain.blog.Post\"> &lt;id property=\"id\" column=\"post_id\"/> &lt;result property=\"subject\" column=\"post_subject\"/> &lt;result property=\"body\" column=\"post_body\"/> &lt;/collection> 集合元素和关联元素几乎是一样的，它们相似的程度之高，以致于没有必要再介绍集合元素的相似部分。 所以让我们来关注它们的不同之处吧。 我们来继续上面的示例，一个博客（Blog）只有一个作者（Author)。但一个博客有很多文章（Post)。 在博客类中，这可以用下面的写法来表示： private List&lt;Post> posts; 要像上面这样，映射嵌套结果集合到一个 List 中，可以使用集合元素。 和关联元素一样，我们可以使用嵌套 Select 查询，或基于连接的嵌套结果映射集合。 集合的嵌套 Select 查询 首先，让我们看看如何使用嵌套 Select 查询来为博客加载文章。 &lt;resultMap id=\"blogResult\" type=\"Blog\"> &lt;collection property=\"posts\" javaType=\"ArrayList\" column=\"id\" ofType=\"Post\" select=\"selectPostsForBlog\"/> &lt;/resultMap> &lt;select id=\"selectBlog\" resultMap=\"blogResult\"> SELECT * FROM BLOG WHERE ID = #&#123;id&#125; &lt;/select> &lt;select id=\"selectPostsForBlog\" resultType=\"Post\"> SELECT * FROM POST WHERE BLOG_ID = #&#123;id&#125; &lt;/select> 你可能会立刻注意到几个不同，但大部分都和我们上面学习过的关联元素非常相似。 首先，你会注意到我们使用的是集合元素。 接下来你会注意到有一个新的 “ofType” 属性。这个属性非常重要，它用来将 JavaBean（或字段）属性的类型和集合存储的类型区分开来。 所以你可以按照下面这样来阅读映射： &lt;collection property&#x3D;&quot;posts&quot; javaType&#x3D;&quot;ArrayList&quot; column&#x3D;&quot;id&quot; ofType&#x3D;&quot;Post&quot; select&#x3D;&quot;selectPostsForBlog&quot;&#x2F;&gt; 读作： “posts 是一个存储 Post 的 ArrayList 集合” 在一般情况下，MyBatis 可以推断 javaType 属性，因此并不需要填写。所以很多时候你可以简略成： &lt;collection property=\"posts\" column=\"id\" ofType=\"Post\" select=\"selectPostsForBlog\"/> 集合的嵌套结果映射 现在你可能已经猜到了集合的嵌套结果映射是怎样工作的——除了新增的 “ofType” 属性，它和关联的完全相同。 首先, 让我们看看对应的 SQL 语句： &lt;select id=\"selectBlog\" resultMap=\"blogResult\"> select B.id as blog_id, B.title as blog_title, B.author_id as blog_author_id, P.id as post_id, P.subject as post_subject, P.body as post_body, from Blog B left outer join Post P on B.id = P.blog_id where B.id = #&#123;id&#125; &lt;/select> 我们再次连接了博客表和文章表，并且为每一列都赋予了一个有意义的别名，以便映射保持简单。 要映射博客里面的文章集合，就这么简单： &lt;resultMap id=\"blogResult\" type=\"Blog\"> &lt;id property=\"id\" column=\"blog_id\" /> &lt;result property=\"title\" column=\"blog_title\"/> &lt;collection property=\"posts\" ofType=\"Post\"> &lt;id property=\"id\" column=\"post_id\"/> &lt;result property=\"subject\" column=\"post_subject\"/> &lt;result property=\"body\" column=\"post_body\"/> &lt;/collection> &lt;/resultMap> 再提醒一次，要记得上面 id 元素的重要性，如果你不记得了，请阅读关联部分的相关部分。 如果你喜欢更详略的、可重用的结果映射，你可以使用下面的等价形式： &lt;resultMap id=\"blogResult\" type=\"Blog\"> &lt;id property=\"id\" column=\"blog_id\" /> &lt;result property=\"title\" column=\"blog_title\"/> &lt;collection property=\"posts\" ofType=\"Post\" resultMap=\"blogPostResult\" columnPrefix=\"post_\"/> &lt;/resultMap> &lt;resultMap id=\"blogPostResult\" type=\"Post\"> &lt;id property=\"id\" column=\"id\"/> &lt;result property=\"subject\" column=\"subject\"/> &lt;result property=\"body\" column=\"body\"/> &lt;/resultMap> 缓存 MyBatis 内置了一个强大的事务性查询缓存机制，它可以非常方便地配置和定制。 为了使它更加强大而且易于配置，我们对 MyBatis 3 中的缓存实现进行了许多改进。 默认情况下，只启用了本地的会话缓存，它仅仅对一个会话中的数据进行缓存。 要启用全局的二级缓存，只需要在你的 SQL 映射文件中添加一行： &lt;cache/> 基本上就是这样。这个简单语句的效果如下: 映射语句文件中的所有 select 语句的结果将会被缓存。 映射语句文件中的所有 insert、update 和 delete 语句会刷新缓存。 缓存会使用最近最少使用算法（LRU, Least Recently Used）算法来清除不需要的缓存。 缓存不会定时进行刷新（也就是说，没有刷新间隔）。 缓存会保存列表或对象（无论查询方法返回哪种）的 1024 个引用。 缓存会被视为读/写缓存，这意味着获取到的对象并不是共享的，可以安全地被调用者修改，而不干扰其他调用者或线程所做的潜在修改。 提示 缓存只作用于 cache 标签所在的映射文件中的语句。如果你混合使用 Java API 和 XML 映射文件，在共用接口中的语句将不会被默认缓存。你需要使用 @CacheNamespaceRef 注解指定缓存作用域。 这些属性可以通过 cache 元素的属性来修改。比如： &lt;cache eviction=\"FIFO\" flushInterval=\"60000\" size=\"512\" readOnly=\"true\"/> 这个更高级的配置创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储结果对象或列表的 512 个引用，而且返回的对象被认为是只读的，因此对它们进行修改可能会在不同线程中的调用者产生冲突。 可用的清除策略有： LRU – 最近最少使用：移除最长时间不被使用的对象。 FIFO – 先进先出：按对象进入缓存的顺序来移除它们。 SOFT – 软引用：基于垃圾回收器状态和软引用规则移除对象。 WEAK – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。 默认的清除策略是 LRU。 flushInterval（刷新间隔）属性可以被设置为任意的正整数，设置的值应该是一个以毫秒为单位的合理时间量。 默认情况是不设置，也就是没有刷新间隔，缓存仅仅会在调用语句时刷新。 size（引用数目）属性可以被设置为任意正整数，要注意欲缓存对象的大小和运行环境中可用的内存资源。默认值是 1024。 readOnly（只读）属性可以被设置为 true 或 false。只读的缓存会给所有调用者返回缓存对象的相同实例。 因此这些对象不能被修改。这就提供了可观的性能提升。而可读写的缓存会（通过序列化）返回缓存对象的拷贝。 速度上会慢一些，但是更安全，因此默认值是 false。 提示 二级缓存是事务性的。这意味着，当 SqlSession 完成并提交时，或是完成并回滚，但没有执行 flushCache=true 的 insert/delete/update 语句时，缓存会获得更新。 使用自定义缓存 除了上述自定义缓存的方式，你也可以通过实现你自己的缓存，或为其他第三方缓存方案创建适配器，来完全覆盖缓存行为。 &lt;cache type=\"com.domain.something.MyCustomCache\"/> 这个示例展示了如何使用一个自定义的缓存实现。type 属性指定的类必须实现 org.apache.ibatis.cache.Cache 接口，且提供一个接受 String 参数作为 id 的构造器。 这个接口是 MyBatis 框架中许多复杂的接口之一，但是行为却非常简单。 public interface Cache &#123; String getId(); int getSize(); void putObject(Object key, Object value); Object getObject(Object key); boolean hasKey(Object key); Object removeObject(Object key); void clear(); &#125; 为了对你的缓存进行配置，只需要简单地在你的缓存实现中添加公有的 JavaBean 属性，然后通过 cache 元素传递属性值，例如，下面的例子将在你的缓存实现上调用一个名为 setCacheFile(String file) 的方法： &lt;cache type=\"com.domain.something.MyCustomCache\"> &lt;property name=\"cacheFile\" value=\"/tmp/my-custom-cache.tmp\"/> &lt;/cache> 你可以使用所有简单类型作为 JavaBean 属性的类型，MyBatis 会进行转换。 你也可以使用占位符（如 $&#123;cache.file&#125;），以便替换成在配置文件属性中定义的值。 从版本 3.4.2 开始，MyBatis 已经支持在所有属性设置完毕之后，调用一个初始化方法。 如果想要使用这个特性，请在你的自定义缓存类里实现 org.apache.ibatis.builder.InitializingObject 接口。 public interface InitializingObject &#123; void initialize() throws Exception; &#125; 提示 上一节中对缓存的配置（如清除策略、可读或可读写等），不能应用于自定义缓存。 请注意，缓存的配置和缓存实例会被绑定到 SQL 映射文件的命名空间中。 因此，同一命名空间中的所有语句和缓存将通过命名空间绑定在一起。 每条语句可以自定义与缓存交互的方式，或将它们完全排除于缓存之外，这可以通过在每条语句上使用两个简单属性来达成。 默认情况下，语句会这样来配置： &lt;select ... flushCache=\"false\" useCache=\"true\"/> &lt;insert ... flushCache=\"true\"/> &lt;update ... flushCache=\"true\"/> &lt;delete ... flushCache=\"true\"/> 鉴于这是默认行为，显然你永远不应该以这样的方式显式配置一条语句。但如果你想改变默认的行为，只需要设置 flushCache 和 useCache 属性。比如，某些情况下你可能希望特定 select 语句的结果排除于缓存之外，或希望一条 select 语句清空缓存。类似地，你可能希望某些 update 语句执行时不要刷新缓存。 cache-ref 回想一下上一节的内容，对某一命名空间的语句，只会使用该命名空间的缓存进行缓存或刷新。 但你可能会想要在多个命名空间中共享相同的缓存配置和实例。要实现这种需求，你可以使用 cache-ref 元素来引用另一个缓存。 &lt;cache-ref namespace=\"com.someone.application.data.SomeMapper\"/>","categories":[{"name":"java web","slug":"java-web","permalink":"https://trevoewu.github.io/categories/java-web/"}],"tags":[{"name":"MyBatis","slug":"MyBatis","permalink":"https://trevoewu.github.io/tags/MyBatis/"},{"name":"Java Web","slug":"Java-Web","permalink":"https://trevoewu.github.io/tags/Java-Web/"}]},{"title":"超市管理系统","slug":"超市管理系统","date":"2023-05-15T13:15:33.000Z","updated":"2023-05-19T13:42:46.033Z","comments":true,"path":"2023/05/15/超市管理系统/","link":"","permalink":"https://trevoewu.github.io/2023/05/15/%E8%B6%85%E5%B8%82%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/","excerpt":"","text":"实战: 超市订单管理系统 为了方便表述和理解, 在编写MVC三层对应的代码时, 使用自顶向下, 但在实际的项目中, 编写代码工作往往是自底向上的. 搭建项目框架 编写数据库操作的基础公共类DB 数据库配置文件，这是一个资源文件，应该创建在maven项目的resources文件中 DRIVER=com.mysql.jdbc.Driver URL=jdbc:mysql://localhost:3307/smbms?useUnicode=true&amp;characterEncoding=utf-8 USERNAME=root PASSWORD= 使用静态代码块实现初始化参数 该类为数据库访问工具类，提供了获取数据库连接、执行查询和更新等常用操作的方法。 类名：DB 属性： DRIVER：String类型，表示数据库驱动名。 URL：String类型，表示数据库连接地址。 USERNAME：String类型，表示连接数据库的用户名。 PASSWORD：String类型，表示连接数据库的密码。 方法： close：用于释放数据库连接、预处理语句和结果集资源。 getConnection：用于获取数据库连接。 executeQuery：用于执行查询操作，返回一个结果集。 executeUpdate：用于执行更新操作，返回受影响的行数。 方法的参数： conn：Connection类型，表示数据库连接。 pstmt：PreparedStatement类型，表示预处理语句。 resSet：ResultSet类型，表示结果集。 query：String类型，表示要执行的SQL语句。 params：Object[]类型，表示SQL语句中的参数值。 在类中还定义了一个静态代码块，该代码块在类加载时会被执行。静态代码块中的主要作用是读取配置文件中的数据库连接参数，并将其赋值给类的静态属性。具体实现如下： 创建Properties对象。 通过类加载器加载配置文件为字节输入流。 使用Properties对象的load()方法加载字节输入流中的内容。 从Properties对象中获取数据库连接参数，并将其赋值给类的静态属性。 通过这种方式，可以在不修改Java代码的情况下，更改数据库连接参数，提高了代码的灵活性和可维护性。 public class DB &#123; private static String DRIVER; private static String URL; private static String USERNAME; private static String PASSWORD; //静态代码块， 类加载的时候执行 static &#123; //读取配置文件 //1、创建properties对象 Properties properties = new Properties(); //2、通过类加载器加载资源文件为字节输入流 InputStream in = DB.class.getClassLoader().getResourceAsStream(\"db.properties\"); try &#123; properties.load(in); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; DRIVER = properties.getProperty(\"DRIVER\"); URL = properties.getProperty(\"URL\"); USERNAME = properties.getProperty(\"USERNAME\"); PASSWORD = properties.getProperty(\"PASSWORD\"); &#125; &#125; 编写数据库操作的公共方法 该类为数据库访问工具类，提供了获取数据库连接、执行查询和更新等常用操作的方法。 类名：DB 属性： DRIVER：String类型，表示数据库驱动名。 URL：String类型，表示数据库连接地址。 USERNAME：String类型，表示连接数据库的用户名。 PASSWORD：String类型，表示连接数据库的密码。 方法： close：用于释放数据库连接、预处理语句和结果集资源。 getConnection：用于获取数据库连接。 executeQuery：用于执行查询操作，返回一个结果集。 executeUpdate：用于执行更新操作，返回受影响的行数。 方法的参数： conn：Connection类型，表示数据库连接。 pstmt：PreparedStatement类型，表示预处理语句。 resSet：ResultSet类型，表示结果集。 query：String类型，表示要执行的SQL语句。 params：Object[]类型，表示SQL语句中的参数值。 该类还包含一个静态代码块，用于初始化数据库连接参数，但代码块的内容未给出，需要进行补充。 同时需要注意，该类并没有实现单例模式，每次获取数据库连接都会重新创建一个新的连接，这可能会导致性能问题。 package util; public class DB &#123; private static String DRIVER; private static String URL; private static String USERNAME; private static String PASSWORD; /* 静态代码块， 类加载的时候执行 */ //释放链接资源 public static void close(Connection conn, PreparedStatement pstmt, ResultSet resSet) throws SQLException &#123; if(resSet != null)&#123; resSet.close(); &#125; if(pstmt != null)&#123; pstmt.close(); &#125; if(conn != null) &#123; conn.close(); &#125; &#125; //获取数据库链接 public static Connection getConnection() throws SQLException, ClassNotFoundException &#123; Class.forName(DRIVER); String url = URL; String username = USERNAME; String password = PASSWORD; // 2.连接数据库,代表数据库 Connection connection = DriverManager.getConnection(url, username, password); return connection; &#125; //执行查询, 返回结果集 public static ResultSet executeQuery(Connection conn,String query,Object[] params) throws SQLException, ClassNotFoundException&#123; ResultSet resultSet = null; if(conn != null &amp;&amp; !query.isEmpty() &amp;&amp; params != null)&#123; //预处理 PreparedStatement statement = conn.prepareStatement(query); for (int i = 0; i &lt; params.length;i++)&#123; //设置SQL 语句中的参数 if(params[i] instanceof String)&#123; statement.setString(i+1,params[i].toString()); &#125; else if(params[i] instanceof Integer)&#123; statement.setInt(i+1,Integer.parseInt(params[i].toString())); &#125; else &#123; statement.setObject(i+1,params[i]); &#125; &#125; //执行 resultSet = statement.executeQuery(); &#125; return resultSet; &#125; //执行更新， 返回影响行数 public static int executeUpdate(Connection conn,String query,Object[] params) throws SQLException &#123; int affectedRows = 0; if(conn != null &amp;&amp; !query.isEmpty() &amp;&amp; params != null)&#123; //预处理 PreparedStatement statement = conn.prepareStatement(query); for (int i = 0; i &lt; params.length;i++)&#123; //设置SQL 语句中的参数 if(params[i] instanceof String)&#123; statement.setString(i+1,params[i].toString()); &#125; else if(params[i] instanceof Integer)&#123; statement.setInt(i+1,Integer.parseInt(params[i].toString())); &#125; else &#123; statement.setObject(i+1,params[i]); &#125; &#125; //执行 affectedRows = statement.executeUpdate(); &#125; return affectedRows; &#125; &#125; 登录功能实现 前端页面编写 前端页面由kuang提供 &lt;%-- header--%&gt; &lt;form class&#x3D;&quot;loginForm&quot; action&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;login.do&quot; name&#x3D;&quot;actionForm&quot; id&#x3D;&quot;actionForm&quot; method&#x3D;&quot;post&quot;&gt; &lt;div class&#x3D;&quot;info&quot;&gt;$&#123;error&#125;&lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;inputbox&quot;&gt; &lt;label&gt;用户名：&lt;&#x2F;label&gt; &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;input-text&quot; id&#x3D;&quot;userCode&quot; name&#x3D;&quot;userCode&quot; placeholder&#x3D;&quot;请输入用户名&quot; required&#x2F;&gt; &lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;inputbox&quot;&gt; &lt;label&gt;密码：&lt;&#x2F;label&gt; &lt;input type&#x3D;&quot;password&quot; id&#x3D;&quot;userPassword&quot; name&#x3D;&quot;userPassword&quot; placeholder&#x3D;&quot;请输入密码&quot; required&#x2F;&gt; &lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;subBtn&quot;&gt; &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;登录&quot;&#x2F;&gt; &lt;input type&#x3D;&quot;reset&quot; value&#x3D;&quot;重置&quot;&#x2F;&gt; &lt;&#x2F;div&gt; &lt;&#x2F;form&gt; &lt;%-- footer--%&gt; 登录处理Servlet实现 在前端form表单的action属性值我们可以看到提交的URL, 所以, 我们需要编写对应的Servlet来处理这个请求 action&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;login.do&quot; 创建登录处理Servlet 以下是一个名为“Login”的Java servlet类，用于处理HTTP GET请求。该类包括对“UserService”实例的引用，该实例用于从数据库中检索用户信息。 在“doGet”方法中，servlet从HTTP请求中检索userCode和password参数。然后它创建一个“UserServiceImpl”类的新实例（该类实现了“UserService”接口），并调用其“findByUserCode”方法，以根据给定的用户代码从数据库中检索用户对象。 如果用户对象不为null，则servlet检查用户密码是否与给定密码匹配。如果匹配，则servlet使用用户对象设置名为“USER_SESSION”的会话属性，并将用户重定向到“/jsp/frame.jsp”。如果密码不匹配，则servlet使用错误消息设置名为“error”的会话属性，并将用户重定向回“/login.jsp”。 请注意，此代码片段不完整，因为它缺少有关导入，它所依赖的接口和类，以及servlet配置的信息。 public class Login extends HttpServlet &#123; private UserService service; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; String userCode = req.getParameter(\"userCode\"); String password = req.getParameter(\"userPassword\"); service = new UserServiceImpl(); User user = null; user = service.findByUserCode(userCode); if(user != null) &#123; if(user.getUserPassword().equals(password)) &#123; req.getSession().setAttribute(Constant.USER_SESSION,user); resp.sendRedirect(\"/jsp/frame.jsp\"); &#125; else &#123; req.getSession().setAttribute(\"error\",\"username or password incorrect\"); resp.sendRedirect(\"/login.jsp\"); &#125; &#125; &#125; 映射 servlet 这段代码是一个 servlet 配置的 XML 部分，它用于将请求的 URL 映射到特定的 servlet 上。这段配置指定了一个名为 “Login” 的 servlet，使用了完整的类名 servlet.Login，并将它映射到 URL “/login.do” 上。 这意味着，当用户在浏览器中访问 “/login.do” 时，容器将调用 servlet.Login 的 service() 方法来处理该请求。映射 servlet 的操作是 web 应用的一部分，它在 web.xml 文件中进行配置。 &lt;servlet> &lt;servlet-name>Login&lt;/servlet-name> &lt;servlet-class>servlet.Login&lt;/servlet-class> &lt;/servlet> &lt;servlet-mapping> &lt;servlet-name>Login&lt;/servlet-name> &lt;url-pattern>/login.do&lt;/url-pattern> &lt;/servlet-mapping> 编写Service层代码 该代码是一个 Java 类 UserServiceImpl，实现了一个接口 UserService。该类包含了两个方法： findByUserCode(String userCode)：查找数据库中对应用户的信息，该方法返回一个 User 对象。 updateUser(Integer id, String key, String value)：更新数据库中用户的信息，该方法返回一个 boolean 类型的值，表示更新是否成功。 在这个类中，私有成员变量 dao 是一个 UserDao 类型的变量，通过该变量调用 UserDaoImpl 类中的方法来访问数据库。在 findByUserCode 和 updateUser 方法中，都需要先通过 dao 实例化一个 UserDaoImpl 对象来调用相应的方法。 public class UserServiceImpl implements UserService &#123; private UserDao dao; @Override public User findByUserCode(String userCode)&#123; dao = new UserDaoImpl(); User user = dao.findByUserCode(userCode); return user; &#125; @Override public boolean updateUser(Integer id, String key, String value) &#123; dao = new UserDaoImpl(); int i = 0; i = dao.updateUser(id, key, value); return i > 0 ? true : false; &#125; &#125; DAO层代码 这段代码是一个Dao层的实现类，用于和数据库交互，提供了对User表的查询和更新方法。下面是代码的分析： findByUserCode(String userCode) 方法：根据传入的用户名参数 userCode 查询对应的用户记录，并返回一个User对象。该方法使用了数据库连接池技术，在执行完查询后会关闭连接。方法中首先初始化参数，然后执行SQL语句查询结果集，遍历结果集将数据封装到User对象中，最后关闭连接和结果集，返回User对象。 updateUser(Integer id, String key,String value) 方法：根据传入的参数更新User表中的数据。该方法也使用了数据库连接池技术，在执行完更新后会关闭连接。方法中首先判断传入的参数是否为空，然后执行SQL语句更新数据，最后关闭连接，返回更新结果的影响行数。 public class UserDaoImpl implements UserDao&#123; private User user; private Connection conn; private String sql; @Override public User findByUserCode(String userCode)&#123; //2. 初始化参数 Object[] params = &#123;userCode&#125;; ResultSet set; sql = \"SELECT * FROM smbms_user Where userCode = ?\"; try &#123; conn = DB.getConnection(); set = DB.executeQuery(conn, sql,params); if(set != null)&#123; user = new User(); while (set.next()) &#123; user.setUserPassword(set.getString(\"userPassword\")); //一大串赋值代码... user.setWorkPicPath(\"workPicPath\"); &#125; &#125; else &#123; return null; &#125; //关闭链接和结果集 DB.close(conn,null,set); &#125; catch (SQLException e) &#123; throw new RuntimeException(e); &#125; catch (ClassNotFoundException e) &#123; throw new RuntimeException(e); &#125; return user; &#125; @Override public int updateUser(Integer id, String key,String value) &#123; int affectedRow = 0; if(id != null&amp;&amp; value != null &amp;&amp; key != null)&#123; Connection conn = null; sql = \"UPDATE smbms_user SET \"+key+\" = ? WHERE id = ? \"; Object[] params = &#123;value,id&#125;; try &#123; conn = DB.getConnection(); affectedRow = DB.executeUpdate(conn, sql, params); DB.close(conn,null,null); &#125; catch (SQLException e) &#123; throw new RuntimeException(e); &#125; catch (ClassNotFoundException e) &#123; throw new RuntimeException(e); &#125; &#125; return affectedRow; &#125; 密码修改实现 前端页面 JSP部分: 页面显示 &lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt; &lt;%@include file&#x3D;&quot;&#x2F;jsp&#x2F;common&#x2F;head.jsp&quot; %&gt; &lt;div class&#x3D;&quot;right&quot;&gt; &lt;div class&#x3D;&quot;location&quot;&gt; &lt;strong&gt;你现在所在的位置是:&lt;&#x2F;strong&gt; &lt;span&gt;密码修改页面&lt;&#x2F;span&gt; &lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;providerAdd&quot;&gt; &lt;form id&#x3D;&quot;userForm&quot; name&#x3D;&quot;userForm&quot; method&#x3D;&quot;post&quot; action&#x3D;&quot;$&#123;pageContext.request.contextPath &#125;&#x2F;jsp&#x2F;user.do&quot;&gt; &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;method&quot; value&#x3D;&quot;savepwd&quot;&#x2F;&gt; &lt;!--div的class 为error是验证错误，ok是验证成功--&gt; &lt;div class&#x3D;&quot;info&quot;&gt;$&#123;message&#125;&lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;&quot;&gt; &lt;label for&#x3D;&quot;oldPassword&quot;&gt;旧密码：&lt;&#x2F;label&gt; &lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;oldpassword&quot; id&#x3D;&quot;oldpassword&quot; value&#x3D;&quot;&quot;&gt; &lt;font color&#x3D;&quot;red&quot;&gt;&lt;&#x2F;font&gt; &lt;&#x2F;div&gt; &lt;div&gt; &lt;label for&#x3D;&quot;newPassword&quot;&gt;新密码：&lt;&#x2F;label&gt; &lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;newpassword&quot; id&#x3D;&quot;newpassword&quot; value&#x3D;&quot;&quot;&gt; &lt;font color&#x3D;&quot;red&quot;&gt;&lt;&#x2F;font&gt; &lt;&#x2F;div&gt; &lt;div&gt; &lt;label for&#x3D;&quot;newPassword&quot;&gt;确认新密码：&lt;&#x2F;label&gt; &lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;rnewpassword&quot; id&#x3D;&quot;rnewpassword&quot; value&#x3D;&quot;&quot;&gt; &lt;font color&#x3D;&quot;red&quot;&gt;&lt;&#x2F;font&gt; &lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;providerAddBtn&quot;&gt; &lt;!--&lt;a href&#x3D;&quot;#&quot;&gt;保存&lt;&#x2F;a&gt;--&gt; &lt;input type&#x3D;&quot;button&quot; name&#x3D;&quot;save&quot; id&#x3D;&quot;save&quot; value&#x3D;&quot;保存&quot; class&#x3D;&quot;input-button&quot;&gt; &lt;&#x2F;div&gt; &lt;&#x2F;form&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;section&gt; &lt;%@include file&#x3D;&quot;&#x2F;jsp&#x2F;common&#x2F;foot.jsp&quot; %&gt; &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;$&#123;pageContext.request.contextPath &#125;&#x2F;statics&#x2F;js&#x2F;pwdmodify.js&quot;&gt;&lt;&#x2F;script&gt; 这是一个用 JSP（JavaServer Pages）编写的网页代码，用于修改密码。页面包括一个表单，用户可以在其中输入旧密码、新密码和确认新密码。表单使用POST方法提交到服务器，并使用“/jsp/user.do” URL。 页面包括一个消息区域，用于显示任何错误消息。页面还包括指向名为“pwdmodify.js”的 JavaScript 文件的链接。这个文件应该包含表单的客户端验证逻辑。 页面使用 JSP 表达式语言（EL）将动态内容插入到 HTML 中。例如，页面使用表达式 “${pageContext.request.contextPath}/statics/js/pwdmodify.js” 插入一个链接到 CSS 文件。“${pageContext.request.contextPath}” 表达式计算为 web 应用程序的上下文路径，用于构造 CSS 文件的完整 URL。 JavaScript 表单的客户端验证逻辑 var oldpassword = null; var newpassword = null; var rnewpassword = null; var saveBtn = null; $(function()&#123; oldpassword = $(\"#oldpassword\"); newpassword = $(\"#newpassword\"); rnewpassword = $(\"#rnewpassword\"); saveBtn = $(\"#save\"); oldpassword.next().html(\"*\"); newpassword.next().html(\"*\"); rnewpassword.next().html(\"*\"); oldpassword.on(\"blur\",function()&#123; $.ajax(&#123; type:\"GET\", url:path+\"/jsp/user.do\", data:&#123;method:\"pwdmodify\",oldpassword:oldpassword.val()&#125;, dataType:\"json\", success:function(data)&#123; if(data.result == \"true\")&#123;//旧密码正确 validateTip(oldpassword.next(),&#123;\"color\":\"green\"&#125;,imgYes,true); &#125;else if(data.result == \"false\")&#123;//旧密码输入不正确 validateTip(oldpassword.next(),&#123;\"color\":\"red\"&#125;,imgNo + \" 原密码输入不正确\",false); &#125;else if(data.result == \"sessionerror\")&#123;//当前用户session过期，请重新登录 validateTip(oldpassword.next(),&#123;\"color\":\"red\"&#125;,imgNo + \" 当前用户session过期，请重新登录\",false); &#125;else if(data.result == \"error\")&#123;//旧密码输入为空 validateTip(oldpassword.next(),&#123;\"color\":\"red\"&#125;,imgNo + \" 请输入旧密码\",false); &#125; &#125;, error:function(data)&#123; //请求出错 validateTip(oldpassword.next(),&#123;\"color\":\"red\"&#125;,imgNo + \" 请求错误\",false); &#125; &#125;); &#125;).on(\"focus\",function()&#123; validateTip(oldpassword.next(),&#123;\"color\":\"#666666\"&#125;,\"* 请输入原密码\",false); &#125;); newpassword.on(\"focus\",function()&#123; validateTip(newpassword.next(),&#123;\"color\":\"#666666\"&#125;,\"* 密码长度必须是大于6小于20\",false); &#125;).on(\"blur\",function()&#123; if(newpassword.val() != null &amp;&amp; newpassword.val().length > 5 &amp;&amp; newpassword.val().length &lt; 20 )&#123; validateTip(newpassword.next(),&#123;\"color\":\"green\"&#125;,imgYes,true); &#125;else&#123; validateTip(newpassword.next(),&#123;\"color\":\"red\"&#125;,imgNo + \" 密码输入不符合规范，请重新输入\",false); &#125; &#125;); rnewpassword.on(\"focus\",function()&#123; validateTip(rnewpassword.next(),&#123;\"color\":\"#666666\"&#125;,\"* 请输入与上面一致的密码\",false); &#125;).on(\"blur\",function()&#123; if(rnewpassword.val() != null &amp;&amp; rnewpassword.val().length > 5 &amp;&amp; rnewpassword.val().length &lt; 20 &amp;&amp; newpassword.val() == rnewpassword.val())&#123; validateTip(rnewpassword.next(),&#123;\"color\":\"green\"&#125;,imgYes,true); &#125;else&#123; validateTip(rnewpassword.next(),&#123;\"color\":\"red\"&#125;,imgNo + \" 两次密码输入不一致，请重新输入\",false); &#125; &#125;); saveBtn.on(\"click\",function()&#123; oldpassword.blur(); newpassword.blur(); rnewpassword.blur(); if( oldpassword.attr(\"validateStatus\") == \"true\" &amp;&amp; newpassword.attr(\"validateStatus\") == \"true\" &amp;&amp; rnewpassword.attr(\"validateStatus\") == \"true\")&#123; if(confirm(\"确定要修改密码？\"))&#123; $(\"#userForm\").submit(); &#125; &#125; &#125;); &#125;); 这是一个 JavaScript 代码段，它使用 jQuery 库为一个包含密码修改表单的网页添加了客户端验证逻辑。代码使用 AJAX 技术从服务器获取 JSON 格式的响应数据，以验证用户输入的旧密码是否正确，并在页面上显示相关提示信息。 代码中首先定义了四个变量，分别是旧密码、新密码、确认新密码和提交按钮的 jQuery 对象。然后使用 $() 函数将代码包装在一个回调函数中，确保代码在文档加载完成后才执行。回调函数内部做了以下工作： 通过选择器获取页面上的旧密码输入框、新密码输入框、确认新密码输入框和提交按钮，并将它们的 jQuery 对象赋值给前面定义的四个变量。 为旧密码输入框绑定 blur 事件处理函数，当输入框失去焦点时，使用 $.ajax() 函数向服务器发送 GET 请求，验证用户输入的旧密码是否正确，并根据服务器返回的响应数据显示相应的提示信息。在成功回调函数中，根据 data.result 的值判断旧密码是否正确，并通过 validateTip() 函数显示相应的提示信息。在失败回调函数中，显示请求出错的提示信息。 为旧密码输入框绑定 focus 事件处理函数，当输入框获得焦点时，显示输入提示信息。 为新密码输入框绑定 focus 和 blur 事件处理函数，当输入框获得焦点时，显示输入提示信息；当输入框失去焦点时，判断用户输入的新密码是否符合规范，如果符合则显示正确提示，否则显示错误提示。 为确认新密码输入框绑定 focus 和 blur 事件处理函数，当输入框获得焦点时，显示输入提示信息；当输入框失去焦点时，判断用户输入的确认新密码是否与新密码一致，如果一致则显示正确提示，否则显示错误提示。 为提交按钮绑定 click 事件处理函数，当按钮被点击时，先让旧密码、新密码和确认新密码输入框失去焦点，然后判断它们的验证状态是否都为 true，如果是，则显示确认修改密码的提示框，如果用户点击确定，则提交表单，将新密码保存到服务器上。 编写处理Servlet public class UserDo extends HttpServlet &#123; private UserService service; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; String method = req.getParameter(\"method\"); if(\"savepwd\".equals(method))&#123; savePwd(req, resp); &#125; else if(\"pwdmodify\".equals(method))&#123; pwdModify(req, resp); &#125; &#125; protected void savePwd(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; //拿到USer Session , 用于得到用户id HttpSession session = req.getSession(); User user = (User) session.getAttribute(Constant.USER_SESSION); String newPwd = req.getParameter(\"newpassword\"); System.out.println(\"用户输入的：new password: \"+newPwd); System.out.println(\"Session password: \"+user.getUserPassword()+\", id: \"+ user.getId()); Integer id = user.getId(); boolean flag; //method 值为 savepwd, 表示用户执行修改密码操作 if(newPwd != null)&#123; service = new UserServiceImpl(); flag = service.updateUser(id, \"userPassword\", newPwd); //修改成功 if(flag)&#123; System.out.println(\"修改成功\"); req.setAttribute(\"message\",\"密码修改成功， 请重新登录\"); // 移除Session session.removeAttribute(Constant.USER_SESSION); &#125; else &#123; System.out.println(\"密码修改失败\"); req.setAttribute(\"message\",\"密码修改失败\"); &#125; &#125; else &#123; req.setAttribute(\"message\",\"新密码格式错误\"); &#125; //转发到当前页面, 不用重定向而使用转发是为了传统参数（attribute) 通知前端密码修改结果（by attribute message） req.getRequestDispatcher(\"/jsp/pwdmodify.jsp\").forward(req,resp); &#125; /* 由ajax发起的密码查询请求， 用户进行密码修改时触发 放回前端json， ajax用于比对旧密码正确性, */ protected void pwdModify(HttpServletRequest req, HttpServletResponse resp)&#123; HttpSession session = req.getSession(); Object user = session.getAttribute(Constant.USER_SESSION); Map&lt;String, String> map = new HashMap&lt;String, String>(); if(user != null)&#123; String password = ((User) user).getUserPassword(); String inputPwd = req.getParameter(\"oldpassword\"); if(inputPwd != null &amp;&amp; inputPwd.length() > 0)&#123; //旧密码正确 if(inputPwd.equals(password))&#123; map.put(\"result\",\"true\"); &#125; else &#123; //旧密码不正确 map.put(\"result\",\"false\"); &#125; &#125; else &#123; //密码输入为空 map.put(\"result\",\"error\"); &#125; &#125; else &#123; //session timeout map.put(\"result\",\"sessionerror\"); &#125; //返回前端json数据 resp.setContentType(\"application/json\"); try &#123; PrintWriter writer = resp.getWriter(); writer.write(JSONArray.toJSONString(map)); writer.flush(); writer.close(); &#125; catch (IOException e) &#123; throw new RuntimeException(e); &#125; &#125; &#125; 这段代码是一个Java Web应用程序中的Servlet，用于处理用户密码修改操作。 在doGet()方法中，根据请求参数&quot;method&quot;的值进行不同的操作。如果&quot;method&quot;的值是&quot;savepwd&quot;，则调用savePwd()方法，保存新密码；如果&quot;method&quot;的值是&quot;pwdmodify&quot;，则调用pwdModify()方法，用于检查旧密码是否正确。 在savePwd()方法中，首先从Session中获取当前用户的信息，然后获取新密码，并使用UserService接口的实现类UserServiceImpl来更新用户密码。如果更新成功，将信息存储在请求属性中，并移除Session中的用户信息，最后将请求转发到密码修改页面。 在pwdModify()方法中，首先获取当前用户的信息，然后获取旧密码。如果旧密码不为空，则将输入的旧密码与Session中存储的旧密码进行比较。如果输入的旧密码与Session中的旧密码相同，则返回前端JSON数据，表示旧密码正确；否则返回JSON数据，表示旧密码不正确。 需要注意的是，在返回JSON数据之前，需要设置响应的Content-Type为&quot;application/json&quot;。 映射Servlet &lt;servlet> &lt;servlet-name>userDo&lt;/servlet-name> &lt;servlet-class>servlet.UserDo&lt;/servlet-class> &lt;/servlet> &lt;servlet-mapping> &lt;servlet-name>userDo&lt;/servlet-name> &lt;url-pattern>/jsp/user.do&lt;/url-pattern> &lt;/servlet-mapping> 用户管理底层实现 分页实现 导入分页支持 package util; public class PageSupport &#123; //当前页码-来自于用户输入， 1表示第一页， 用于sql做limit查询 limit startPage, length private int currentPageNo = 1; //总数量（表） private int totalCount = 0; //页面容量,每一页展示多少数据 private int pageSize = 0; //总页数: totalCount/pageSize（+1） private int totalPageCount = 1; public int getCurrentPageNo() &#123; return currentPageNo; &#125; public void setCurrentPageNo(int currentPageNo) &#123; if(currentPageNo > 0)&#123; this.currentPageNo = currentPageNo; &#125; &#125; public int getTotalCount() &#123; return totalCount; &#125; public void setTotalCount(int totalCount) &#123; if(totalCount > 0)&#123; this.totalCount = totalCount; //设置总页数 this.setTotalPageCountByRs(); &#125; &#125; public int getPageSize() &#123; return pageSize; &#125; public void setPageSize(int pageSize) &#123; if(pageSize > 0)&#123; this.pageSize = pageSize; &#125; &#125; public int getTotalPageCount() &#123; return totalPageCount; &#125; public void setTotalPageCount(int totalPageCount) &#123; this.totalPageCount = totalPageCount; &#125; public void setTotalPageCountByRs()&#123; if(this.totalCount % this.pageSize == 0)&#123; this.totalPageCount = this.totalCount / this.pageSize; &#125;else if(this.totalCount % this.pageSize > 0)&#123; this.totalPageCount = this.totalCount / this.pageSize + 1; &#125;else&#123; this.totalPageCount = 0; &#125; &#125; &#125; 这段代码是一个用于分页的工具类 PageSupport。它包含了用于处理分页逻辑的属性和方法。 让我们逐个分析这些属性和方法： currentPageNo（当前页码）: 保存当前页的页码，默认为1（表示第一页）。用户可以通过调用 setCurrentPageNo() 方法来设置当前页码。 totalCount（总数量）: 表示总的数据量。用户可以通过调用 setTotalCount() 方法来设置总数量。 pageSize（页面容量）: 每一页显示的数据数量。用户可以通过调用 setPageSize() 方法来设置页面容量。 totalPageCount（总页数）: 表示总的页数，根据总数量和页面容量计算得出。用户可以通过调用 getTotalPageCount() 方法来获取总页数。 setTotalPageCountByRs() 方法: 根据总数量和页面容量计算总页数，并将结果设置给 totalPageCount 属性。 此外，对于一些属性的设置，代码中进行了一些限制条件的判断： currentPageNo 和 pageSize 必须大于0，否则将不进行设置。 totalCount 必须大于0，否则将不进行设置，并且会将 totalPageCount 设置为0。 这个工具类主要用于在分页查询中计算总页数和进行当前页码的设置。 前端 Header下用户管理二级菜单 &lt;li&gt;&lt;a href&#x3D;&quot;$&#123;pageContext.request.contextPath &#125;&#x2F;jsp&#x2F;user.do?method&#x3D;query&quot;&gt;用户管理&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; 点击这个菜单, 跳转到/jsp/user.do?method=query这个请求, user.do是对应的处理请求的Servlet, 问号后面是通过请求传递的参数, 为method = query, Servlet可以根据这个参数对请求的不同类型做对应的处理, 实现Servlet的复用. 用户管理界面: &lt;div class&#x3D;&quot;search&quot;&gt; &lt;form method&#x3D;&quot;get&quot; action&#x3D;&quot;$&#123;pageContext.request.contextPath &#125;&#x2F;jsp&#x2F;user.do&quot;&gt; &lt;input name&#x3D;&quot;method&quot; value&#x3D;&quot;query&quot; class&#x3D;&quot;input-text&quot; type&#x3D;&quot;hidden&quot;&gt; &lt;span&gt;用户名：&lt;&#x2F;span&gt; &lt;input name&#x3D;&quot;queryname&quot; class&#x3D;&quot;input-text&quot; type&#x3D;&quot;text&quot; value&#x3D;&quot;$&#123;queryUserName &#125;&quot;&gt; &lt;span&gt;用户角色：&lt;&#x2F;span&gt; &lt;select name&#x3D;&quot;queryUserRole&quot;&gt; &lt;c:if test&#x3D;&quot;$&#123;roleList !&#x3D; null &#125;&quot;&gt; &lt;option value&#x3D;&quot;0&quot;&gt;--请选择--&lt;&#x2F;option&gt; &lt;c:forEach var&#x3D;&quot;role&quot; items&#x3D;&quot;$&#123;roleList&#125;&quot;&gt; &lt;option &lt;c:if test&#x3D;&quot;$&#123;role.id &#x3D;&#x3D; queryUserRole &#125;&quot;&gt;selected&#x3D;&quot;selected&quot;&lt;&#x2F;c:if&gt; value&#x3D;&quot;$&#123;role.id&#125;&quot;&gt;$&#123;role.roleName&#125;&lt;&#x2F;option&gt; &lt;&#x2F;c:forEach&gt; &lt;&#x2F;c:if&gt; &lt;&#x2F;select&gt; &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;pageIndex&quot; value&#x3D;&quot;1&quot;&#x2F;&gt; &lt;input value&#x3D;&quot;查 询&quot; type&#x3D;&quot;submit&quot; id&#x3D;&quot;searchbutton&quot;&gt; &lt;&#x2F;form&gt; &lt;&#x2F;div&gt; &lt;!--用户--&gt; &#x2F;* 用户的mapping代码 *&#x2F; &lt;input type&#x3D;&quot;hidden&quot; id&#x3D;&quot;totalPageCount&quot; value&#x3D;&quot;$&#123;totalPageCount&#125;&quot;&#x2F;&gt; &lt;c:import url&#x3D;&quot;rollpage.jsp&quot;&gt; &lt;c:param name&#x3D;&quot;totalCount&quot; value&#x3D;&quot;$&#123;totalCount&#125;&quot;&#x2F;&gt; &lt;c:param name&#x3D;&quot;currentPageNo&quot; value&#x3D;&quot;$&#123;currentPageNo&#125;&quot;&#x2F;&gt; &lt;c:param name&#x3D;&quot;totalPageCount&quot; value&#x3D;&quot;$&#123;totalPageCount&#125;&quot;&#x2F;&gt; &lt;&#x2F;c:import&gt; &lt;&#x2F;div&gt; &lt;&#x2F;section&gt; 这段代码展示了一个搜索表单和与分页相关的部分。 &lt;div class=&quot;search&quot;&gt; 标签: 定义一个搜索的区域。 &lt;form&gt; 标签: 定义了一个表单，使用 GET 方法提交到 $&#123;pageContext.request.contextPath&#125;/jsp/user.do。 &lt;input&gt; 标签: 设置了一个隐藏字段 method，值为 &quot;query&quot;，用于指定查询的方法。 &lt;input&gt; 标签: 创建了一个文本输入框，名称为 queryname，值为 $&#123;queryUserName&#125;，显示了之前查询的用户名。 &lt;select&gt; 标签: 创建了一个下拉选择框，名称为 queryUserRole。使用了 JSTL 标签 &lt;c:if&gt; 进行条件判断，如果 roleList 不为 null，将会显示选项。 &lt;option&gt; 标签: 设置了一个默认选项 &lt;option value=&quot;0&quot;&gt;--请选择--&lt;/option&gt;，然后使用 &lt;c:forEach&gt; 遍历 roleList 中的角色，并将角色的名称和 ID 设置为选项的值。使用 &lt;c:if&gt; 判断当前角色是否与 queryUserRole 相等，如果相等，则设置该选项为选中状态。 &lt;input&gt; 标签: 设置了一个隐藏字段 pageIndex，值为 1 &lt;input&gt; 标签: 设置了一个隐藏字段 totalPageCount，值为 $&#123;totalPageCount&#125;。 &lt;c:import&gt; 标签: 导入了一个名为 rollpage.jsp 的页面，并传递了三个参数 totalCount、currentPageNo 和 totalPageCount 的值。 这段代码展示了一个搜索表单，用户可以输入用户名和选择用户角色进行查询。同时，还包含了与分页相关的部分，包括当前页码、总页数和总数量的显示。 我们观察这段代码, 这个form表单的一部分代码, 分别展示了提交的目的地 $&#123;pageContext.request.contextPath &#125;/jsp/user.do 以及 一个隐藏域, 包含一个熟悉 method 值为 query, 是不是, 很熟悉, 没错, 这个Servlet和Header菜单进入管理用户界面所发起的请求是一样的, 也就是说, 是一个Servlet的相同处理过程. 为什么会这样呢? 这是因为查询和展示用户信息(未筛选时) 本质是一样的. &lt;form method&#x3D;&quot;get&quot; action&#x3D;&quot;$&#123;pageContext.request.contextPath &#125;&#x2F;jsp&#x2F;user.do&quot;&gt; &lt;input name&#x3D;&quot;method&quot; value&#x3D;&quot;query&quot; class&#x3D;&quot;input-text&quot; type&#x3D;&quot;hidden&quot;&gt; DAO层 int getUserCount() public int getUserCount(Connection conn, String userName, int userRole) &#123; int count = 0; StringBuffer sql = new StringBuffer(); sql.append(\"SELECT count(1) as count from smbms_user s, smbms_role r where s.userRole = r.id\" ); ArrayList&lt;Object> list = new ArrayList&lt;Object>(); ResultSet rs = null; if(userName != null)&#123; sql.append(\" and userName like ? \"); list.add(\"%\"+userName+\"%\"); &#125; if(userRole > 0)&#123; sql.append(\" and userRole like ? \"); list.add(\"%\"+userRole+\"%\"); &#125; System.out.println(\"sql----> \"+sql.toString()); try &#123; rs = DB.executeQuery(conn, sql.toString(), list.toArray()); while (rs.next()) &#123; count = rs.getInt(\"count\"); &#125; DB.close(null,null,rs); &#125; catch (SQLException e) &#123; throw new RuntimeException(e); &#125; catch (ClassNotFoundException e) &#123; throw new RuntimeException(e); &#125; return count; &#125; 这段代码是一个方法 getUserCount，用于查询符合条件的用户数量。 让我们逐行解释这段代码： int getUserCount(Connection conn, String userName, int userRole): 这是一个方法声明，它接受一个数据库连接对象 conn、一个用户名 userName 和一个用户角色 userRole 作为参数，并返回一个整数表示符合条件的用户数量。 int count = 0;: 初始化一个计数器变量 count，用于存储查询结果的数量。 StringBuffer sql = new StringBuffer();: 创建一个 StringBuffer 对象 sql，用于构建 SQL 查询语句。 sql.append(&quot;SELECT count(1) as count from smbms_user s, smbms_role r where s.userRole = r.id&quot;);: 将基本的查询语句添加到 sql 对象中，查询用户表 smbms_user 和角色表 smbms_role，并通过 userRole 字段进行关联。 ArrayList&lt;Object&gt; list = new ArrayList&lt;Object&gt;();: 创建一个 ArrayList 对象 list，用于存储查询条件的参数值。 ResultSet rs = null;: 初始化一个 ResultSet 对象 rs，用于存储查询结果集。 if(userName != null) &#123; ... &#125;: 如果 userName 不为 null，则将一个条件子句添加到 sql 对象中，使用 LIKE 运算符进行模糊匹配，并将匹配参数添加到 list 中。 if(userRole &gt; 0) &#123; ... &#125;: 如果 userRole 大于 0，则将另一个条件子句添加到 sql 对象中，同样使用 LIKE 运算符进行匹配，并将匹配参数添加到 list 中。 System.out.println(&quot;sql----&gt; &quot;+sql.toString());: 打印输出最终生成的 SQL 查询语句，方便调试和查看。 rs = DB.executeQuery(conn, sql.toString(), list.toArray());: 执行 SQL 查询，并将结果存储在 rs 中。DB.executeQuery() 是一个执行查询语句的方法，接受数据库连接对象、SQL 查询语句和参数值数组作为参数。 while (rs.next()) &#123; ... &#125;: 遍历查询结果集，将每行的计数值存储到 count 变量中。 DB.close(null,null,rs);: 关闭结果集、语句和连接对象，释放资源。DB.close() 是一个关闭数据库资源的方法，接受三个参数：结果集、语句和连接对象。 return count;: 返回符合条件的用户数量。 该方法的作用是查询数据库中符合给定用户名和用户角色条件的用户数量，并将结果返回。 ==getUserList== public List&lt;User> getUserList(Connection conn, String userName, int userRole,int currPage, int pageSize) &#123; List&lt;User> userList = new ArrayList&lt;>(); if(conn != null) &#123; //准备要使用的对象 ArrayList&lt;Object> params = new ArrayList&lt;>(); ResultSet rs = null; StringBuffer sql = new StringBuffer(); try &#123; //编写sql sql.append(\"SELECT * from smbms_user u ,smbms_role r Where u.userRole = r.id \"); //如果用户名不为空， 表示有用户名查询要求，追加限定条件 if(userName != null)&#123; sql.append(\" AND userName like ? \"); params.add(\"%\"+userName+\"%\"); &#125; //同上... if(userRole != 0)&#123; sql.append(\" and userRole = ?\"); params.add(userRole); &#125; sql.append(\" ORDER BY u.creationDate DESC LIMIT ?,? \");//在sql最后追加一个排序和分页 //5 //1 5 //2 10 //3 15 currPage = (currPage-1)*pageSize;//减一的原因就是MYSQL分页的index从0开始 params.add(currPage);//从哪一个下标开始 params.add(pageSize);//从currentPageNo连续取几个 System.out.println(\"sql--->\"+sql.toString()); //执行sql， 返回结果集, ⚠️需要把sql转化为字符串， params 转化为数组 rs = DB.executeQuery(conn,sql.toString(),params.toArray()); if(rs != null)&#123; while (rs.next())&#123; User user = new User(); user.setUserPassword(rs.getString(\"userPassword\")); user.setId(rs.getInt(\"id\")); user.setUserCode(rs.getString(\"userCode\")); user.setUserName(rs.getString(\"userName\")); user.setAddress(rs.getString(\"address\")); user.setBirthday((Date) rs.getObject(\"birthday\")); user.setGender(rs.getInt(\"gender\")); user.setPhone(rs.getString(\"phone\")); user.setIdPicPath(rs.getString(\"idPicPath\")); user.setUserRole(rs.getInt(\"userRole\")); user.setCreatedBy(rs.getInt(\"createdBy\")); user.setCreationDate( rs.getDate(\"creationDate\")); user.setModifyBy(rs.getInt(\"modifyBy\")); user.setModifyDate(rs.getDate(\"modifyDate\")); user.setUserRoleName(rs.getString(\"roleName\")); userList.add(user); // System.out.println(user.toString()); &#125; &#125; DB.close(null,null,rs); &#125; catch (SQLException e) &#123; throw new RuntimeException(e); &#125; catch (ClassNotFoundException e) &#123; throw new RuntimeException(e); &#125; &#125; else &#123; return null; &#125; return userList; &#125; 这段代码是一个方法 getUserList，用于根据给定的用户名、用户角色、当前页码和页面大小获取符合条件的用户列表。 让我们逐行解释这段代码： public List&lt;User&gt; getUserList(Connection conn, String userName, int userRole, int currPage, int pageSize): 这是一个方法声明，它接受一个数据库连接对象 conn、一个用户名 userName、一个用户角色 userRole、当前页码 currPage 和页面大小 pageSize 作为参数，并返回一个 List&lt;User&gt; 类型的用户列表。 List&lt;User&gt; userList = new ArrayList&lt;&gt;();: 创建一个 ArrayList 对象 userList，用于存储用户列表。 if(conn != null) &#123; ... &#125; else &#123; return null; &#125;: 检查数据库连接对象是否为 null，如果为 null，则直接返回 null。 ArrayList&lt;Object&gt; params = new ArrayList&lt;&gt;();: 创建一个 ArrayList 对象 params，用于存储查询条件的参数值。 ResultSet rs = null;: 初始化一个 ResultSet 对象 rs，用于存储查询结果集。 StringBuffer sql = new StringBuffer();: 创建一个 StringBuffer 对象 sql，用于构建 SQL 查询语句。 sql.append(&quot;SELECT * from smbms_user u ,smbms_role r Where u.userRole = r.id &quot;);: 将基本的查询语句添加到 sql 对象中，查询用户表 smbms_user，和角色表smbms_role , 这里进行了多表的联合查询, 是为了给user(Bean)的RoleNa m e赋值, 以便前端使用. if(userName != null) &#123; ... &#125;: 如果 userName 不为 null，则将一个条件子句添加到 sql 对象中，使用 LIKE 运算符进行模糊匹配，并将匹配参数添加到 params 中。 if(userRole != 0) &#123; ... &#125;: 如果 userRole 不为 0，则将另一个条件子句添加到 sql 对象中，限定用户角色，并将角色参数添加到 params 中。 sql.append(&quot; ORDER BY u.creationDate DESC LIMIT ?,? &quot;);: 在查询语句的末尾追加一个排序和分页的部分，按照 creationDate 字段降序排列，并使用 LIMIT 限制查询结果的起始位置和数量。 currPage = (currPage-1)*pageSize;: 计算实际的起始位置，根据当前页码和页面大小，减一是因为 MYSQL 分页的索引从 0 开始。 params.add(currPage);: 将起始位置参数添加到 params 中。 params.add(pageSize);: 将页面大小参数添加到 params 中。 System.out.println(&quot;sql---&gt;&quot;+sql.toString());: 打印输出最终生成的 SQL 查询语句，方便调试和查看。 rs = DB.executeQuery(conn, sql.toString(), params.toArray());: 执行 SQL 查询，并将结果存储在 rs 中。` ​ ==getRoleList== public List&lt;Role> getRolelist(Connection conn, int id) &#123; //prevent roleList List&lt;Role> roleList = new ArrayList&lt;>(); if(conn != null)&#123; try &#123; ResultSet rs = null; List&lt;Object> params = new ArrayList&lt;Object>(); StringBuffer sql = new StringBuffer(); //edit sql expression sql.append(\"SELECT * FROM smbms_role \"); //输入0表查询全表， 输入>0 为sql拼接条件， 同时准备参数列表 if(id > 0)&#123; sql.append(\" WHERE id = ? \"); params.add(id); &#125; System.out.println(\"sql---->\"+sql.toString()); rs = DB.executeQuery(conn, sql.toString(), params.toArray()); if(rs != null)&#123; while (rs.next()) &#123; //赋值 Role role = new Role(); role.setId(rs.getInt(\"id\")); role.setRoleCode(rs.getString(\"roleCode\")); role.setRoleName(rs.getString(\"roleName\")); role.setCreatedBy(rs.getInt(\"createdBy\")); role.setModifyDate(rs.getDate(\"creationDate\")); role.setCreationDate(rs.getDate(\"creationDate\")); role.setModifyBy(rs.getInt(\"modifyBy\")); roleList.add(role); &#125; &#125; &#125; catch (SQLException e) &#123; throw new RuntimeException(e); &#125; catch (ClassNotFoundException e) &#123; throw new RuntimeException(e); &#125; &#125;else &#123; return null; &#125; return roleList; &#125; Service层 ==getUserCount== public int getUserCount(String userName, int UserRole) &#123; int count = 0; Connection conn = null; try &#123; conn = DB.getConnection(); dao = new UserDaoImpl(); count = dao.getUserCount(conn, userName, UserRole); DB.close(conn,null,null); &#125; catch (SQLException e) &#123; throw new RuntimeException(e); &#125; catch (ClassNotFoundException e) &#123; throw new RuntimeException(e); &#125; return count; &#125; ==getUserlist== public List&lt;User> getUserlist(String userName, int userRole,int currPage, int pageSize) &#123; List&lt;User> usersList = new ArrayList&lt;>(); try &#123; Connection conn = DB.getConnection(); dao = new UserDaoImpl(); usersList = dao.getUserList(conn, userName, userRole,currPage, pageSize); DB.close(conn,null,null); &#125; catch (SQLException e) &#123; throw new RuntimeException(e); &#125; catch (ClassNotFoundException e) &#123; throw new RuntimeException(e); &#125; return usersList; &#125; ==getRoleList== public List&lt;Role> getRoleList(int id) &#123; List&lt;Role> roles = new ArrayList&lt;>(); try &#123; Connection conn = DB.getConnection(); RoleDao dao = new RoleDaoImpl(); roles = dao.getRolelist(conn, id); &#125; catch (SQLException e) &#123; throw new RuntimeException(e); &#125; catch (ClassNotFoundException e) &#123; throw new RuntimeException(e); &#125; return roles; &#125; Servlet层 类加载读取配置文件： 目前需要读取的数据有：PAGE_SIZE 用于设置页面大小 static &#123; //读取配置文件 //1、创建properties对象 Properties properties = new Properties(); //2、通过类加载器加载资源文件为字节输入流 InputStream in = DB.class.getClassLoader().getResourceAsStream(\"db.properties\"); try &#123; properties.load(in); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; PAGE_SIZE = Integer.parseInt(properties.getProperty(\"PAGE_SIZE\")); &#125; protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; String method = req.getParameter(\"method\"); if(\"savepwd\".equals(method))&#123; savePwd(req, resp); &#125; else if(\"pwdmodify\".equals(method))&#123; pwdModify(req, resp); &#125; else if (\"query\".equals(method)) &#123; query(req, resp); &#125; &#125; 这段代码的作用是根据不同的method值调用不同的方法处理GET请求，实现不同的功能操作。 具体实现: protected void query(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; //1. 从前端获取用户输入的参数 queryname -> userName，queryUserRole -> userRole,pageIndex String userName = req.getParameter(\"queryname\"); String userRole = req.getParameter(\"queryUserRole\"); String pageIndex = req.getParameter(\"pageIndex\"); // 检验参数的合法性 if( userName == null)&#123; userName =\"\"; &#125; if(userRole == null || userRole.equals(\"\"))&#123; userRole = \"0\"; &#125; if(pageIndex == null || pageIndex.equals(\"\"))&#123; pageIndex = \"1\"; &#125; //3. 准备前端需要的参数： queryUserName，queryUserRole ,roleList，userList, String queryUserName = userName; String queryUserRole = userRole; List&lt;Role> roleList; List&lt;User> userList; // 以及下列参数： totalPageCount（总页数），totalCount（查询到的用户数），currentPageNo（当前页） // 这些参数的获取需要先调用userService.getUserCount查询用户数， 然后调用PageSupport提供分页支持 UserServiceImpl userService = new UserServiceImpl(); RoleServiceImpl roleService = new RoleServiceImpl(); int totalCount = userService.getUserCount(userName, Integer.parseInt(userRole)); PageSupport pageSupport = new PageSupport(); pageSupport.setPageSize(PAGE_SIZE); pageSupport.setTotalCount(totalCount); pageSupport.setTotalPageCountByRs(); pageSupport.setCurrentPageNo(Integer.parseInt(pageIndex)); int totalPageCount = pageSupport.getTotalPageCount(); // 查询用户和角色 userList = userService.getUserlist(userName, Integer.parseInt(userRole), Integer.parseInt(pageIndex), PAGE_SIZE); roleList = roleService.getRoleList(0); //2. 根据参数返回用户表和角色表 req.setAttribute(\"roleList\",roleList); req.setAttribute(\"userList\",userList); //3. 返回用户需要的参数 req.setAttribute(\"queryUserName\",queryUserName); req.setAttribute(\"queryUserRole\",queryUserRole); req.setAttribute(\"totalPageCount\", totalPageCount); req.setAttribute(\"totalCount\",totalCount); req.setAttribute(\"currentPageNo\",pageIndex); //4. 转发到jsp/userlist.jsp， 要使用转发而不是重定向， 便于携带参数 req.getRequestDispatcher(\"userlist.jsp\").forward(req,resp); &#125; 这段代码实现了一个查询用户的功能，以下是代码实现的步骤： 从前端获取用户输入的参数：userName（用户名），userRole（用户角色），pageIndex（当前页码）。 根据参数返回用户表和角色表，并将其设置为请求的属性，供jsp文件使用。 准备前端需要的参数： queryUserName（查询用户名），queryUserRole（查询用户角色），roleList（角色列表），userList（用户列表）,totalPageCount（总页数），totalCount（查询到的用户数），currentPageNo（当前页）。 查询用户数，并设置pageSupport的totalCount，currentPageNo，pageSize属性。 查询用户和角色，并将其设置为请求的属性，供jsp文件使用。 将前端需要的参数设置为请求的属性，供jsp文件使用。 将请求转发到userlist.jsp文件，便于携带参数。 其中，代码中调用了UserService类和RoleService类的方法实现具体的查询操作。同时，代码中也对获取的参数进行了一些合法性的检验和设置默认值的操作。最终，将查询到的结果设置为请求的属性，通过转发的方式返回到jsp文件中供前端展示。 用户删除实现 在前端页面找到用户删除的按钮(锚), href是: javascript:, &lt;td&gt; &lt;span&gt;&lt;a class&#x3D;&quot;viewUser&quot; href&#x3D;&quot;javascript:;&quot; userid&#x3D;$&#123;user.id &#125; username&#x3D;$&#123;user.userName &#125;&gt;&lt;img src&#x3D;&quot;$&#123;pageContext.request.contextPath &#125;&#x2F;statics&#x2F;images&#x2F;read.png&quot; alt&#x3D;&quot;查看&quot; title&#x3D;&quot;查看&quot;&#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; &lt;span&gt;&lt;a class&#x3D;&quot;modifyUser&quot; href&#x3D;&quot;javascript:;&quot; userid&#x3D;$&#123;user.id &#125; username&#x3D;$&#123;user.userName &#125;&gt;&lt;img src&#x3D;&quot;$&#123;pageContext.request.contextPath &#125;&#x2F;statics&#x2F;images&#x2F;xiugai.png&quot; alt&#x3D;&quot;修改&quot; title&#x3D;&quot;修改&quot;&#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; &lt;span&gt;&lt;a class&#x3D;&quot;deleteUser&quot; href&#x3D;&quot;javascript:;&quot; userid&#x3D;$&#123;user.id &#125; username&#x3D;$&#123;user.userName &#125;&gt;&lt;img src&#x3D;&quot;$&#123;pageContext.request.contextPath &#125;&#x2F;statics&#x2F;images&#x2F;schu.png&quot; alt&#x3D;&quot;删除&quot; title&#x3D;&quot;删除&quot;&#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; &lt;&#x2F;td&gt; 找到对应的javascript $(\".deleteUser\").on(\"click\",function()&#123; userObj = $(this); changeDLGContent(\"你确定要删除用户【\"+userObj.attr(\"username\")+\"】吗？\"); openYesOrNoDLG(); &#125;); 当删除被点击后, js调用函数userObj, 接着我们去看这个函数 function deleteUser(obj)&#123; $.ajax(&#123; type:\"GET\", url:path+\"/jsp/user.do\", data:&#123;method:\"deluser\",uid:obj.attr(\"userid\")&#125;, dataType:\"json\", success:function(data)&#123; if(data.delResult == \"true\")&#123;//删除成功：移除删除行 cancleBtn(); obj.parents(\"tr\").remove(); &#125;else if(data.delResult == \"false\")&#123;//删除失败 changeDLGContent(\"对不起，删除用户【\"+obj.attr(\"username\")+\"】失败\"); &#125;else if(data.delResult == \"notexist\")&#123; changeDLGContent(\"对不起，用户【\"+obj.attr(\"username\")+\"】不存在\"); &#125; &#125;, error:function(data)&#123; changeDLGContent(\"对不起，删除失败\"); &#125; &#125;); &#125; 这段代码是一个 JavaScript 函数，它使用 jQuery 的 $.ajax 方法发送一个 GET 请求到服务器。以下是对代码的分析： function deleteUser(obj)：这是一个命名为 deleteUser 的函数，它接受一个参数 obj，表示要删除的用户对象。 $.ajax：这是 jQuery 提供的一个函数，用于发送 AJAX 请求到服务器。 AJAX 请求的配置选项包括： type: &quot;GET&quot;：指定请求类型为 GET。 url: path + &quot;/jsp/user.do&quot;：指定请求的 URL 地址，其中 path 是一个变量或常量，表示服务器路径。 data: &#123;method: &quot;deluser&quot;, uid: obj.attr(&quot;userid&quot;)&#125;：指定请求发送的数据，包括 method 和 uid 两个参数。method 的值为 &quot;deluser&quot;，uid 的值通过 obj.attr(&quot;userid&quot;) 获取。 dataType: &quot;json&quot;：指定预期的响应数据类型为 JSON。 success：这是一个成功回调函数，在服务器成功响应时被调用。它接受一个参数 data，表示从服务器返回的数据。函数内部根据返回的数据执行不同的操作： 如果 data.delResult 的值为 &quot;true&quot;，表示删除成功。函数调用 cancleBtn() 取消按钮，并移除 obj 对应的父级 &lt;tr&gt; 行。 如果 data.delResult 的值为 &quot;false&quot;，表示删除失败。函数调用 changeDLGContent 修改对话框的内容，显示删除失败的提示信息。 如果 data.delResult 的值为 &quot;notexist&quot;，表示用户不存在。函数调用 changeDLGContent 修改对话框的内容，显示用户不存在的提示信息。 error：这是一个错误回调函数，在请求发生错误时被调用。它接受一个参数 data，表示错误信息。函数调用 changeDLGContent 修改对话框的内容，显示删除失败的提示信息。 这段代码用于通过 AJAX 请求向服务器发送删除用户的请求，并根据服务器返回的结果执行相应的操作。成功时移除对应的行，失败时显示错误提示信息。 通过这些信息,我们可以得知如何编写我们的后台程序 编写对应的Servlet, 根据method值不同, 调用delUser函数 编写请求处理函数delUser delUser调用Service删除用户, 并返回结果 如果删除用户成功, 返回true或者受影响行数为1, 通过响应向前端返回数据delResult = true 如果Service返回false或者受影响行数为0, 向前端返回delResult = no exist, 表示删除的用户不存在. 出现异常则返回delResult = false(在这里是用户权限不够时返回会false) protected void delUser(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException&#123; //1. 获取用户角色， 如果用户不是系统管理员， 则没有删除用户的权限 User o = (User) req.getSession().getAttribute(Constant.USER_SESSION); Map&lt;String, String> map = new HashMap&lt;>(); if(o.getUserRole() == 1)&#123; String uid = req.getParameter(\"uid\"); service = new UserServiceImpl(); boolean res = service.delUser(Integer.parseInt(uid)); if(res)&#123; map.put(\"delResult\", \"true\"); &#125; else &#123; map.put(\"delResult\", \"notexist\"); &#125; &#125; else &#123; map.put(\"delResult\",\"false\"); &#125; //封装json数据， 并写到前端 PrintWriter writer = resp.getWriter(); writer.write(JSONArray.toJSONString(map)); writer.flush(); &#125; 接下来, 我们还需要编写对应的Service层以及Dao层代码, 由于service实际上并没有做什么事, 这里只展示Dao层代码 public int delUser(Connection conn, int id) &#123; int affectedRow = 0; if(conn != null)&#123; try &#123; String sql = \"Delete from smbms_user where id = ?\"; Object[] params = &#123;id&#125;; affectedRow = DB.executeUpdate(conn, sql, params); &#125; catch (SQLException e) &#123; throw new RuntimeException(e); &#125; &#125; return affectedRow; &#125; 这段代码及其简单, 只需要写一段sql, 然后交给DB去执行就好了, DB这个类会预处理sql, 以及给占位符赋值, 最后执行sql返回结果. 查看用户实现 和删除用户类似, 找到对应的js请求 $(\".viewUser\").on(\"click\",function()&#123; //将被绑定的元素（a）转换成jquery对象，可以使用jquery方法 var obj = $(this); window.location.href=path+\"/jsp/user.do?method=view&amp;uid=\"+ obj.attr(\"userid\"); &#125;); 编写Servlet protected void view(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException&#123; String uid = req.getParameter(\"uid\"); service = new UserServiceImpl(); User user = service.findById(Integer.parseInt(uid)); req.setAttribute(\"user\", user); req.getRequestDispatcher(req.getContextPath()+\"/jsp/userview.jsp\").forward(req, resp); &#125; 编写dao层, service层实现 public User findById(int id) &#123; //2. 初始化参数 Object[] params = &#123;id&#125;; ResultSet set; sql = \"SELECT * FROM smbms_user,smbms_role Where smbms_user.userRole = smbms_role.id and smbms_user.id = ?\"; try &#123; conn = DB.getConnection(); set = DB.executeQuery(conn, sql,params); if(set != null)&#123; user = new User(); while (set.next()) &#123; user.setUserRoleName(set.getString(\"roleName\")); user.setUserPassword(set.getString(\"userPassword\")); user.setId(set.getInt(\"id\")); user.setUserCode(set.getString(\"userCode\")); user.setUserName(set.getString(\"userName\")); user.setAddress(set.getString(\"address\")); user.setBirthday((Date) set.getObject(\"birthday\")); user.setGender(set.getInt(\"gender\")); user.setPhone(set.getString(\"phone\")); user.setIdPicPath(set.getString(\"idPicPath\")); user.setUserRole(set.getInt(\"userRole\")); user.setCreatedBy(set.getInt(\"createdBy\")); user.setCreationDate( set.getDate(\"creationDate\")); user.setModifyBy(set.getInt(\"modifyBy\")); user.setModifyDate(set.getDate(\"modifyDate\")); user.setWorkPicPath(\"workPicPath\"); System.out.println(user.toString()); &#125; &#125; else &#123; return null; &#125; //关闭链接和结果集 DB.close(conn,null,set); &#125; catch (SQLException e) &#123; throw new RuntimeException(e); &#125; catch (ClassNotFoundException e) &#123; throw new RuntimeException(e); &#125; return user; &#125; 修改用户实现 重复重复再重复… $(\".modifyUser\").on(\"click\",function()&#123; var obj = $(this); window.location.href=path+\"/jsp/user.do?method=modify&amp;uid=\"+ obj.attr(\"userid\"); &#125;); protected void modify(HttpServletRequest req, HttpServletResponse resp)throws ServletException, IOException&#123; String uid = req.getParameter(\"uid\"); service = new UserServiceImpl(); User user = service.findById(Integer.parseInt(uid)); req.setAttribute(\"user\", user); req.getRequestDispatcher(req.getContextPath()+\"/jsp/usermodify.jsp\").forward(req, resp); &#125; 和之前不同的是, 这次修改用户指向一个新的jsp页面, 也就是修改用户的页面. 也就是说, 删除用户的请求提交以后, 我们需要把这个请求转发到/jsp/usermodify.jsp这个URL对应的jsp页面去, 由于这个jsp页面需要修改前的user数据, 我们需要查询对应的id,得到user数据后把数据传递给usermodify.jsp这个jsp页面, jsp页面需要这些数据来向用户展示修改前的数据. 下面我们去看这个jsp页面 &lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt; &lt;%@include file&#x3D;&quot;&#x2F;jsp&#x2F;common&#x2F;head.jsp&quot;%&gt; &lt;div class&#x3D;&quot;right&quot;&gt; &lt;div class&#x3D;&quot;location&quot;&gt; &lt;strong&gt;你现在所在的位置是:&lt;&#x2F;strong&gt; &lt;span&gt;用户管理页面 &gt;&gt; 用户修改页面&lt;&#x2F;span&gt; &lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;providerAdd&quot;&gt; &lt;form id&#x3D;&quot;userForm&quot; name&#x3D;&quot;userForm&quot; method&#x3D;&quot;post&quot; action&#x3D;&quot;$&#123;pageContext.request.contextPath &#125;&#x2F;jsp&#x2F;user.do&quot;&gt; &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;method&quot; value&#x3D;&quot;modifyexe&quot;&gt; &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;uid&quot; value&#x3D;&quot;$&#123;user.id &#125;&quot;&#x2F;&gt; &lt;div&gt; &lt;label for&#x3D;&quot;userName&quot;&gt;用户名称：&lt;&#x2F;label&gt; &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;userName&quot; id&#x3D;&quot;userName&quot; value&#x3D;&quot;$&#123;user.userName &#125;&quot;&gt; &lt;font color&#x3D;&quot;red&quot;&gt;&lt;&#x2F;font&gt; &lt;&#x2F;div&gt; &lt;div&gt; &lt;label &gt;用户性别：&lt;&#x2F;label&gt; &lt;select name&#x3D;&quot;gender&quot; id&#x3D;&quot;gender&quot;&gt; &lt;c:choose&gt; &lt;c:when test&#x3D;&quot;$&#123;user.gender &#x3D;&#x3D; 1 &#125;&quot;&gt; &lt;option value&#x3D;&quot;1&quot; selected&#x3D;&quot;selected&quot;&gt;男&lt;&#x2F;option&gt; &lt;option value&#x3D;&quot;2&quot;&gt;女&lt;&#x2F;option&gt; &lt;&#x2F;c:when&gt; &lt;c:otherwise&gt; &lt;option value&#x3D;&quot;1&quot;&gt;男&lt;&#x2F;option&gt; &lt;option value&#x3D;&quot;2&quot; selected&#x3D;&quot;selected&quot;&gt;女&lt;&#x2F;option&gt; &lt;&#x2F;c:otherwise&gt; &lt;&#x2F;c:choose&gt; &lt;&#x2F;select&gt; &lt;&#x2F;div&gt; &lt;div&gt; &lt;label &gt;出生日期：&lt;&#x2F;label&gt; &lt;input type&#x3D;&quot;text&quot; Class&#x3D;&quot;Wdate&quot; id&#x3D;&quot;birthday&quot; name&#x3D;&quot;birthday&quot; value&#x3D;&quot;$&#123;user.birthday &#125;&quot; readonly&#x3D;&quot;readonly&quot; onclick&#x3D;&quot;WdatePicker();&quot;&gt; &lt;font color&#x3D;&quot;red&quot;&gt;&lt;&#x2F;font&gt; &lt;&#x2F;div&gt; &lt;div&gt; &lt;label &gt;用户电话：&lt;&#x2F;label&gt; &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;phone&quot; id&#x3D;&quot;phone&quot; value&#x3D;&quot;$&#123;user.phone &#125;&quot;&gt; &lt;font color&#x3D;&quot;red&quot;&gt;&lt;&#x2F;font&gt; &lt;&#x2F;div&gt; &lt;div&gt; &lt;label &gt;用户地址：&lt;&#x2F;label&gt; &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;address&quot; id&#x3D;&quot;address&quot; value&#x3D;&quot;$&#123;user.address &#125;&quot;&gt; &lt;&#x2F;div&gt; &lt;div&gt; &lt;label &gt;用户角色：&lt;&#x2F;label&gt; &lt;!-- 列出所有的角色分类 --&gt; &lt;input type&#x3D;&quot;hidden&quot; value&#x3D;&quot;$&#123;user.userRole&#125;&quot; id&#x3D;&quot;rid&quot; &#x2F;&gt; &lt;select name&#x3D;&quot;userRole&quot; id&#x3D;&quot;userRole&quot;&gt;&lt;&#x2F;select&gt; &lt;font color&#x3D;&quot;red&quot;&gt;&lt;&#x2F;font&gt; &lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;providerAddBtn&quot;&gt; &lt;input type&#x3D;&quot;button&quot; name&#x3D;&quot;save&quot; id&#x3D;&quot;save&quot; value&#x3D;&quot;保存&quot; &#x2F;&gt; &lt;input type&#x3D;&quot;button&quot; id&#x3D;&quot;back&quot; name&#x3D;&quot;back&quot; value&#x3D;&quot;返回&quot;&#x2F;&gt; &lt;&#x2F;div&gt; &lt;&#x2F;form&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;section&gt; &lt;%@include file&#x3D;&quot;&#x2F;jsp&#x2F;common&#x2F;foot.jsp&quot; %&gt; &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;$&#123;pageContext.request.contextPath &#125;&#x2F;statics&#x2F;js&#x2F;usermodify.js&quot;&gt;&lt;&#x2F;script&gt; 先观察表单提交的目的地, &#123;pageContext.request.contextPath &#125;/jsp/user.do, 对应一个Servlet, 但是这里并没有提交的按钮, 但是我发现这里有一个usermodify.js的脚本文件, 定位到这个脚本文件 var userName = null; var birthday = null; var phone = null; var userRole = null; var saveBtn = null; var backBtn = null; $(function()&#123; userName = $(\"#userName\"); birthday = $(\"#birthday\"); phone = $(\"#phone\"); userRole = $(\"#userRole\"); saveBtn = $(\"#save\"); backBtn = $(\"#back\"); userName.next().html(\"*\"); birthday.next().html(\"*\"); phone.next().html(\"*\"); userRole.next().html(\"*\"); $.ajax(&#123; type:\"GET\",//请求类型 url:path+\"/jsp/user.do\",//请求的url data:&#123;method:\"getrolelist\"&#125;,//请求参数 dataType:\"json\",//ajax接口（请求url）返回的数据类型 success:function(data)&#123;//data：返回数据（json对象） if(data != null)&#123; var rid = $(\"#rid\").val(); userRole.html(\"\"); var options = \"&lt;option value=\\\"0\\\">请选择&lt;/option>\"; for(var i = 0; i &lt; data.length; i++)&#123; if(rid != null &amp;&amp; rid != undefined &amp;&amp; data[i].id == rid )&#123; options += \"&lt;option selected=\\\"selected\\\" value=\\\"\"+data[i].id+\"\\\" >\"+data[i].roleName+\"&lt;/option>\"; &#125;else&#123; options += \"&lt;option value=\\\"\"+data[i].id+\"\\\" >\"+data[i].roleName+\"&lt;/option>\"; &#125; &#125; userRole.html(options); &#125; &#125;, error:function(data)&#123;//当访问时候，404，500 等非200的错误状态码 validateTip(userRole.next(),&#123;\"color\":\"red\"&#125;,imgNo+\" 获取用户角色列表error\",false); &#125; &#125;); userName.on(\"focus\",function()&#123; validateTip(userName.next(),&#123;\"color\":\"#666666\"&#125;,\"* 用户名长度必须是大于1小于10的字符\",false); &#125;).on(\"blur\",function()&#123; if(userName.val() != null &amp;&amp; userName.val().length > 1 &amp;&amp; userName.val().length &lt; 10)&#123; validateTip(userName.next(),&#123;\"color\":\"green\"&#125;,imgYes,true); &#125;else&#123; validateTip(userName.next(),&#123;\"color\":\"red\"&#125;,imgNo+\" 用户名输入的不符合规范，请重新输入\",false); &#125; &#125;); birthday.on(\"focus\",function()&#123; validateTip(birthday.next(),&#123;\"color\":\"#666666\"&#125;,\"* 点击输入框，选择日期\",false); &#125;).on(\"blur\",function()&#123; if(birthday.val() != null &amp;&amp; birthday.val() != \"\")&#123; validateTip(birthday.next(),&#123;\"color\":\"green\"&#125;,imgYes,true); &#125;else&#123; validateTip(birthday.next(),&#123;\"color\":\"red\"&#125;,imgNo + \" 选择的日期不正确,请重新输入\",false); &#125; &#125;); phone.on(\"focus\",function()&#123; validateTip(phone.next(),&#123;\"color\":\"#666666\"&#125;,\"* 请输入手机号\",false); &#125;).on(\"blur\",function()&#123; var patrn=/^(13[0-9]|15[0-9]|18[0-9])\\d&#123;8&#125;$/; if(phone.val().match(patrn))&#123; validateTip(phone.next(),&#123;\"color\":\"green\"&#125;,imgYes,true); &#125;else&#123; validateTip(phone.next(),&#123;\"color\":\"red\"&#125;,imgNo + \" 您输入的手机号格式不正确\",false); &#125; &#125;); userRole.on(\"focus\",function()&#123; validateTip(userRole.next(),&#123;\"color\":\"#666666\"&#125;,\"* 请选择用户角色\",false); &#125;).on(\"blur\",function()&#123; if(userRole.val() != null &amp;&amp; userRole.val() > 0)&#123; validateTip(userRole.next(),&#123;\"color\":\"green\"&#125;,imgYes,true); &#125;else&#123; validateTip(userRole.next(),&#123;\"color\":\"red\"&#125;,imgNo+\" 请重新选择用户角色\",false); &#125; &#125;); saveBtn.on(\"click\",function()&#123; userName.blur(); phone.blur(); birthday.blur(); userRole.blur(); if(userName.attr(\"validateStatus\") == \"true\" &amp;&amp; phone.attr(\"validateStatus\") == \"true\" &amp;&amp; birthday.attr(\"validateStatus\") == \"true\" &amp;&amp; userRole.attr(\"validateStatus\") == \"true\")&#123; if(confirm(\"是否确认要提交数据？\"))&#123; $(\"#userForm\").submit(); &#125; &#125; &#125;); backBtn.on(\"click\",function()&#123; //alert(\"modify: \"+referer); if(referer != undefined &amp;&amp; null != referer &amp;&amp; \"\" != referer &amp;&amp; \"null\" != referer &amp;&amp; referer.length > 4)&#123; window.location.href = referer; &#125;else&#123; history.back(-1); &#125; &#125;); &#125;); 直接丢给chatGPT分析: 代码的核心部分是以下部分： $.ajax(&#123; type: \"GET\", url: path + \"/jsp/user.do\", data: &#123; method: \"getrolelist\" &#125;, dataType: \"json\", success: function(data) &#123; if (data != null) &#123; var rid = $(\"#rid\").val(); userRole.html(\"\"); var options = \"&lt;option value=\\\"0\\\">请选择&lt;/option>\"; for (var i = 0; i &lt; data.length; i++) &#123; if (rid != null &amp;&amp; rid != undefined &amp;&amp; data[i].id == rid) &#123; options += \"&lt;option selected=\\\"selected\\\" value=\\\"\" + data[i].id + \"\\\" >\" + data[i].roleName + \"&lt;/option>\"; &#125; else &#123; options += \"&lt;option value=\\\"\" + data[i].id + \"\\\" >\" + data[i].roleName + \"&lt;/option>\"; &#125; &#125; userRole.html(options); &#125; &#125;, error: function(data) &#123; validateTip(userRole.next(), &#123; \"color\": \"red\" &#125;, imgNo + \" 获取用户角色列表error\", false); &#125; &#125;); 这部分代码使用了 $.ajax 函数发起一个 GET 请求，请求的目标 URL 是 path + &quot;/jsp/user.do&quot;。请求的数据参数中包含了一个名为 method 的参数，其值为 &quot;getrolelist&quot;。预期的响应数据类型为 JSON。 在成功回调函数中，首先判断返回的数据 data 是否为非空。如果不为空，则继续执行后续逻辑。 通过获取 $(&quot;#rid&quot;).val() 获取一个表示角色的 ID 值。 接下来，清空 userRole 元素的内容，然后使用循环遍历返回的数据数组 data。对于每个数据项，根据其 ID 值和当前选中的角色 ID (rid) 进行比较。如果两者相等，说明该选项应该被选中，否则为普通选项。在循环过程中，动态生成了一段 HTML 字符串 options，包含了所有的选项。 最后，将生成的选项字符串设置为 userRole 元素的 HTML 内容，从而在页面上显示这些选项。 在错误回调函数中，对获取用户角色列表出错的情况进行处理，调用 validateTip 函数显示相应的错误提示信息。 该部分代码的核心功能是通过 AJAX 请求获取用户角色列表，并根据返回的数据动态生成下拉选项，用于用户在表单中选择角色。 所以, 我们需要一个servlet来处理这段ajax请求, 这个请求需要一个角色表 ,整理前端提供的数据, 以及前端需要的数据 提供的数据: name=&quot;method&quot; value=&quot;modifyexe&quot; name=&quot;uid&quot; value=&quot;$&#123;user.id &#125; name=&quot;userName&quot; value=&quot;$&#123;user.userName &#125; name=&quot;gender&quot; name=&quot;birthday&quot; value=&quot;$&#123;user.birthday &#125; name=&quot;phone&quot; value=&quot;$&#123;user.phone &#125; name=&quot;address&quot; value=&quot;$&#123;user.address &#125; name=&quot;userRole&quot; 需要的数据 name=&quot;birthday&quot; value=&quot;$&#123;user.birthday &#125; name=&quot;phone&quot; value=&quot;$&#123;user.phone &#125; name=&quot;address&quot; value=&quot;$&#123;user.address &#125; name=&quot;uid&quot; value=&quot;$&#123;user.id &#125; name=&quot;userName&quot; value=&quot;$&#123;user.userName &#125; 角色表 下面我们来编写servlet 通过method的值对请求做不同处理, 这里有三个个请求, 分别是 method=modify method = getrolelist metho=modidyexe method=modify 这个请求当用户点击修改按钮时被触发, 目的是导航到用户修改页面, 以及返回修改用户的信息 method = getrolelist 这个请求当用户跳转到用户修改页面触发, 目的是通过 AJAX 请求获取用户角色列表，并根据返回的数据动态生成下拉选项，用于用户在表单中选择角色。 metho=modidyexe, 这个请求当用户提交修改信息的时候触发, 修改数据库内容 一个复用的Servlet, 用来响应对用户表进行操作的请求. (实际上组合查询了角色表) protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; String method = req.getParameter(\"method\"); if(\"savepwd\".equals(method))&#123; savePwd(req, resp); &#125; else if(\"pwdmodify\".equals(method))&#123; pwdModify(req, resp); &#125; else if (\"query\".equals(method)) &#123; query(req, resp); &#125; else if (\"add\".equals(method)) &#123; addUser(req, resp); &#125; else if (\"getrolelist\".equals(method)) &#123; getRoleList(req, resp); &#125; else if (\"ucexist\".equals(method)) &#123; //ajax后台验证--userCode是否已存在 // //user.do?method=ucexist&amp;userCode=** isUserCodeExit(req, resp); &#125; else if (\"view\".equals(method)) &#123; view(req, resp); &#125; else if (\"deluser\".equals(method)) &#123; delUser(req, resp); &#125; else if (\"modifyexe\".equals(method)) &#123; modifyExe(req, resp); &#125; else if (\"modify\".equals(method)) &#123; modify(req, resp); &#125; &#125; ​ ==getRoleList(req, resp)== protected void getRoleList(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; RoleServiceImpl roleService = new RoleServiceImpl(); List&lt;Role> roleList = roleService.getRoleList(0); resp.setContentType(\"application/json\"); resp.setCharacterEncoding(\"UTF-8\"); PrintWriter writer = resp.getWriter(); writer.write(JSONArray.toJSONString(roleList)); writer.flush(); writer.close(); &#125; ​ ==modify(req, resp);== protected void modify(HttpServletRequest req, HttpServletResponse resp)throws ServletException, IOException&#123; String uid = req.getParameter(\"uid\"); service = new UserServiceImpl(); User user = service.findById(Integer.parseInt(uid)); req.setAttribute(\"user\", user); req.getRequestDispatcher(req.getContextPath()+\"/jsp/usermodify.jsp\").forward(req, resp); &#125; ​ ==modifyExe(req, resp);== protected void modifyExe(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException &#123; // 1. 从前端获取参数: userCode userName password gender birthday phone address userRole Map&lt;String, Object> map = new HashMap&lt;>(); String uid = req.getParameter(\"uid\"); map.put(\"id\",uid); map.put(\"userName\",req.getParameter(\"userName\")); map.put(\"gender\",Integer.parseInt(req.getParameter(\"gender\"))); map.put(\"phone\",req.getParameter(\"phone\")); map.put(\"address\",req.getParameter(\"address\")); map.put(\"userRole\",Integer.parseInt(req.getParameter(\"userRole\"))); String birthday = req.getParameter(\"birthday\"); Date date = null; try &#123; date = new SimpleDateFormat(\"yyyy-MM-dd\").parse(birthday); map.put(\"birthday\",date); &#125; catch (ParseException e) &#123; throw new RuntimeException(e); &#125; // 2. 封装数据 User o = (User) req.getSession().getAttribute(Constant.USER_SESSION); map.put(\"modifyBy\",o.getId()); Date modifyDate = new Date(); map.put(\"modifyDate\",new Date()); //3. 调用service service = new UserServiceImpl(); for (String key : map.keySet()) &#123; boolean res = service.updateUser(Integer.parseInt(uid), key, map.get(key)); &#125; resp.sendRedirect(req.getContextPath()+\"/jsp/user.do?method=query\"); &#125; 剩下的编写Service以及Dao层实现对数据库的操作, 整个功能就实现了. 这里不在叙述. 尾巴 ​ 到这里, 这个项目的搭建算是告一段落了. 在这个项目中, 我基本上是从零开始搭建. 说来惭愧, 现在大三下下学期已经过半, 学校的JavaEE也结课两周. 我对整个课程却没什么印象, 这当然也和我根本没去上几次课有关系, 除了实验课我基本就不去了. 这也不是我不想学, 只是觉得要是跟着老师学我会更糟. 老师上课完全不顾学生, 只将电脑的idea投屏到投影仪上便能自顾自的讲一节课. 投影仪本来亮度就不高, idea字体又小,完全不知道怎么听. 听过几次我就是在不想去了. ​ 加之又有考研的计划, 基本都呆在图书馆学习高数和计算机网络了, JavaEE基本上没怎么碰了, 连分组的实践也是完全丢下给小组其他同学了(小组实践能不能从大学消失啊). 小组其他几个也都是混子, 这留下我的旁边床铺的室友了, 这让我感觉实在很惭愧. 当然最后的结果也是压根没人管这个小组实践了, 直到deadline的前一天晚上, 这事才被重新提起. 当然也只能从github匆匆找一个应付交作业了. ​ 那么如果总结这半学期学到了什么的话, 只剩下把计算机网络算是完完整整的学完了, 不过这也是补了之前欠下的债了. 高数我已经接近一个月没有看过了, 现在也已经没什么印象了, 不知道考研要怎么办了. 我也已经做好了二战的准备了. ​ 写这个项目的契机, 也是学校又莫名其妙多了个课程设计, 相比学校的什么破实验实践, 我很喜欢学校的课程设计, 上次操作系统的实践设计是关于xv6的, 那次让我对操作系统的理解提升了很多, 现在我都不舍得删掉电脑里的qemu模拟器. 不过这和老师没什么关系, 老师基本上只是把课题扔在那, 我们自己独立完成. 但也同时我有了更多的时间去完成这个课程设计, 没有其他课程任务的干扰, 我可以全心全意的投入到这个课程设计中去. 这很符合我自己的学习习惯, 我更喜欢把一个课程学完了, 或者是一个阶段的任务完成了, 才去开始下一项学习计划. 相比于去课堂上听无意义的课程, 这种把时间留给学生自己的做法, 在这个大学老师基本上起不到什么帮助的破大学里, 显然是更值得的. ​ 说回写这个项目的契机, 也是学校的课程设计. 到这个时候所以的课程也已经结束了, 我本以为可以完完全全的开始自己的学习计划的时候, 来这么一个任务一开始我是蛮不开心的. 这次的任务是写一个图书管理系统, 狂神这个课程写了一个超市管理系统, 但是这些什么学生管理系统啊, 图书管理系统之类的, 都没区别, 随便改一改就可以. ​ 这次的课程设计分为了几个小组, 和其他小组不同的是, 我们小组的老师要求每个同学独立完成, 这让我很喜这个老师的做法. 而我们每天上课的内容也就是在自习室写自己的项目罢了, 除了早上八点要爬上11楼外, 我没什么抱怨的. ​ 接下来的学习计划, 我准备把CSAPP的内容补上, 这个从大一开始便一直计划要学的内容, 到现在也没开始, 我真是废物啊. 如果可以穿越回大一到话, 当然是带着现在的记忆穿越回去, 不然结局也是淹没在大学的无意义的课程中了. 不过带着记忆的话, 与其幻想这个不切实际的梦, 这个幻想其本质和我接下把自己缺失的补上是一样的. ​ 即使我对自己的能力不满意, 但我也确实没什么可以抱怨的, 毕竟这就是我, 这才是我. 除了暑假的时间顾着玩了, 大学的生活我的学习步伐一直都是踏踏实实的. 我不得不说我已经够努力了, 靠着我一个人, 在一个远离家乡的城市. 这个指望不上老师的地方, 我做到现在我已经和满意了, 从大一到现在的我, 以及学会了太多太多, 完完全全成长了很多, 学到很多. 剩下的遗憾, 留下没有一个好的环境, 一个良师益友引导我. 不知道这个遗憾能不能在研究生生活中补上呢, 至少现在先考上一个好多大学, 补完这些遗憾吧. 加油啊, 自己. 以下是改为图书管理系统的字段替换: 供应商表-&gt; 图书 ISBN：-&gt;provider.proCode 书名：-&gt;provider.proName 作者：-&gt;provider.proContact 定价：-&gt;provider.proPhone 出版社-&gt;provider.proFax 分类：-&gt;provider.proDesc 订单管理-&gt;借阅记录管理 未归还 -&gt; queryIsPayment &#x3D;&#x3D; 1 已归还-&gt; queryIsPayment &#x3D;&#x3D; 2 用户：-&gt;queryProductName 借阅记录编码-&gt;billCode 图书 -&gt;providerName 金额-&gt;totalPrice","categories":[{"name":"Java web","slug":"Java-web","permalink":"https://trevoewu.github.io/categories/Java-web/"}],"tags":[{"name":"java web","slug":"java-web","permalink":"https://trevoewu.github.io/tags/java-web/"},{"name":"jsp","slug":"jsp","permalink":"https://trevoewu.github.io/tags/jsp/"},{"name":"servlet","slug":"servlet","permalink":"https://trevoewu.github.io/tags/servlet/"},{"name":"jdbc","slug":"jdbc","permalink":"https://trevoewu.github.io/tags/jdbc/"},{"name":"fullstack","slug":"fullstack","permalink":"https://trevoewu.github.io/tags/fullstack/"},{"name":"smbms","slug":"smbms","permalink":"https://trevoewu.github.io/tags/smbms/"}]},{"title":"Java Web 快速入门","slug":"Java-Web-快速入门","date":"2023-05-12T09:45:29.000Z","updated":"2023-06-10T12:58:44.545Z","comments":true,"path":"2023/05/12/Java-Web-快速入门/","link":"","permalink":"https://trevoewu.github.io/2023/05/12/Java-Web-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/","excerpt":"","text":"静态web和动态web 静态Web和动态Web都是Web应用程序的不同类型，它们的主要区别在于页面内容是如何生成和呈现的。 静态Web是由静态网页组成的Web应用程序，网页的内容在页面请求时已经存在，并且不会随着用户的请求而发生变化。网页内容通常是由HTML、CSS、JavaScript等静态文件组成的，这些文件都是在服务器端预先生成的，当用户访问这些网页时，服务器只需将这些文件发送给用户的浏览器，浏览器将文件解析并显示给用户即可。静态Web通常包含少量的网页，内容不会发生频繁变化，适合于展示企业宣传网站、个人博客等简单的网站。 动态Web是由动态网页组成的Web应用程序，网页内容是在用户请求时根据请求参数和服务器端的处理生成的。网页内容可以根据用户的不同请求参数、数据库查询结果等实时生成。动态Web需要使用服务器端脚本语言（如Java、PHP、Python Servlet/JSP等）来生成HTML页面内容，通常使用数据库来存储和管理数据。动态Web可以实现更复杂的功能，例如在线商城、社交网络、新闻门户等。 总的来说，静态Web适合于内容不会频繁变化，网站规模较小的场景，可以使用简单的HTML、CSS、JavaScript等前端技术来实现；而动态Web适合于内容需要频繁变化、网站规模较大的场景，需要使用服务器端脚本语言和数据库来实现。 web服务器 Tomcat Web服务器是一种软件程序，主要用于处理客户端和服务器之间的HTTP请求和响应。它可以接收来自客户端（通常是Web浏览器）的HTTP请求，并返回处理后的HTTP响应。Web服务器通常运行在互联网上，提供各种各样的服务，例如Web网站、电子邮件服务、文件传输等。 Tomcat是一种流行的开源Web服务器，它实现了Java Servlet和JavaServer Pages (JSP) 规范。Tomcat支持多种操作系统，包括Windows、Linux和Mac OS等，它提供了一个简单的、易于使用的管理界面，允许管理员对服务器进行配置和管理。 Tomcat的主要特点包括： 支持Java Servlet和JSP规范：Tomcat可以运行和处理Java Web应用程序，例如Java Servlet、JSP和JavaServer Faces (JSF) 等。 可扩展性：Tomcat支持各种插件和扩展，可以根据需要添加新功能或修改现有功能。 易于配置和管理：Tomcat提供了一个简单的管理界面，允许管理员轻松地配置和管理Web服务器，包括添加或删除Web应用程序、配置访问权限等。 开源免费：Tomcat是一个开源项目，可以免费使用和修改。这意味着用户可以根据自己的需要进行定制和修改，而不需要支付高昂的授权费用。 总的来说，Tomcat是一种功能强大的Web服务器，非常适合运行Java Web应用程序。它具有可扩展性、易于配置和管理、开源免费等优点，因此在企业和个人用户中非常受欢迎。 Tomcat文件结构 cd ~/tomcat //tomcart 安装目录 访问测试：http://localhost:8080 默认端口8080 配置文件 可以修改配置的启动端口号, 默认为8080 &lt;Connector port=\"8080\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\" redirectPort=\"8443\" /> 可以配置主机的名称, 默认网站的存放位置 name=“locahost” 默认主机名对于的ip地址 127.0.0.1 默认网站存放地址: webapps &lt;Host name=\"localhost\" appBase=\"webapps\" unpackWARs=\"true\" autoDeploy=\"true\"> 发布一个网站 将自己写的网站，放到服务器(Tomcat)中指定的web应用的文件夹（webapps）下，就可以访问了。 HTTP HTPP 请求 Request URL:https://www.baidu.com/ 请求地址 Request Method:GET get方法/post方法 Status Code:200 OK 状态码：200 Remote（远程） Address:14.215.177.39:443 Accept:text/html 客户端可以接受的语言 Accept-Encoding:gzip, deflate, br 编码 Accept-Language:zh-CN,zh;q=0.9 语言 Cache-Control:max-age=0 是否设置缓存 Connection:keep-alive 是否为持续性链接 Servlet 简介 Servlet就是sun公司开发动态web的一门技术。 Sun在这些API中提供一个接口叫做：Servlet，如果你想开发一个Servlet程序，只需要完成两个小步骤： 编写一个类，实现Servlet接口。 把开发好的Java类部署到web服务器中。 把实现了Servlet接口的Java程序叫做，Servlet。 第一个Servlet程序 HelloServlet 修改web.xml为最新的 &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?> &lt;web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\" version=\"4.0\" metadata-complete=\"true\"> &lt;/web-app> 编写一个Servlet程序。 编写一个普通类Bean 实现servlet接口, 这里我们直接继承HttpServlet public class HelloServlet extends HttpServlet &#123; // 由于get或post只是请求实现的不同的方式，可以相互调用，业务逻辑都是一样； //HttpServletRequest代表客户端的请求，用户通过Http协议访问服务器， //HTTP请求中的所有信息会被封装到HttpServletRequest， //通过这个HttpServletRequest的方法，获得客户端的所有信息； @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; PrintWriter writer = resp.getWriter(); // 响应流 writer.print(\"Hello,Serlvet\"); writer.flush() &#125; write( )和println( ) servletResponse.getWriter().write()``servletResponse.getWriter().println()都是用于将字符串写入到HTTP响应中的方法，但是它们之间有一些关键的区别。 servletResponse.getWriter().write()方法是将指定的字符串写入到HTTP响应输出流中，它不会在字符串末尾添加任何换行符或其他字符。如果需要在输出的字符串后面添加换行符或其他字符，就需要在字符串后面显式添加这些字符。 servletResponse.getWriter().println()方法也是将指定的字符串写入到HTTP响应输出流中，但是它会在字符串末尾自动添加一个换行符。这个换行符的样式和操作系统相关，通常是\\n或\\r\\n。使用println()方法可以让每个输出的字符串都独占一行，使得输出更易于阅读和处理。 因此，write()方法适合于需要将多个字符串写入到同一行的情况，例如输出CSV格式的数据或者HTML代码的片段。而println()方法适合于需要输出多行字符串的情况，例如输出日志信息或HTML代码的整个页面。 需要注意的是，无论使用哪种方法，都需要在使用完之后调用servletResponse.getWriter().flush()方法将输出流刷新并将数据发送到客户端。如果不调用flush()方法，可能会导致响应数据无法正常发送到客户端。 编写Servlet的映射 为什么需要映射：我们写的是JAVA程序，但是要通过浏览器访问，而浏览器需要连接web服务器，所以我们需要再web服务中注册我们写的Servlet，还需给他一个浏览器能够访问的路径； &lt;!--注册Servlet--> &lt;servlet> &lt;servlet-name>hello&lt;/servlet-name> &lt;servlet-class>cn.loulan.servlet.HelloServlet&lt;/servlet-class> &lt;/servlet> &lt;!--Servlet的请求路径--> &lt;servlet-mapping> &lt;servlet-name>hello&lt;/servlet-name> &lt;url-pattern>/hello&lt;/url-pattern> &lt;/servlet-mapping> Servlet Mapping 一个Servlet可以指定一个映射路径。 &lt;servlet-mapping> &lt;servlet-name>hello&lt;/servlet-name> &lt;url-pattern>/hello&lt;/url-pattern> &lt;/servlet-mapping> 一个Servlet可以指定多个映射路径。 &lt;servlet-mapping> &lt;servlet-name>hello&lt;/servlet-name> &lt;url-pattern>/hello&lt;/url-pattern> &lt;/servlet-mapping> &lt;servlet-mapping> &lt;servlet-name>hello&lt;/servlet-name> &lt;url-pattern>/hello2&lt;/url-pattern> &lt;/servlet-mapping> &lt;servlet-mapping> &lt;servlet-name>hello&lt;/servlet-name> &lt;url-pattern>/hello3&lt;/url-pattern> &lt;/servlet-mapping> &lt;servlet-mapping> &lt;servlet-name>hello&lt;/servlet-name> &lt;url-pattern>/hello4&lt;/url-pattern> &lt;/servlet-mapping> &lt;servlet-mapping> &lt;servlet-name>hello&lt;/servlet-name> &lt;url-pattern>/hello5&lt;/url-pattern> &lt;/servlet-mapping> 一个Servlet可以指定通用映射路径。 &lt;servlet-mapping> &lt;servlet-name>hello&lt;/servlet-name> &lt;url-pattern>/hello/*&lt;/url-pattern> &lt;/servlet-mapping> 默认请求路径。 &lt;!--默认请求路径--> &lt;servlet-mapping> &lt;servlet-name>hello&lt;/servlet-name> &lt;url-pattern>/*&lt;/url-pattern> &lt;/servlet-mapping> 指定一些后缀或者前缀等等…. &lt;!-- 可以自定义后缀实现请求映射 注意点，*前面不能加项目映射的路径 hello/subei.github --> &lt;servlet-mapping> &lt;servlet-name>hello&lt;/servlet-name> &lt;url-pattern>*.github&lt;/url-pattern> &lt;/servlet-mapping> 优先级问题。 指定了固有的映射路径优先级最高，如果找不到就会走默认的处理请求； Servlet Context web容器在启动的时候，它会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的web应用(Application)； ServletContext是Java Web应用程序的一个接口，它提供了一个Web应用程序的运行环境，可以访问应用程序的配置信息、资源、请求和会话等。每个Web应用程序都有一个ServletContext实例，可以通过getServletContext()方法获取。 ServletContext提供了以下功能： 应用程序作用域：ServletContext对象是一个应用程序级别的对象，可以在整个应用程序范围内共享数据。 应用程序配置信息：ServletContext对象提供了访问Web应用程序的配置信息的方法，例如Web.xml中配置的上下文参数，初始化参数等。 资源访问：ServletContext对象提供了一些方法，例如getRealPath()和getResourceAsStream()，可以访问Web应用程序中的资源文件。 请求转发：ServletContext对象提供了getRequestDispatcher()方法，可以将请求转发到其他Web组件，例如Servlet或JSP。 会话管理：ServletContext对象提供了创建和管理会话的方法，例如getSession()和getSessionCookieConfig()。 ServletContex为Java Web应用程序提供了一个环境，使开发人员可以访问应用程序的配置信息、资源、请求和会话等，并且可以将请求转发到其他Web组件。这使得Java Web应用程序开发变得更加容易和灵活。 利用servletContext实现不同Servlet之前的数据共享 在这个Servlet中保存的数据，可以在另外一个servlet中拿到； public class HelloServlet extends HttpServlet &#123; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; ServletContext context = this.getServletContext(); String name = \"学习超好\"; // 数据 context.setAttribute(\"name\",name); &#125; &#125; public class GetServlet extends HttpServlet &#123; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; ServletContext context = this.getServletContext(); String name = (String)context.getAttribute(\"name\"); resp.setContentType(\"text/html\"); resp.setCharacterEncoding(\"utf-8\"); resp.getWriter().print(\"名字:\"+name); &#125; 利用Servlet获取初始化参数 &lt;!-- 配置一些Web应用初始化参数 --> &lt;context-param> &lt;param-name>url&lt;/param-name> &lt;param-value>jdbc:mysql://localhost:3306/mybatis&lt;/param-value> &lt;/context-param> &lt;servlet> &lt;servlet-name>gp&lt;/servlet-name> &lt;servlet-class>com.github.servlet.ServletDemo03&lt;/servlet-class> &lt;/servlet> &lt;servlet-mapping> &lt;servlet-name>gp&lt;/servlet-name> &lt;url-pattern>/gp&lt;/url-pattern> &lt;/servlet-mapping> public class ServletDemo03 extends HttpServlet &#123; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; ServletContext context = this.getServletContext(); String url = context.getInitParameter(\"url\"); resp.getWriter().print(url); &#125; 实现请求的转发 利用ServletContext实现请求的转发 public class ServletDemo04 extends HttpServlet &#123; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; ServletContext context = this.getServletContext(); // 调用forward实现请求转发; // requestDispatcher.forward(req,resp); context.getRequestDispatcher(\"url\").forward(req,resp); &#125; 用来读取资源文件 在resources目录下新建properties 思路：需要一个文件流； username=\"楼兰\" public class ServletDemo05 extends HttpServlet &#123; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException &#123; InputStream stream = this.getServletContext().getResourceAsStream(\"WEB-INF/classes/db.properties\"); Properties prop = new Properties(); prop.load(is); String user = prop.getProperty(\"username\"); // 但是如果配置文件中如果包含中文，就会出现乱码，所以可以通过中转的形式优化一下： prop.load(new InputStreamReader(stream,\"UTF-8\")); resp.getWriter().print(user); &#125; HttpServletResponse web服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse； 如果要获取客户端请求过来的参数：找HttpServletRequest； 如果要给客户端响应一些信息：找HttpServletResponse。 1.简单分类 负责向浏览器发送数据的方法。 ServletOutputStream getOutputStream(); PrintWriter getWriter(); 负责向浏览器发送响应头的方法。 void setCharacterEncoding(String var1); void setContentType(String var1); 响应的状态码。 int SC_OK = 200; int SC_MOVED_PERMANENTLY = 301; int SC_NOT_FOUND = 404; int SC_INTERNAL_SERVER_ERROR = 500; 200 - 请求成功 301 - 资源（网页等）被永久转移到其它URL 404 - 请求的资源（网页等）不存在 500 - 内部服务器错误 2.下载文件 向浏览器输出消息； 下载文件： 要获取下载文件的路径； 下载的文件名是啥？ 设置想办法让浏览器能够支持下载我们需要的东西； 获取下载文件的输入流； 创建缓冲区； 获取OutputStream对象； 将FileOutputStream流写入到buffer缓冲区； 使用OutputStream将缓冲区中的数据输出到客户端！ public class FIleServlet extends HttpServlet &#123; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; // 1. 获取下载文件的路径； String url = \"/Users/trevorwu/Maven_03/HelloServlet/src/main/resources/Peekaboo.png\"; // 2. 获取文件名 String fileName = \"downFile.png\"; // 3. 让浏览器能够支持下载我们需要的东西； // 这段代码是用来设置 HTTP 响应头，将服务器返回的内容作为文件附件（attachment）下载，而非直接在浏览器中打开。 // 具体地，`resp.setHeader()` 方法设置了一个名为 \"Content-Disposition\" 的响应头， // 其值为 \"attachment;filename=xxxxx\"，其中 \"xxxxx\" 是要下载的文件名。 // 这个文件名可以是服务器上的文件名，也可以是通过代码生成的文件名。 // 这个文件名决定了用户下载得到的文件名， 而非服务器上的文件名， 服务器的文件名在下载文件的地址中指定 resp.setHeader(\"Content-Disposition\",\"attachment;filename=\" + URLEncoder.encode(fileName,\"UTF-8\")); // 4. 获取下载文件的输入流； FileInputStream in = new FileInputStream(url); // 5. 创建缓冲区； int len = 0; byte buffer[] = new byte[1024]; // 6. 获取OutputStream对象； ServletOutputStream out = resp.getOutputStream(); // 7. 将FileOutputStream流写入到buffer缓冲区； // 这段代码是将输入流 `in` 中的数据读取到缓冲区 `buffer` 中，再通过输出流 `out` 输出到目标位置。 // 具体地，循环读取操作会在输入流中读取数据，并将数据写入到缓冲区中， // 当读取到的数据长度为0时，说明已经读取完毕，退出循环。 //在每次循环中，通过调用 `out.write(buffer, 0, len)` 方法，将缓冲区中的数据写入输出流中。 // 这里的 `buffer` 是一个字节数组，`len` 是每次读取的字节数。 // 第二个参数 `0` 表示从缓冲区的第一个字节开始写入，而不是从数组的第一个元素开始写入。 //通过这段代码，我们可以实现从输入流中读取数据，然后将数据输出到目标位置的操作，通常用于文件下载或数据传输等场景。 while ((len=in.read(buffer)) > 0)&#123; out.write(buffer,0,len); &#125; // close input output stream in.close(); out.close(); &#125; 3.验证码功能* 验证怎么来的？ 前端实现； 后端实现，需要用到 Java 的图片类，生产一个图片。 public class ImageServlet extends HttpServlet &#123; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException &#123; // 如何让浏览器3秒自动刷新一次; resp.setHeader(\"refresh\",\"3\"); // 在内存中创建一个图片 BufferedImage image = new BufferedImage(90,40,BufferedImage.TYPE_INT_RGB); // 得到图片,笔 Graphics2D g = (Graphics2D) image.getGraphics(); // 设置图片的背景颜色 g.setColor(Color.white); g.fillRect(0,0,90,40); // 给图片写数据 g.setColor(Color.RED); g.setFont(new Font(null,Font.BOLD,20)); g.drawString(makeNum(),8,30); // 告诉浏览器，这个请求用图片的方式打开 resp.setContentType(\"image/jpeg\"); // 网站存在缓存，不让浏览器缓存 resp.setDateHeader(\"expires\",-1); resp.setHeader(\"Cache-Control\",\"no-cache\"); resp.setHeader(\"Pragma\",\"no-cache\"); // 把图片写给浏览器 ImageIO.write(image,\"jpg\", resp.getOutputStream()); &#125; // 生成随机数 private String makeNum()&#123; Random random = new Random(); String num = random.nextInt(9999999) + \"\"; StringBuffer sb = new StringBuffer(); for (int i = 0; i &lt; 7-num.length() ; i++) &#123; sb.append(\"0\"); &#125; num = sb.toString() + num; return num; &#125; 4.实现重定向 之前我们学过利用Servlet实现请求的转发, 这里我们利用response来实现请求重定向 重定向和转发的区别 重定向和转发是在Java Servlet编程中常用的两种将请求从一个Servlet转发到另一个Servlet或JSP的方式，它们有一些关键的区别。 重定向（Redirect）是指当一个Servlet收到一个请求时，它会发送一个HTTP响应告诉浏览器发送一个新的请求到指定的URL。这个URL可以是一个Servlet、JSP、HTML页面或其他任何类型的资源。因此，重定向会导致浏览器向指定的URL发起一个全新的请求，而这个新请求的路径是由浏览器在重定向时自动发送的，不再是原始请求的路径。在重定向中，所有请求参数都会丢失，因此需要通过查询字符串或Session等方式传递参数。重定向可以用于将用户重定向到一个新的页面，或者将用户从一个应用程序重定向到另一个应用程序。 转发（Forward）是指当一个Servlet收到一个请求时，它会将请求转发到另一个Servlet或JSP来处理。在转发中，请求和响应对象是同一个，只是Servlet容器将请求转发给了另一个资源来生成响应。因此，在转发中，所有请求参数都会保留，并且可以在目标Servlet或JSP中访问。转发通常用于将请求从一个Servlet传递到另一个Servlet或JSP来生成响应，以便可以在请求和响应之间共享数据。 因此，重定向和转发都可以将请求从一个Servlet转发到另一个Servlet或JSP来生成响应，但它们的区别在于重定向会发送一个新的请求到指定的URL，而转发则将请求转发到另一个Servlet或JSP来处理，响应由目标Servlet或JSP生成。重定向导致的性能开销比转发更高，因为它需要向浏览器发送一个新的请求，而转发则在服务器内部进行，无需向浏览器发送任何内容。 public class RedirectServlet extends HttpServlet &#123; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; resp.sendRedirect(\"/response/img\"); // 重定向 &#125; 5.简单实现登录重定向 public class Log extends HttpServlet &#123; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; this.getServletContext().getRequestDispatcher(\"/hello\").forward(req, resp); &#125; 这段代码用于Java Servlet编程中，将一个请求从一个Servlet转发到同一Web应用程序中的另一个Servlet或JSP（Java服务器页面）。 getRequestDispatcher()方法的参数是请求转发到的资源的相对或绝对路径。在本例中，路径为“/hello”，这是另一个Servlet. 然后调用RequestDispatcher对象的forward()方法，传递req和resp参数。这些是传递到原始Servlet的doGet()或doPost()方法中的HttpServletRequest和HttpServletResponse对象。forward()方法将这些对象发送到指定的资源，并允许该资源生成要发送回客户端的响应。 总之，这段代码将一个请求从当前Servlet转发到同一Web应用程序中的另一个Servlet或JSP，同时传递HttpServletRequest和HttpServletResponse对象。目标资源将生成要发送回客户端的响应。 HttpServletRequest HttpServletRequest代表客户端的请求，用户通过Http协议访问服务器，HTTP请求中的所有信息会被封装到HttpServletRequest，通过这个HttpServletRequest的方法，获得客户端的所有信息； // HttpServletRequest代表客户端的请求，用户通过Http协议访问服务器， // HTTP请求中的所有信息会被封装到HttpServletRequest， // 通过这个HttpServletRequest的方法，获得客户端的所有信息； String username = req.getParameter(\"username\"); String password = req.getParameter(\"password\"); String host = req.getHeader(\"Host\"); resp.getWriter().println(\"username:\"+username+\" password:\"+password+\" host:\"+host); // `req.getContextPath()` 是一个 Java Servlet API 中的方法，它返回当前 Servlet 的上下文路径。 // 上下文路径是指 Web 应用程序的 URL 中，主机名和端口号后的第一个路径。 //例如，如果 Web 应用程序的 URL 是 `http://example.com:8080/myapp/index.jsp`， // 那么上下文路径就是 `/myapp`。 resp.getWriter().println(\"Context path\"+req.getContextPath()); 保存会话的两种技术 Cookies HTTP cookie，简称cookie，又称“网站／浏览＋魔饼／魔片”等，是浏览网站时由网络服务器创建并由网页浏览器存放在用户计算机或其他设备的小文本文件。 Cookie使Web服务器能在用户的设备存储状态信息（如添加到在线商店购物车中的商品）或跟踪用户的浏览活动（如点击特定按钮、登录或记录历史. cookie 是服务器在 HTTP 响应中发送的一段数据。客户端（可选）存储 cookie 并在后续请求中返回它。这允许客户端和服务器共享状态。要设置 cookie，服务器会在响应中包含一个 Set-Cookie 标头。cookie 的格式是名称-值对，带有可选属性。例如： Set-Cookie: session-id=1234567 这是一个带有属性的示例： Set-Cookie: session-id=1234567; max-age=86400; domain=example.com; path=/; 为了向服务器返回 cookie，客户端在以后的请求中包含一个 Cookie 标头。 Cookie: session-id=1234567 利用Cookies记录用户上一次登录时间 public class Cookie extends HttpServlet &#123; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; //get all cookies javax.servlet.http.Cookie[] cookies = req.getCookies(); for (javax.servlet.http.Cookie cookie : cookies) &#123; String name = cookie.getName(); if(name.equals(\"lastLoginTime\"))&#123; String value = cookie.getValue(); long parseLong = Long.parseLong(cookie.getValue()); Date date = new Date(parseLong); resp.getWriter().println(\"lastLoginTime: \"+date.toLocaleString()); &#125; &#125; javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"lastLoginTime\", System.currentTimeMillis() + \"\"); resp.addCookie(cookie); &#125; session 在计算机科学领域来说，尤其是在网络领域，会话（英语：session，Microsoft Windows译作工作阶段、连线阶段）是一种持久网络协议，在用户（或用户代理）端和服务器端之间创建关联，从而起到交换数据包的作用机制，session在网络协议（例如telnet或FTP）中是非常重要的部分。 在不包含会话层（例如UDP）或者是无法长时间驻留会话层（例如HTTP）的传输协议中，会话的维持需要依靠在传输数据中的高级别程序。例如，在浏览器和远程主机之间的HTTP传输中，HTTP cookie就会被用来包含一些相关的信息，例如session ID，参数和权限信息等。 服务器技术，利用这个技术，可以保存用户的会话信息？ 我们可以把信息或者数据放在Session中！ 服务器会给每一个用户（浏览器）创建一个Seesion对象； 一个Seesion独占一个浏览器，只要浏览器没有关闭，这个Session就存在； 用户登录之后，整个网站它都可以访问！–&gt; 保存用户的信息；保存购物车的信息…… Session和cookie的区别： Cookie和Session是Web应用程序中常用的两种用于保存用户状态信息的机制。 相同点： 都是用于在Web应用程序中保存用户状态信息的机制。 都可以在多个请求之间保持用户的状态信息，使用户在浏览网站时能够保持状态的连续性。 都可以在一定程度上提高Web应用程序的性能，减少对服务器的负载。 不同点： 存储位置不同：Cookie保存在客户端的浏览器中，而Session保存在服务器端的内存或者硬盘中。 存储容量不同：Cookie的存储容量比Session小。 安全性不同：由于Session数据存储在服务器端，因此相对于Cookie更加安全，Cookie数据容易被篡改或盗用。 过期时间不同：Session的过期时间可以由开发人员在代码中设置，而Cookie的过期时间可以在创建Cookie时设置，也可以在浏览器中手动删除。 使用场景不同：Cookie适用于需要长期保存用户状态信息的场景，例如保存用户的登录状态、偏好设置等；而Session适用于需要在短时间内保存用户状态信息的场景，例如购物车、会话信息等。 利用Session返回客户端一个Person对象, 并在浏览器上打印 public class Session extends HttpServlet &#123; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; HttpSession session = req.getSession(); session.setAttribute(\"person\",new Person(\"Alice\", \"Alice@gmail.com\")); resp.getWriter().write(\"Session id\"+session.getId()); Person person = (Person) session.getAttribute(\"person\"); resp.getWriter().write(\"name\"+person.toString()); &#125; //client 每次访问服务器都会在服务器端维护一个Session, 并向用户以Cookie的方式，发送Session id, // 但是对于client而言， 这个Session id 是以Cookie的形式存储在浏览器上的， 所以更换浏览器访问后Cookie改变了 // 所以，服务器会认为这是一个新的Session. // 下一次用户再次访问的时候就会拿着这个Session id 访问Serve， Server就知道这个客户的信息 // 1. 拿到Session， 这个Cookie是由客户端发送给服务器的 // Session 可以使用setAttribute方法来保存信息 // 不同于Cookie，Session 可以保存一个对象(Object)， 而不是仅仅是一个String 会话自动过期：web.xml配置！ &lt;!--设置Session默认的失效时间--> &lt;session-config> &lt;!--15分钟后Session自动失效，以分钟为单位--> &lt;session-timeout>15&lt;/session-timeout> &lt;/session-config> JSP (Java Server Pages) JSP（全称Jakarta Server Pages，曾称为JavaServer Pages）是由Sun Microsystems公司主导创建的一种动态网页技术标准。 Java Server Pages ： Java服务器端页面，也和Servlet一样，用于动态Web技术！ 最大的特点： 写JSP就像在写HTML； 区别： HTML只给用户提供静态的数据； JSP页面中可以嵌入JAVA代码，为用户提供动态数据； JSP原理 思路：JSP到底怎么执行的！ 服务器内部工作： tomcat中有一个work目录； IDEA中使用Tomcat的会在IDEA的tomcat中生产一个work目录； IDEA会为每个Tomcat Webapps创建一个文件夹,用来存放这个APP的配置文件, 工作路径, 在我的MAC路径/Users/trevorwu/Library/Caches/JetBrains/IntelliJIdea2022.3/tomcat/47ad80c0-0fbd-41b1-a4ae-e036ca41705b 我们进入这个路径的最深处 `cd Catalina/localhost/ROOT/org/apache/jsp 可以看到这里面有两个文件, 一个是index_jsp.class 另一个是index_jsp.java` 很明显, `index_jsp.class`就是index_jsp.java` 编译生成的class文件. 这是只有一个这样的class, 也就是我们的主页index.jsp 也就是说, 如果我们访问index.jsp, 相当于访问根目录localhost:8080/ 服务器就会生成对应的.java文件, 以及.class文件用来处理请求. 这个.java文件本质上就是Servlet. 如果这时候我们访问别的页面, 就会生成新的Servlet. 浏览器向服务器发送请求，不管访问什么资源，其实都是在访问Servlet！ JSP最终也会被转换成为一个Java类！ JSP 本质上就是一个Servlet！ // 初始化 public void _jspInit() &#123; &#125; // 销毁 public void _jspDestroy() &#123; &#125; // JSPService public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException &#123; 内置一些对象； final javax.servlet.jsp.PageContext pageContext; // 页面上下文 javax.servlet.http.HttpSession session = null; // session final javax.servlet.ServletContext application; // applicationContext final javax.servlet.ServletConfig config; // config javax.servlet.jsp.JspWriter out = null; // out final java.lang.Object page = this; // page：当前 HttpServletRequest request // 请求 HttpServletResponse response // 响应 输出页面前增加的代码； response.setContentType(\"text/html\"); // 设置响应的页面类型 pageContext = _jspxFactory.getPageContext(this, request, response, null, true, 8192, true); _jspx_page_context = pageContext; application = pageContext.getServletContext(); config = pageContext.getServletConfig(); session = pageContext.getSession(); out = pageContext.getOut(); _jspx_out = out; 以上的这些个对象我们可以在JSP页面中直接使用！ 在JSP页面中： 只要是 JAVA代码就会原封不动的输出； 如果是HTML代码，就会被转换为： out.write(\"&lt;html>\\n\"); out.write(\" &lt;head>\\n\"); out.write(\" &lt;title>$Title$&lt;/title>\\n\"); out.write(\" &lt;/head>\\n\"); out.write(\" &lt;body>\\n\"); out.write(\" $END$\\n\"); out.write(\" &lt;/body>\\n\"); out.write(\"&lt;/html>\\n\"); 这样的格式，输出到前端！ JSP语法 任何语言都有自己的语法，JAVA中有，JSP 作为java技术的一种应用，它拥有一些自己扩充的语法（了解，知道即可！），Java所有语法都支持！ 配置必需的maven环境： &lt;!-- JSP 依赖 --> &lt;dependency> &lt;groupId>javax.servlet.jsp&lt;/groupId> &lt;artifactId>javax.servlet.jsp-api&lt;/artifactId> &lt;version>2.3.3&lt;/version> &lt;/dependency> &lt;!-- JSTL表达式的依赖--> &lt;dependency> &lt;groupId>javax.servlet.jsp.jstl&lt;/groupId> &lt;artifactId>jstl-api&lt;/artifactId> &lt;version>1.2&lt;/version> &lt;/dependency> &lt;!-- standard标签库--> &lt;dependency> &lt;groupId>taglibs&lt;/groupId> &lt;artifactId>standard&lt;/artifactId> &lt;version>1.1.2&lt;/version> &lt;/dependency> JSP表达式 &lt;body&gt; &lt;%--JSP表达式 作用：用来将程序的输出，输出到客户端 &lt;%&#x3D; 变量或者表达式%&gt; --%&gt; &lt;%&#x3D; new java.util.Date()%&gt; &lt;&#x2F;body&gt; jsp脚本片段 &lt;body&gt; &lt;%--jsp脚本片段--%&gt; &lt;% int sum &#x3D; 0; for (int i &#x3D; 1; i &lt;&#x3D;100 ; i++) &#123; sum+&#x3D;i; &#125; out.println(&quot;&lt;h1&gt;Sum&#x3D;&quot;+sum+&quot;&lt;&#x2F;h1&gt;&quot;); %&gt; &lt;&#x2F;body&gt; JSP声明 &lt;%! code %&gt; &lt;body&gt; &lt;%! static &#123; System.out.println(&quot;Loading Servlet!&quot;); &#125; private int globalVar &#x3D; 0; public void guo()&#123; System.out.println(&quot;进入了方法guo！&quot;); &#125; %&gt; &lt;&#x2F;body&gt; JSP声明：会被编译到JSP生成Java的类中！其他的，就会被生成到_jspService方法中！ JSP指令: 404与500页面实现 &lt;!-- 自定义错误页面--> &lt;!-- 配置之后记得重启Tomcat服务， 修改tomcat配置文件web.xml热部署不生效--> &lt;!-- 自由修改jsp文件才能热部署--> &lt;error-page> &lt;error-code>404&lt;/error-code> &lt;location>/error/404.jsp&lt;/location> &lt;/error-page> &lt;error-page> &lt;error-code>500&lt;/error-code> &lt;location>/error/500.jsp&lt;/location> &lt;/error-page> 头部和尾部页面拼接 &lt;body&gt; &lt;%-- @include会将两个页面合二为一 --%&gt; &lt;%@include file&#x3D;&quot;common&#x2F;header.jsp&quot;%&gt; &lt;h1&gt;网页主体&lt;&#x2F;h1&gt; &lt;%@include file&#x3D;&quot;common&#x2F;footer.jsp&quot;%&gt; &lt;hr&gt; &lt;%-- jsp标签 jsp:include：拼接页面，本质还是三个 --%&gt; &lt;jsp:include page&#x3D;&quot;&#x2F;common&#x2F;header.jsp&quot;&#x2F;&gt; &lt;h1&gt;网页主体&lt;&#x2F;h1&gt; &lt;jsp:include page&#x3D;&quot;&#x2F;common&#x2F;footer.jsp&quot;&#x2F;&gt; &lt;&#x2F;body&gt; 内置对象 PageContext 存东西 Request 存东西 Response Session 存东西 Application 【SerlvetContext】 存东西 config 【SerlvetConfig】 out page ，不用了解 exception &lt;body> &lt;%--内置对象--%> &lt;% pageContext.setAttribute(\"name1\",\"天启1号\"); // 保存的数据只在一个页面中有效 request.setAttribute(\"name2\",\"天启2号\"); // 保存的数据只在一次请求中有效，请求转发会携带这个数据 session.setAttribute(\"name3\",\"天启3号\"); // 保存的数据只在一次会话中有效，从打开浏览器到关闭浏览器 application.setAttribute(\"name4\",\"天启4号\"); // 保存的数据只在服务器中有效，从打开服务器到关闭服务器 %> &lt;%-- 脚本片段中的代码，会被原封不动生成到.jsp.java 要求：这里面的代码，必须保证Java语法的正确性 --%> &lt;% // 从pageContent取出，我们通过寻找的方式来 // 从底层到高层（作用域）: String name1 = (String) pageContext.findAttribute(\"name1\"); String name2 = (String) pageContext.findAttribute(\"name2\"); String name3 = (String) pageContext.findAttribute(\"name3\"); String name4 = (String) pageContext.findAttribute(\"name4\"); String name5 = (String) pageContext.findAttribute(\"name5\"); // 作用域 %> &lt;%--使用EL表达式输出 $&#123;&#125; --%> &lt;h1>取出的值:&lt;/h1> &lt;h3>$&#123;name1&#125;&lt;/h3> &lt;h3>$&#123;name2&#125;&lt;/h3> &lt;h3>$&#123;name3&#125;&lt;/h3> &lt;h3>$&#123;name4&#125;&lt;/h3> &lt;h3> &lt;%=name5%> &lt;/h3> &lt;/body> &lt;/html> request：客户端向服务器发送请求，产生的数据，用户看完就没用了，比如：新闻，用户看完没用的！ session：客户端向服务器发送请求，产生的数据，用户用完一会还有用，比如：购物车； application：客户端向服务器发送请求，产生的数据，一个用户用完了，其他用户还可能使用，比如：聊天数据； JSP标签.JSTL标签.EL表达式 EL表达式： ${ } 获取数据 执行运算 获取web开发的常用对象 &lt;!-- JSTL表达式的依赖 --&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet.jsp.jstl&lt;&#x2F;groupId&gt; &lt;artifactId&gt;jstl-api&lt;&#x2F;artifactId&gt; &lt;version&gt;1.2&lt;&#x2F;version&gt; &lt;&#x2F;dependency&gt; &lt;!-- standard标签库 --&gt; &lt;dependency&gt; &lt;groupId&gt;taglibs&lt;&#x2F;groupId&gt; &lt;artifactId&gt;standard&lt;&#x2F;artifactId&gt; &lt;version&gt;1.1.2&lt;&#x2F;version&gt; &lt;&#x2F;dependency&gt; JSP标签 利用JSP标签实现请求转发, 并设置参数 &lt;jsp:forward page=“url”&gt; &lt;body&gt; &lt;%--jsp:include--%&gt; &lt;jsp:forward page&#x3D;&quot;&#x2F;jspTag2.jsp&quot;&gt; &lt;jsp:param name&#x3D;&quot;name&quot; value&#x3D;&quot;subeiLY&quot;&#x2F;&gt; &lt;jsp:param name&#x3D;&quot;age&quot; value&#x3D;&quot;18&quot;&#x2F;&gt; &lt;&#x2F;jsp:forward&gt; &lt;&#x2F;body&gt; 再转发的目标Servlet取参数 &lt;body&gt; &lt;%--取出参数--%&gt; 名字:&lt;%&#x3D;request.getParameter(&quot;name&quot;)%&gt; 年龄:&lt;%&#x3D;request.getParameter(&quot;age&quot;)%&gt; &lt;&#x2F;body&gt; JSTL表达式 JSTL标签库的使用就是为了弥补HTML标签的不足；它自定义许多标签，可以供我们使用，标签的功能和Java代码一样！ 格式化标签 SQL标签 XML 标签 核心标签 （掌握部分） JSTL标签库使用步骤： 引入对应的 taglib； 使用其中的方法； 在Tomcat 的lib目录下也需要引入 jstl-api-1.2.jar、standard-1.1.2.jar的包，否则会报错：JSTL解析错误； c：if标签 EL表达式获取表单中的数据 &lt;body&gt; &lt;form action&#x3D;&quot;core-if.jsp&quot; method&#x3D;&quot;get&quot;&gt; &lt;%-- EL表达式获取表单中的数据 $&#123;param.参数名&#125; --%&gt; &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;param.username&#125;&quot;&gt; &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;登录&quot;&gt; &lt;&#x2F;form&gt; &lt;%--判断如果提交的用户名是管理员，则登录成功--%&gt; &lt;c:if test&#x3D;&quot;$&#123;param.username&#x3D;&#x3D;&#39;admin&#39;&#125;&quot; var&#x3D;&quot;isAdmin&quot;&gt; &lt;c:out value&#x3D;&quot;管理员欢迎您！&quot;&#x2F;&gt; &lt;&#x2F;c:if&gt; &lt;c:out value&#x3D;&quot;$&#123;isAdmin&#125;&quot;&#x2F;&gt; &lt;&#x2F;body&gt; c:choose c:when 实现成绩判断(Switch case) &lt;body&gt; &lt;%--定义一个变量score，值为85--%&gt; &lt;c:set var&#x3D;&quot;score&quot; value&#x3D;&quot;65&quot;&#x2F;&gt; &lt;c:choose&gt; &lt;c:when test&#x3D;&quot;$&#123;score&gt;&#x3D;90&#125;&quot;&gt; 你的成绩为优秀 &lt;&#x2F;c:when&gt; &lt;c:when test&#x3D;&quot;$&#123;score&gt;&#x3D;80&#125;&quot;&gt; 你的成绩为一般 &lt;&#x2F;c:when&gt; &lt;c:when test&#x3D;&quot;$&#123;score&gt;&#x3D;70&#125;&quot;&gt; 你的成绩为良好 &lt;&#x2F;c:when&gt; &lt;c:when test&#x3D;&quot;$&#123;score&lt;&#x3D;60&#125;&quot;&gt; 你的成绩为不及格 &lt;&#x2F;c:when&gt; &lt;&#x2F;c:choose&gt; &lt;&#x2F;body&gt; c:forEach &lt;body&gt; &lt;% ArrayList&lt;String&gt; people &#x3D; new ArrayList&lt;&gt;(); people.add(0,&quot;Alice&quot;); people.add(1,&quot;Bob&quot;); people.add(2,&quot;楼兰&quot;); people.add(3,&quot;Goobus&quot;); people.add(4,&quot;Kris&quot;); request.setAttribute(&quot;list&quot;,people); %&gt; &lt;%-- var , 每一次遍历出来的变量 items, 要遍历的对象 begin, 哪里开始 end, 到哪里 step, 步长 (i++) --%&gt; &lt;c:forEach var&#x3D;&quot;people&quot; items&#x3D;&quot;$&#123;list&#125;&quot;&gt; &lt;c:out value&#x3D;&quot;$&#123;people&#125;&quot;&#x2F;&gt; &lt;br&gt; &lt;&#x2F;c:forEach&gt; &lt;hr&gt; &lt;c:forEach var&#x3D;&quot;people&quot; items&#x3D;&quot;$&#123;list&#125;&quot; begin&#x3D;&quot;1&quot; end&#x3D;&quot;3&quot; step&#x3D;&quot;1&quot; &gt; &lt;c:out value&#x3D;&quot;$&#123;people&#125;&quot;&#x2F;&gt; &lt;br&gt; &lt;&#x2F;c:forEach&gt; &lt;&#x2F;body&gt; JavaBean 实体类，JavaBean有特定的写法： 必须要有一个无参构造 属性必须私有化 必须有对应的get/set方法； 一般用来和数据库的字段做映射 ORM； ORM ：对象关系映射 表—&gt;类 字段–&gt;属性 行记录----&gt;对象 &lt;jsp:useBean id&#x3D;&quot;people&quot; class&#x3D;&quot;cn.loulan.Bean.People&quot; &#x2F;&gt; &lt;jsp:setProperty name&#x3D;&quot;people&quot; property&#x3D;&quot;address&quot; value&#x3D;&quot;成都&quot;&#x2F;&gt; &lt;jsp:setProperty name&#x3D;&quot;people&quot; property&#x3D;&quot;id&quot; value&#x3D;&quot;1&quot;&#x2F;&gt; &lt;jsp:setProperty name&#x3D;&quot;people&quot; property&#x3D;&quot;age&quot; value&#x3D;&quot;2&quot;&#x2F;&gt; &lt;jsp:setProperty name&#x3D;&quot;people&quot; property&#x3D;&quot;name&quot; value&#x3D;&quot;哇哈哈AD钙&quot;&#x2F;&gt; 姓名:&lt;jsp:getProperty name&#x3D;&quot;people&quot; property&#x3D;&quot;name&quot;&#x2F;&gt; ID:&lt;jsp:getProperty name&#x3D;&quot;people&quot; property&#x3D;&quot;id&quot;&#x2F;&gt; 年龄:&lt;jsp:getProperty name&#x3D;&quot;people&quot; property&#x3D;&quot;age&quot;&#x2F;&gt; 地址:&lt;jsp:getProperty name&#x3D;&quot;people&quot; property&#x3D;&quot;address&quot;&#x2F;&gt; MVC三层架构 什么是MVC： Model view Controller 模型.视图.控制器 1.早些年 用户直接访问控制层，控制层就可以直接操作数据库； servlet--CRUD-->数据库 弊端：程序十分臃肿，不利于维护 servlet的代码中：处理请求.响应.视图跳转.处理JDBC.处理业务代码.处理逻辑代码 架构：没有什么是加一层解决不了的！ 程序猿调用 | JDBC | Mysql Oracle SqlServer .... 2.MVC三层架构 Model 业务处理 ：业务逻辑（Service） 数据持久层：CRUD （Dao） View 展示数据 提供链接发起Servlet请求 （a，form，img…） Controller （Servlet） 接收用户的请求 ：（req：请求参数.Session信息….） 交给业务层处理对应的代码 控制视图的跳转 登录--->接收用户的登录请求--->处理用户的请求（获取用户登录的参数，username，password）---->交给业务层处理登录业务（判断用户名密码是否正确：事务）--->Dao层查询用户名和密码是否正确-->数据库 Filter(重点) Filter：过滤器 ，用来过滤网站的数据； 处理中文乱码 登录验证…. Filter开发步骤： 导包 编写过滤器 &lt;!-- Servlet 依赖 --> &lt;dependency> &lt;groupId>javax.servlet&lt;/groupId> &lt;artifactId>servlet-api&lt;/artifactId> &lt;version>2.5&lt;/version> &lt;/dependency> &lt;!-- JSP 依赖 --> &lt;dependency> &lt;groupId>javax.servlet.jsp&lt;/groupId> &lt;artifactId>javax.servlet.jsp-api&lt;/artifactId> &lt;version>2.3.3&lt;/version> &lt;/dependency> &lt;!-- JSTL表达式的依赖--> &lt;dependency> &lt;groupId>javax.servlet.jsp.jstl&lt;/groupId> &lt;artifactId>jstl-api&lt;/artifactId> &lt;version>1.2&lt;/version> &lt;/dependency> &lt;!-- standard标签库--> &lt;dependency> &lt;groupId>taglibs&lt;/groupId> &lt;artifactId>standard&lt;/artifactId> &lt;version>1.1.2&lt;/version> &lt;/dependency> &lt;!-- 连接数据库--> &lt;dependency> &lt;groupId>mysql&lt;/groupId> &lt;artifactId>mysql-connector-java&lt;/artifactId> &lt;version>5.1.47&lt;/version> &lt;/dependency> 实现Filter接口，重写对应的方法即可； 使用Filter设置编码, 防止乱码 public class Filter implements javax.servlet.Filter &#123; @Override public void init(FilterConfig filterConfig) throws ServletException &#123; //项目启动的时候被调用 System.out.println(\"init filter\"); &#125; @Override public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123; servletRequest.setCharacterEncoding(\"UTF-8\"); servletResponse.setCharacterEncoding(\"UTF-8\"); filterChain.doFilter(servletRequest,servletResponse); &#125; 这段代码是Java Servlet中用于实现Filter的接口方法doFilter()的签名。 Filter是一种用于在Servlet容器中对请求和响应进行预处理和后处理的组件。Filter可以截取请求和响应，修改请求参数或响应内容，或者根据某些条件决定是否允许请求继续处理。 doFilter()方法接受三个参数： ServletRequest servletRequest、 ServletResponse servletResponse FilterChain filterChain ServletRequest表示接收到的HTTP请求，ServletResponse表示将要发送的HTTP响应，FilterChain表示Filter链。 在doFilter()方法中，Filter可以对请求和响应进行任何必要的操作。 例如，可以检查请求参数、修改请求头、记录请求日志等。 然后，Filter必须调用filterChain.doFilter()方法，将请求传递给下一个Filter或目标Servlet来进行处理。 如果不调用filterChain.doFilter()方法，请求将不会传递到下一个组件，也不会生成响应。在最后一个Filter或目标Servlet中，必须生成响应并将其发送回客户端。 在Filter链中的每个Filter都必须调用filterChain.doFilter()方法，否则请求将停止在当前Filter，不会传递到后续的Filter或目标Servlet。 如果在Filter链中的某个Filter中调用了filterChain.doFilter()方法之前或之后生成了响应，或者没有调用filterChain.doFilter()方法，都会导致请求失败或无法正常响应。 在web.xml中配置 Filter； &lt;!--mapping filter--> &lt;filter> &lt;filter-name>encode&lt;/filter-name> &lt;filter-class>cn.loulan.servlet.Filter&lt;/filter-class> &lt;/filter> &lt;filter-mapping> &lt;filter-name>encode&lt;/filter-name> &lt;!--只要是 /filter的任何请求，会经过这个过滤器--> &lt;url-pattern>/filter&lt;/url-pattern> &lt;/filter-mapping> 监听器(Listener) 实现一个监听器的接口；（有N种） 编写一个监听器； 实现监听器的接口… public class OnlineCountListener implements HttpSessionListener &#123; // 我们使用一个Integer对象来表示当前在线用户数， // 并且在每次Session创建时，都将在线用户数加1。 // 然后，我们将在线用户数存储在ServletContext中， // 以便在整个Web应用程序中共享和使用。 @Override public void sessionCreated(HttpSessionEvent httpSessionEvent) &#123; ServletContext servletContext = httpSessionEvent.getSession().getServletContext(); Integer onlineCounter = (Integer) servletContext.getAttribute(\"onlineCounter\"); if(onlineCounter == null)&#123; onlineCounter = Integer.valueOf(1); &#125; else &#123; onlineCounter = Integer.valueOf(onlineCounter.intValue() + 1); &#125; servletContext.setAttribute(\"onlineCounter\", onlineCounter); &#125; @Override public void sessionDestroyed(HttpSessionEvent httpSessionEvent) &#123; Integer onlineCounter = (Integer) httpSessionEvent.getSession().getServletContext().getAttribute(\"onlineCounter\"); if(onlineCounter == null)&#123; onlineCounter = Integer.valueOf(0); &#125;else &#123; onlineCounter = Integer.valueOf(onlineCounter.intValue()- 1); &#125; httpSessionEvent.getSession().setAttribute(\"onlineCounter\", onlineCounter); &#125; &#125; 注册监听器 &lt;!-- Listener--> &lt;listener> &lt;listener-class>cn.loulan.servlet.OnlineCountListener&lt;/listener-class> &lt;/listener> 过滤器.监听器常见应用 监听器：GUI编程中经常使用； public class TestPanel &#123; public static void main(String[] args) &#123; // 新建一个窗体 Frame frame = new Frame(\"Happy Day\"); // 面板 Panel panel = new Panel(null); // 设置窗体的布局 frame.setLayout(null); frame.setBounds(300,300,500,500); // 设置背景颜色1 frame.setBackground(Color.lightGray); // 设置背景颜色2 panel.setBackground(Color.orange); panel.setBounds(frame.getX()/2, frame.getY()/2, frame.getWidth()/2, frame.getHeight()/2); frame.add(panel); frame.setVisible(true); // 监听事件，监听关闭事件 frame.addWindowListener(new WindowAdapter() &#123; @Override public void windowClosing(WindowEvent e) &#123; frame.dispose(); &#125; &#125;); &#125; &#125; 过滤器：用户登录之后才能进入主页！用户注销后就不能进入主页了 用户登录之后，向Sesison中放入用户的数据 进入主页的时候要判断用户是否已经登录；要求：在过滤器中实现！ public class Log extends HttpServlet &#123; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; String username = req.getParameter(\"username\"); String password = req.getParameter(\"password\"); HttpSession session = req.getSession(); if(\"admin\".equals(username) &amp;&amp; \"root\".equals(password)) &#123; session.setAttribute(Constants.USER_SESSION,new Person(username,password)); resp.sendRedirect(\"/pages/success.jsp\"); &#125; else &#123; resp.sendRedirect(\"/\"); &#125; &#125; LoginFilter public class LoginFilter extends Filter&#123; @Override public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123; // ServletRequest 转化为 HttpServletRequest // 目的是拿到Session, 以便获取Attribute HttpServletRequest request = (HttpServletRequest) servletRequest; HttpServletResponse response = (HttpServletResponse) servletResponse; Object o = request.getSession().getAttribute(Constants.USER_SESSION); if(o == null) &#123; response.sendRedirect(\"/\"); &#125; filterChain.doFilter(servletRequest, servletResponse); &#125; &#125; LogoutServlet ,public class Logout extends HttpServlet &#123; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; req.getSession().setAttribute(Constants.USER_SESSION,null); resp.sendRedirect(\"/\"); &#125;, &#125; 通过设置Session的Attribute(Constants.USER_SESSION)值为空来实现用户的登录, 这种方式不需要服务器重复创建和销毁Session就可以实现用户的注销, 减轻了服务器负担. JDBC 什么是JDBC ： Java连接数据库！ 需要jar包的支持： java.sql javax.sql mysql-connecter-java… 连接驱动（必须要导入） 加载驱动 连接数据库,代表数据库 编写SQL （根据业务，不同的SQL） 预编译 执行SQL 关闭连接 public static void main(String[] args) throws ClassNotFoundException, SQLException &#123; // 配置信息 // useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码 String url=\"jdbc:mysql://localhost:3307/JDBC?useUnicode=true&amp;characterEncoding=utf-8\"; String username = \"root\"; String password = \"\"; // 2.连接数据库,代表数据库 Connection connection = DriverManager.getConnection(url, username, password); // 3.编写SQL String sql = \"select * from user\"; // 4. 预编译 PreparedStatement preparedStatement = connection.prepareStatement(sql); // 5.执行查询SQL，返回一个 ResultSet ： 结果集 ResultSet rs = preparedStatement.executeQuery(sql); while (rs.next()) &#123; System.out.println(rs.getObject(\"name\")); System.out.println(rs.getObject(\"email\")); System.out.println(rs.getObject(\"password\")); System.out.println(rs.getObject(\"role\")); &#125; // 6.关闭连接，释放资源（一定要做） 先开后关 rs.close(); preparedStatement.close(); connection.close(); &#125; 预编译: 使用占位符 在 JDBC 中，预编译 SQL 的主要目的是提高执行 SQL 语句的效率。当一个 SQL 语句被预编译后，JDBC 驱动程序会将该语句存储在数据库中，并将其与一个预定义的执行计划关联起来。这样，在执行该 SQL 语句时，JDBC 驱动程序可以直接使用预定义的执行计划，而不必重新解析 SQL 语句和生成执行计划，从而提高了执行效率。 另外，预编译 SQL 还可以提高代码的可维护性和安全性。通过使用预编译 SQL，我们可以将 SQL 语句与 Java 代码分离开来，使得代码更易于维护。此外，预编译 SQL 可以避免 SQL 注入等安全问题。 具体地，预编译 SQL 的过程包括两个步骤：首先，使用 Connection 接口中的 prepareStatement() 方法创建一个 PreparedStatement 对象；然后，使用 PreparedStatement 对象的 setXXX() 方法设置 SQL 语句中的参数，并使用 execute() 或 executeUpdate() 方法执行 SQL 语句。 以下是一个使用预编译 SQL 的示例代码： String sql &#x3D; &quot;SELECT * FROM users WHERE name &#x3D; ?&quot;; PreparedStatement pstmt &#x3D; conn.prepareStatement(sql); pstmt.setString(1, &quot;John&quot;); ResultSet rs &#x3D; pstmt.executeQuery(); while (rs.next()) &#123; &#x2F;&#x2F; process the result set &#125; 在上述示例代码中，我们首先使用 prepareStatement() 方法创建了一个 PreparedStatement 对象，然后使用 setString() 方法设置了 SQL 语句中的参数，并最终使用 executeQuery() 方法执行 SQL 语句。这样，在执行 SQL 语句时，JDBC 驱动程序会使用预定义的执行计划，从而提高了执行效率。 SQL注入 SQL 注入（SQL Injection）是一种常见的网络安全漏洞，它允许攻击者在执行 SQL 查询时向查询中插入恶意代码，从而获得对数据库的非授权访问。攻击者可以通过构造特定的 SQL 查询语句，从而绕过身份验证、窃取数据或破坏数据库。 例如，考虑下面的 SQL 查询语句： SELECT * FROM users WHERE username &#x3D; &#39;&lt;input&gt;&#39;; 如果用户输入 &lt;input&gt; 的值为 ' or '1'='1，那么最终的 SQL 查询语句就会变成： SELECT * FROM users WHERE username &#x3D; &#39;&#39; or &#39;1&#39;&#x3D;&#39;1&#39;; 这样就会返回所有用户的记录，而不仅仅是指定的用户名。攻击者可以通过这种方式获取到数据库中的敏感数据或者执行其他恶意操作。 实战: 超市订单管理系统 为了方便表述和理解, 在编写MVC三层对应的代码时, 使用自顶向下, 但在实际的项目中, 编写代码工作往往是自底向上的. 搭建项目框架 编写数据库操作的基础公共类DB 数据库配置文件，这是一个资源文件，应该创建在maven项目的resources文件中 DRIVER=com.mysql.jdbc.Driver URL=jdbc:mysql://localhost:3307/smbms?useUnicode=true&amp;characterEncoding=utf-8 USERNAME=root PASSWORD= 使用静态代码块实现初始化参数 该类为数据库访问工具类，提供了获取数据库连接、执行查询和更新等常用操作的方法。 类名：DB 属性： DRIVER：String类型，表示数据库驱动名。 URL：String类型，表示数据库连接地址。 USERNAME：String类型，表示连接数据库的用户名。 PASSWORD：String类型，表示连接数据库的密码。 方法： close：用于释放数据库连接、预处理语句和结果集资源。 getConnection：用于获取数据库连接。 executeQuery：用于执行查询操作，返回一个结果集。 executeUpdate：用于执行更新操作，返回受影响的行数。 方法的参数： conn：Connection类型，表示数据库连接。 pstmt：PreparedStatement类型，表示预处理语句。 resSet：ResultSet类型，表示结果集。 query：String类型，表示要执行的SQL语句。 params：Object[]类型，表示SQL语句中的参数值。 在类中还定义了一个静态代码块，该代码块在类加载时会被执行。静态代码块中的主要作用是读取配置文件中的数据库连接参数，并将其赋值给类的静态属性。具体实现如下： 创建Properties对象。 通过类加载器加载配置文件为字节输入流。 使用Properties对象的load()方法加载字节输入流中的内容。 从Properties对象中获取数据库连接参数，并将其赋值给类的静态属性。 通过这种方式，可以在不修改Java代码的情况下，更改数据库连接参数，提高了代码的灵活性和可维护性。 public class DB &#123; private static String DRIVER; private static String URL; private static String USERNAME; private static String PASSWORD; //静态代码块， 类加载的时候执行 static &#123; //读取配置文件 //1、创建properties对象 Properties properties = new Properties(); //2、通过类加载器加载资源文件为字节输入流 InputStream in = DB.class.getClassLoader().getResourceAsStream(\"db.properties\"); try &#123; properties.load(in); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; DRIVER = properties.getProperty(\"DRIVER\"); URL = properties.getProperty(\"URL\"); USERNAME = properties.getProperty(\"USERNAME\"); PASSWORD = properties.getProperty(\"PASSWORD\"); &#125; &#125; 编写数据库操作的公共方法 该类为数据库访问工具类，提供了获取数据库连接、执行查询和更新等常用操作的方法。 类名：DB 属性： DRIVER：String类型，表示数据库驱动名。 URL：String类型，表示数据库连接地址。 USERNAME：String类型，表示连接数据库的用户名。 PASSWORD：String类型，表示连接数据库的密码。 方法： close：用于释放数据库连接、预处理语句和结果集资源。 getConnection：用于获取数据库连接。 executeQuery：用于执行查询操作，返回一个结果集。 executeUpdate：用于执行更新操作，返回受影响的行数。 方法的参数： conn：Connection类型，表示数据库连接。 pstmt：PreparedStatement类型，表示预处理语句。 resSet：ResultSet类型，表示结果集。 query：String类型，表示要执行的SQL语句。 params：Object[]类型，表示SQL语句中的参数值。 该类还包含一个静态代码块，用于初始化数据库连接参数，但代码块的内容未给出，需要进行补充。 同时需要注意，该类并没有实现单例模式，每次获取数据库连接都会重新创建一个新的连接，这可能会导致性能问题。 public class DB &#123; private static String DRIVER; private static String URL; private static String USERNAME; private static String PASSWORD; //插入静态代码块(need to fininsh) //释放链接资源 public static void close(Connection conn, PreparedStatement pstmt, ResultSet resSet) throws SQLException &#123; if(resSet != null)&#123; resSet.close(); &#125; if(pstmt != null)&#123; pstmt.close(); &#125; if(conn != null) &#123; conn.close(); &#125; &#125; //获取数据库链接 public static Connection getConnection() throws SQLException, ClassNotFoundException &#123; Class.forName(DRIVER); String url = URL; String username = USERNAME; String password = PASSWORD; // 2.连接数据库,代表数据库 Connection connection = DriverManager.getConnection(url, username, password); return connection; &#125; //执行查询, 返回结果集 public static ResultSet executeQuery(Connection conn,String query,Object[] params) throws SQLException, ClassNotFoundException&#123; ResultSet resultSet = null; if(conn != null &amp;&amp; !query.isEmpty() &amp;&amp; params != null)&#123; //预处理 PreparedStatement statement = conn.prepareStatement(query); for (int i = 0; i &lt; params.length;i++)&#123; //设置SQL 语句中的参数 statement.setString(i+1,params[i].toString()); &#125; //执行 resultSet = statement.executeQuery(); &#125; return resultSet; &#125; //执行更新， 返回影响行数 public static int executeUpdate(Connection conn,String query,Object[] params) throws SQLException &#123; int affectedRows = 0; if(conn != null &amp;&amp; !query.isEmpty() &amp;&amp; params != null)&#123; //预处理 PreparedStatement statement = conn.prepareStatement(query); for (int i = 0; i &lt; params.length;i++)&#123; //设置SQL 语句中的参数 statement.setString(i+1,params[i].toString()); &#125; //执行 affectedRows = statement.executeUpdate(); &#125; return affectedRows; &#125; &#125; 登录功能实现 前端页面编写 前端页面由kuang提供 &lt;%-- header--%&gt; &lt;form class&#x3D;&quot;loginForm&quot; action&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;login.do&quot; name&#x3D;&quot;actionForm&quot; id&#x3D;&quot;actionForm&quot; method&#x3D;&quot;post&quot;&gt; &lt;div class&#x3D;&quot;info&quot;&gt;$&#123;error&#125;&lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;inputbox&quot;&gt; &lt;label&gt;用户名：&lt;&#x2F;label&gt; &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;input-text&quot; id&#x3D;&quot;userCode&quot; name&#x3D;&quot;userCode&quot; placeholder&#x3D;&quot;请输入用户名&quot; required&#x2F;&gt; &lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;inputbox&quot;&gt; &lt;label&gt;密码：&lt;&#x2F;label&gt; &lt;input type&#x3D;&quot;password&quot; id&#x3D;&quot;userPassword&quot; name&#x3D;&quot;userPassword&quot; placeholder&#x3D;&quot;请输入密码&quot; required&#x2F;&gt; &lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;subBtn&quot;&gt; &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;登录&quot;&#x2F;&gt; &lt;input type&#x3D;&quot;reset&quot; value&#x3D;&quot;重置&quot;&#x2F;&gt; &lt;&#x2F;div&gt; &lt;&#x2F;form&gt; &lt;%-- footer--%&gt; 登录处理Servlet实现 在前端form表单的action属性值我们可以看到提交的URL, 所以, 我们需要编写对应的Servlet来处理这个请求 action&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;login.do&quot; 创建登录处理Servlet 以下是一个名为“Login”的Java servlet类，用于处理HTTP GET请求。该类包括对“UserService”实例的引用，该实例用于从数据库中检索用户信息。 在“doGet”方法中，servlet从HTTP请求中检索userCode和password参数。然后它创建一个“UserServiceImpl”类的新实例（该类实现了“UserService”接口），并调用其“findByUserCode”方法，以根据给定的用户代码从数据库中检索用户对象。 如果用户对象不为null，则servlet检查用户密码是否与给定密码匹配。如果匹配，则servlet使用用户对象设置名为“USER_SESSION”的会话属性，并将用户重定向到“/jsp/frame.jsp”。如果密码不匹配，则servlet使用错误消息设置名为“error”的会话属性，并将用户重定向回“/login.jsp”。 请注意，此代码片段不完整，因为它缺少有关导入，它所依赖的接口和类，以及servlet配置的信息。 public class Login extends HttpServlet &#123; private UserService service; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; String userCode = req.getParameter(\"userCode\"); String password = req.getParameter(\"userPassword\"); service = new UserServiceImpl(); User user = null; user = service.findByUserCode(userCode); if(user != null) &#123; if(user.getUserPassword().equals(password)) &#123; req.getSession().setAttribute(Constant.USER_SESSION,user); resp.sendRedirect(\"/jsp/frame.jsp\"); &#125; else &#123; req.getSession().setAttribute(\"error\",\"username or password incorrect\"); resp.sendRedirect(\"/login.jsp\"); &#125; &#125; &#125; 映射 servlet 这段代码是一个 servlet 配置的 XML 部分，它用于将请求的 URL 映射到特定的 servlet 上。这段配置指定了一个名为 “Login” 的 servlet，使用了完整的类名 servlet.Login，并将它映射到 URL “/login.do” 上。 这意味着，当用户在浏览器中访问 “/login.do” 时，容器将调用 servlet.Login 的 service() 方法来处理该请求。映射 servlet 的操作是 web 应用的一部分，它在 web.xml 文件中进行配置。 &lt;servlet> &lt;servlet-name>Login&lt;/servlet-name> &lt;servlet-class>servlet.Login&lt;/servlet-class> &lt;/servlet> &lt;servlet-mapping> &lt;servlet-name>Login&lt;/servlet-name> &lt;url-pattern>/login.do&lt;/url-pattern> &lt;/servlet-mapping> 编写Service层代码 该代码是一个 Java 类 UserServiceImpl，实现了一个接口 UserService。该类包含了两个方法： findByUserCode(String userCode)：查找数据库中对应用户的信息，该方法返回一个 User 对象。 updateUser(Integer id, String key, String value)：更新数据库中用户的信息，该方法返回一个 boolean 类型的值，表示更新是否成功。 在这个类中，私有成员变量 dao 是一个 UserDao 类型的变量，通过该变量调用 UserDaoImpl 类中的方法来访问数据库。在 findByUserCode 和 updateUser 方法中，都需要先通过 dao 实例化一个 UserDaoImpl 对象来调用相应的方法。 public class UserServiceImpl implements UserService &#123; private UserDao dao; @Override public User findByUserCode(String userCode)&#123; dao = new UserDaoImpl(); User user = dao.findByUserCode(userCode); return user; &#125; @Override public boolean updateUser(Integer id, String key, String value) &#123; dao = new UserDaoImpl(); int i = 0; i = dao.updateUser(id, key, value); return i > 0 ? true : false; &#125; &#125; DAO层代码 这段代码是一个Dao层的实现类，用于和数据库交互，提供了对User表的查询和更新方法。下面是代码的分析： findByUserCode(String userCode) 方法：根据传入的用户名参数 userCode 查询对应的用户记录，并返回一个User对象。该方法使用了数据库连接池技术，在执行完查询后会关闭连接。方法中首先初始化参数，然后执行SQL语句查询结果集，遍历结果集将数据封装到User对象中，最后关闭连接和结果集，返回User对象。 updateUser(Integer id, String key,String value) 方法：根据传入的参数更新User表中的数据。该方法也使用了数据库连接池技术，在执行完更新后会关闭连接。方法中首先判断传入的参数是否为空，然后执行SQL语句更新数据，最后关闭连接，返回更新结果的影响行数。 public class UserDaoImpl implements UserDao&#123; private User user; private Connection conn; private String sql; @Override public User findByUserCode(String userCode)&#123; //2. 初始化参数 Object[] params = &#123;userCode&#125;; ResultSet set; sql = \"SELECT * FROM smbms_user Where userCode = ?\"; try &#123; conn = DB.getConnection(); set = DB.executeQuery(conn, sql,params); if(set != null)&#123; user = new User(); while (set.next()) &#123; user.setUserPassword(set.getString(\"userPassword\")); //一大串赋值代码... user.setWorkPicPath(\"workPicPath\"); &#125; &#125; else &#123; return null; &#125; //关闭链接和结果集 DB.close(conn,null,set); &#125; catch (SQLException e) &#123; throw new RuntimeException(e); &#125; catch (ClassNotFoundException e) &#123; throw new RuntimeException(e); &#125; return user; &#125; @Override public int updateUser(Integer id, String key,String value) &#123; int affectedRow = 0; if(id != null&amp;&amp; value != null &amp;&amp; key != null)&#123; Connection conn = null; sql = \"UPDATE smbms_user SET \"+key+\" = ? WHERE id = ? \"; Object[] params = &#123;value,id&#125;; try &#123; conn = DB.getConnection(); affectedRow = DB.executeUpdate(conn, sql, params); DB.close(conn,null,null); &#125; catch (SQLException e) &#123; throw new RuntimeException(e); &#125; catch (ClassNotFoundException e) &#123; throw new RuntimeException(e); &#125; &#125; return affectedRow; &#125; 密码修改实现 前端页面 JSP部分: 页面显示 &lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt; &lt;%@include file&#x3D;&quot;&#x2F;jsp&#x2F;common&#x2F;head.jsp&quot; %&gt; &lt;div class&#x3D;&quot;right&quot;&gt; &lt;div class&#x3D;&quot;location&quot;&gt; &lt;strong&gt;你现在所在的位置是:&lt;&#x2F;strong&gt; &lt;span&gt;密码修改页面&lt;&#x2F;span&gt; &lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;providerAdd&quot;&gt; &lt;form id&#x3D;&quot;userForm&quot; name&#x3D;&quot;userForm&quot; method&#x3D;&quot;post&quot; action&#x3D;&quot;$&#123;pageContext.request.contextPath &#125;&#x2F;jsp&#x2F;user.do&quot;&gt; &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;method&quot; value&#x3D;&quot;savepwd&quot;&#x2F;&gt; &lt;!--div的class 为error是验证错误，ok是验证成功--&gt; &lt;div class&#x3D;&quot;info&quot;&gt;$&#123;message&#125;&lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;&quot;&gt; &lt;label for&#x3D;&quot;oldPassword&quot;&gt;旧密码：&lt;&#x2F;label&gt; &lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;oldpassword&quot; id&#x3D;&quot;oldpassword&quot; value&#x3D;&quot;&quot;&gt; &lt;font color&#x3D;&quot;red&quot;&gt;&lt;&#x2F;font&gt; &lt;&#x2F;div&gt; &lt;div&gt; &lt;label for&#x3D;&quot;newPassword&quot;&gt;新密码：&lt;&#x2F;label&gt; &lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;newpassword&quot; id&#x3D;&quot;newpassword&quot; value&#x3D;&quot;&quot;&gt; &lt;font color&#x3D;&quot;red&quot;&gt;&lt;&#x2F;font&gt; &lt;&#x2F;div&gt; &lt;div&gt; &lt;label for&#x3D;&quot;newPassword&quot;&gt;确认新密码：&lt;&#x2F;label&gt; &lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;rnewpassword&quot; id&#x3D;&quot;rnewpassword&quot; value&#x3D;&quot;&quot;&gt; &lt;font color&#x3D;&quot;red&quot;&gt;&lt;&#x2F;font&gt; &lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;providerAddBtn&quot;&gt; &lt;!--&lt;a href&#x3D;&quot;#&quot;&gt;保存&lt;&#x2F;a&gt;--&gt; &lt;input type&#x3D;&quot;button&quot; name&#x3D;&quot;save&quot; id&#x3D;&quot;save&quot; value&#x3D;&quot;保存&quot; class&#x3D;&quot;input-button&quot;&gt; &lt;&#x2F;div&gt; &lt;&#x2F;form&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;section&gt; &lt;%@include file&#x3D;&quot;&#x2F;jsp&#x2F;common&#x2F;foot.jsp&quot; %&gt; &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;$&#123;pageContext.request.contextPath &#125;&#x2F;statics&#x2F;js&#x2F;pwdmodify.js&quot;&gt;&lt;&#x2F;script&gt; 这是一个用 JSP（JavaServer Pages）编写的网页代码，用于修改密码。页面包括一个表单，用户可以在其中输入旧密码、新密码和确认新密码。表单使用POST方法提交到服务器，并使用“/jsp/user.do” URL。 页面包括一个消息区域，用于显示任何错误消息。页面还包括指向名为“pwdmodify.js”的 JavaScript 文件的链接。这个文件应该包含表单的客户端验证逻辑。 页面使用 JSP 表达式语言（EL）将动态内容插入到 HTML 中。例如，页面使用表达式 “${pageContext.request.contextPath}/statics/js/pwdmodify.js” 插入一个链接到 CSS 文件。“${pageContext.request.contextPath}” 表达式计算为 web 应用程序的上下文路径，用于构造 CSS 文件的完整 URL。 JavaScript 表单的客户端验证逻辑 var oldpassword = null; var newpassword = null; var rnewpassword = null; var saveBtn = null; $(function()&#123; oldpassword = $(\"#oldpassword\"); newpassword = $(\"#newpassword\"); rnewpassword = $(\"#rnewpassword\"); saveBtn = $(\"#save\"); oldpassword.next().html(\"*\"); newpassword.next().html(\"*\"); rnewpassword.next().html(\"*\"); oldpassword.on(\"blur\",function()&#123; $.ajax(&#123; type:\"GET\", url:path+\"/jsp/user.do\", data:&#123;method:\"pwdmodify\",oldpassword:oldpassword.val()&#125;, dataType:\"json\", success:function(data)&#123; if(data.result == \"true\")&#123;//旧密码正确 validateTip(oldpassword.next(),&#123;\"color\":\"green\"&#125;,imgYes,true); &#125;else if(data.result == \"false\")&#123;//旧密码输入不正确 validateTip(oldpassword.next(),&#123;\"color\":\"red\"&#125;,imgNo + \" 原密码输入不正确\",false); &#125;else if(data.result == \"sessionerror\")&#123;//当前用户session过期，请重新登录 validateTip(oldpassword.next(),&#123;\"color\":\"red\"&#125;,imgNo + \" 当前用户session过期，请重新登录\",false); &#125;else if(data.result == \"error\")&#123;//旧密码输入为空 validateTip(oldpassword.next(),&#123;\"color\":\"red\"&#125;,imgNo + \" 请输入旧密码\",false); &#125; &#125;, error:function(data)&#123; //请求出错 validateTip(oldpassword.next(),&#123;\"color\":\"red\"&#125;,imgNo + \" 请求错误\",false); &#125; &#125;); &#125;).on(\"focus\",function()&#123; validateTip(oldpassword.next(),&#123;\"color\":\"#666666\"&#125;,\"* 请输入原密码\",false); &#125;); newpassword.on(\"focus\",function()&#123; validateTip(newpassword.next(),&#123;\"color\":\"#666666\"&#125;,\"* 密码长度必须是大于6小于20\",false); &#125;).on(\"blur\",function()&#123; if(newpassword.val() != null &amp;&amp; newpassword.val().length > 5 &amp;&amp; newpassword.val().length &lt; 20 )&#123; validateTip(newpassword.next(),&#123;\"color\":\"green\"&#125;,imgYes,true); &#125;else&#123; validateTip(newpassword.next(),&#123;\"color\":\"red\"&#125;,imgNo + \" 密码输入不符合规范，请重新输入\",false); &#125; &#125;); rnewpassword.on(\"focus\",function()&#123; validateTip(rnewpassword.next(),&#123;\"color\":\"#666666\"&#125;,\"* 请输入与上面一致的密码\",false); &#125;).on(\"blur\",function()&#123; if(rnewpassword.val() != null &amp;&amp; rnewpassword.val().length > 5 &amp;&amp; rnewpassword.val().length &lt; 20 &amp;&amp; newpassword.val() == rnewpassword.val())&#123; validateTip(rnewpassword.next(),&#123;\"color\":\"green\"&#125;,imgYes,true); &#125;else&#123; validateTip(rnewpassword.next(),&#123;\"color\":\"red\"&#125;,imgNo + \" 两次密码输入不一致，请重新输入\",false); &#125; &#125;); saveBtn.on(\"click\",function()&#123; oldpassword.blur(); newpassword.blur(); rnewpassword.blur(); if( oldpassword.attr(\"validateStatus\") == \"true\" &amp;&amp; newpassword.attr(\"validateStatus\") == \"true\" &amp;&amp; rnewpassword.attr(\"validateStatus\") == \"true\")&#123; if(confirm(\"确定要修改密码？\"))&#123; $(\"#userForm\").submit(); &#125; &#125; &#125;); &#125;); 这是一个 JavaScript 代码段，它使用 jQuery 库为一个包含密码修改表单的网页添加了客户端验证逻辑。代码使用 AJAX 技术从服务器获取 JSON 格式的响应数据，以验证用户输入的旧密码是否正确，并在页面上显示相关提示信息。 代码中首先定义了四个变量，分别是旧密码、新密码、确认新密码和提交按钮的 jQuery 对象。然后使用 $() 函数将代码包装在一个回调函数中，确保代码在文档加载完成后才执行。回调函数内部做了以下工作： 通过选择器获取页面上的旧密码输入框、新密码输入框、确认新密码输入框和提交按钮，并将它们的 jQuery 对象赋值给前面定义的四个变量。 为旧密码输入框绑定 blur 事件处理函数，当输入框失去焦点时，使用 $.ajax() 函数向服务器发送 GET 请求，验证用户输入的旧密码是否正确，并根据服务器返回的响应数据显示相应的提示信息。在成功回调函数中，根据 data.result 的值判断旧密码是否正确，并通过 validateTip() 函数显示相应的提示信息。在失败回调函数中，显示请求出错的提示信息。 为旧密码输入框绑定 focus 事件处理函数，当输入框获得焦点时，显示输入提示信息。 为新密码输入框绑定 focus 和 blur 事件处理函数，当输入框获得焦点时，显示输入提示信息；当输入框失去焦点时，判断用户输入的新密码是否符合规范，如果符合则显示正确提示，否则显示错误提示。 为确认新密码输入框绑定 focus 和 blur 事件处理函数，当输入框获得焦点时，显示输入提示信息；当输入框失去焦点时，判断用户输入的确认新密码是否与新密码一致，如果一致则显示正确提示，否则显示错误提示。 为提交按钮绑定 click 事件处理函数，当按钮被点击时，先让旧密码、新密码和确认新密码输入框失去焦点，然后判断它们的验证状态是否都为 true，如果是，则显示确认修改密码的提示框，如果用户点击确定，则提交表单，将新密码保存到服务器上。 编写处理Servlet public class UserDo extends HttpServlet &#123; private UserService service; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; String method = req.getParameter(\"method\"); if(\"savepwd\".equals(method))&#123; savePwd(req, resp); &#125; else if(\"pwdmodify\".equals(method))&#123; pwdModify(req, resp); &#125; &#125; protected void savePwd(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; //拿到USer Session , 用于得到用户id HttpSession session = req.getSession(); User user = (User) session.getAttribute(Constant.USER_SESSION); String newPwd = req.getParameter(\"newpassword\"); System.out.println(\"用户输入的：new password: \"+newPwd); System.out.println(\"Session password: \"+user.getUserPassword()+\", id: \"+ user.getId()); Integer id = user.getId(); boolean flag; //method 值为 savepwd, 表示用户执行修改密码操作 if(newPwd != null)&#123; service = new UserServiceImpl(); flag = service.updateUser(id, \"userPassword\", newPwd); //修改成功 if(flag)&#123; System.out.println(\"修改成功\"); req.setAttribute(\"message\",\"密码修改成功， 请重新登录\"); // 移除Session session.removeAttribute(Constant.USER_SESSION); &#125; else &#123; System.out.println(\"密码修改失败\"); req.setAttribute(\"message\",\"密码修改失败\"); &#125; &#125; else &#123; req.setAttribute(\"message\",\"新密码格式错误\"); &#125; //转发到当前页面, 不用重定向而使用转发是为了传统参数（attribute) 通知前端密码修改结果（by attribute message） req.getRequestDispatcher(\"/jsp/pwdmodify.jsp\").forward(req,resp); &#125; /* 由ajax发起的密码查询请求， 用户进行密码修改时触发 放回前端json， ajax用于比对旧密码正确性, */ protected void pwdModify(HttpServletRequest req, HttpServletResponse resp)&#123; HttpSession session = req.getSession(); Object user = session.getAttribute(Constant.USER_SESSION); Map&lt;String, String> map = new HashMap&lt;String, String>(); if(user != null)&#123; String password = ((User) user).getUserPassword(); String inputPwd = req.getParameter(\"oldpassword\"); if(inputPwd != null &amp;&amp; inputPwd.length() > 0)&#123; //旧密码正确 if(inputPwd.equals(password))&#123; map.put(\"result\",\"true\"); &#125; else &#123; //旧密码不正确 map.put(\"result\",\"false\"); &#125; &#125; else &#123; //密码输入为空 map.put(\"result\",\"error\"); &#125; &#125; else &#123; //session timeout map.put(\"result\",\"sessionerror\"); &#125; //返回前端json数据 resp.setContentType(\"application/json\"); try &#123; PrintWriter writer = resp.getWriter(); writer.write(JSONArray.toJSONString(map)); writer.flush(); writer.close(); &#125; catch (IOException e) &#123; throw new RuntimeException(e); &#125; &#125; &#125; 这段代码是一个Java Web应用程序中的Servlet，用于处理用户密码修改操作。 在doGet()方法中，根据请求参数&quot;method&quot;的值进行不同的操作。如果&quot;method&quot;的值是&quot;savepwd&quot;，则调用savePwd()方法，保存新密码；如果&quot;method&quot;的值是&quot;pwdmodify&quot;，则调用pwdModify()方法，用于检查旧密码是否正确。 在savePwd()方法中，首先从Session中获取当前用户的信息，然后获取新密码，并使用UserService接口的实现类UserServiceImpl来更新用户密码。如果更新成功，将信息存储在请求属性中，并移除Session中的用户信息，最后将请求转发到密码修改页面。 在pwdModify()方法中，首先获取当前用户的信息，然后获取旧密码。如果旧密码不为空，则将输入的旧密码与Session中存储的旧密码进行比较。如果输入的旧密码与Session中的旧密码相同，则返回前端JSON数据，表示旧密码正确；否则返回JSON数据，表示旧密码不正确。 需要注意的是，在返回JSON数据之前，需要设置响应的Content-Type为&quot;application/json&quot;。 映射Servlet &lt;servlet> &lt;servlet-name>userDo&lt;/servlet-name> &lt;servlet-class>servlet.UserDo&lt;/servlet-class> &lt;/servlet> &lt;servlet-mapping> &lt;servlet-name>userDo&lt;/servlet-name> &lt;url-pattern>/jsp/user.do&lt;/url-pattern> &lt;/servlet-mapping>","categories":[{"name":"Java web","slug":"Java-web","permalink":"https://trevoewu.github.io/categories/Java-web/"}],"tags":[{"name":"JavaWeb","slug":"JavaWeb","permalink":"https://trevoewu.github.io/tags/JavaWeb/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://trevoewu.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}]},{"title":"Wireshark Lab: Ethernet and ARP","slug":"Wireshark-Lab-Ethernet-and-ARP","date":"2023-05-08T11:02:02.000Z","updated":"2023-05-08T13:26:30.036Z","comments":true,"path":"2023/05/08/Wireshark-Lab-Ethernet-and-ARP/","link":"","permalink":"https://trevoewu.github.io/2023/05/08/Wireshark-Lab-Ethernet-and-ARP/","excerpt":"","text":"官方英文文档：Wireshark_Intro_v6.01.pdf 以下内容为笔者翻译： Wireshark 实验: Ethernet and ARP v7.0 《计算机网络：自顶向下方法（第6版）》补充材料，J.F. Kurose and K.W. Ross “不闻不若闻之，闻之不若见之，见之不若知之，知之不若行之。” ——中国谚语 © 2005-2012, J.F Kurose and K.W. Ross, All Rights Reserved 在本实验中，我们将研究以太网协议和 ARP 协议。在开始实验之前， 您可以查看课本的 6.4.1 节（链路层地址和 ARP）和 6.4.2（以太网）, 您也可以去看 RFC 826(ftp://ftp.rfc-editor.org/in-notes/std/std37.txt)了解关于 ARP 的协议详细信息,该协议可以根据 IP 地址获取远程主机的的物理地址。 捕获和分析以太网帧 让我们从捕获一组以太网帧开始研究。 请执行下列操作 : 首先，清除浏览器缓存。 在Firefox 下执行此操作，请选择 历史记录，然后选中清除历史记录。 然后启动 Wireshark 数据包嗅探器 打开以下 URL http://gaia.cs.umass.edu/wireshark-labs/HTTP-ethereal-lab-file3.html 您的浏览器应显示相当冗长的美国权利法案。 接下来停止 Wireshark 数据包捕获，找到您向 gaia.cs.umass.edu 的 HTTP GET 消 息的数据包编号以及 gaia.cs.umass.edu 相应您的 HTTP 回应。您的抓包结果应 看起来向下面一样: 由于本实验是关于以太网和 ARP 的，我们对 IP 或更高层协议不感兴趣。 因此，让我们更改 Wireshark 的“捕获数据包列表”窗口，以便它仅显示有关 IP 以下协议的信息。 要让 Wireshark 执行此操作，请选择 Analyze-&gt; Enabled Protocols(分析-启用的协议)。 然后取消选中 IP 框(译者注:这里指的 IPV4 协议，下面有搜索)并选择确定。 您现在 Wireshark 窗口应该如下所示: 为了回答以下问题，您需要查看数据包详细信息和数据包内容窗口(Wireshark 中 的中间和下部显示窗口，译者注: 若您看到的不是如此-建议您重置布局(视图-重 置布局))。 选择包含 HTTP GET 消息的以太网帧。 (回想一下，HTTP GET 请求是被加上 TCP 头封装到 TCP 段进行传输,TCP 段加上 IP 头被封装到 IP 数据报进行传输,IP 数 据报又被加上以太网头封装成以太网帧进行传输;如果你发现这个封装有点令人困 惑，请重读文本中的第 1.5.2 节)。 在数据包详细信息窗口中展开以太网 II 信息。 请注意，以太网帧的内容(标题以及有效负载)显示在数据包内容窗口中 根据包含 HTTP GET 消息的以太网帧进行分析，如果有可能建议您使用标记的方式展现您的答案。 你的电脑 48 位的地址是多少 以太网帧中的 48 位目标地址是什么?这是 gaia.cs.umass.edu 的以太网地址 吗?(提示:答案是否定的)。那么它是什么?注意这一题可能会犯错，请 阅读 468-469(中文版 305-308 页)然后理解它 下一跳路由器的对应接口的MAC地址. 以太网帧上层协议 16 进制值是什么?这对应的上层协议是什么? 从以太帧的开始，一直到“GET”中的 ASCII“G”出现在以太网帧中為止，有多 少字节? G 的ascii码为0x47, 对应地址为0x0042, 故在这之前共有0x43字节, 即67Byte 接下来，根据包含 HTTP 响应消息的第一个字节的以太网帧的内容，回答以下问题 这个以太网帧中，以太网源地址的值是多少?这是你的计算机的地址，还是gaia.cs.umass.edu 的地址(提示:答案是否定的)。拥有这个以太网地址的设备是什么? ANS: 是最后一跳路由器网卡的MAC地址 以太网帧中的目的地址是什么?这是您的计算机的以太网地址吗? ANS: 是的 以太网帧上层协议 16 进制值是什么?这对应的上层协议是什么? ANS: 0x0800, IPv4 从以太帧的开始，一直到“OK”中的 ASCII“O”出现在以太网帧中为止，有多少字节? ANS: 0x4f Byte, 79Byte The Address Resolution Protocol 地址解析协议 在本节中，我们将观察 ARP 协议的作用。我们强烈建议您在继续实验之前重读课文 6.4.1 节 ARP Caching(ARP 缓存) 回想一下，ARP 协议通常在您的计算机上维护 IP 到以太网地址转换对的缓存.arp 命令(在 MSDOS 和 Linux / Unix 中)用于查看和操作此缓存的内容。由于 arp 命 令和 ARP 协议具有相同的名称，因此很容易混淆它们。但请记住，它们是不同的: arp 命令用于查看和操作 ARP 缓存内容，而 ARP 协议定义了发送和接收的消息的 格式和含义，并定义了对消息传输和接收所采取的操作。 我们来看看您计算机上 ARP 缓存的内容: MS-DOS:arp 命令位于 c:\\windows\\system32 中，因此在 MS-DOS 命令行中 输入“arp”或“c:\\windows\\system32\\arp”(没有引号) Linux/Unix/MacOS. 根据安装位置不同路径而不同，一般有/sbin/arp (linux) 和/usr/etc/arp (Unix) 没有参数的 Windows arp 命令将显示计算机上 ARP 缓存的内容。运行 ARP 命 令。 写下计算机 ARP 缓存的内容。每个列值的含义是什么? // mac/linux arp commend by tldr - Show the current ARP table: arp -a - Delete a specific entry: arp -d address - Create an entry in the ARP table: arp -s address mac_address IP地址, MAC地址 为了观察您的计算机发送和接收 ARP 消息，我们需要清除 ARP 缓存，否则您的计算机很可能在其缓存中找到所需的 IP-Ethernet 地址转换关系，因此不会发送 ARP 消息。 MS-DOS:MS-DOS arp -d 命令将清除 ARP 缓存。-d 标志指示删除操作， * 是表示删除所有表项的通配符。 Linux/Unix/MacOS: 清除 arp 缓存的 arp –d *需要 root 权限，如果您没有也没办法使用 Windows 系统进行实验，请下载作者的抓包结果。 所有在Linux系统下 arp -d $ip 命令只能清除一个IP地址的对应MAC地址缓存，当然可以使用组合命令操作，这也算是Linux的一个优点吧。 Observing ARP in action 抓取 ARP 消息 请进行以下操作: 清除你的 ARP 缓存，如上所述。 sudo arp -a -d //clear arp cahce in mac os 接下来，确保浏览器的缓存是空的。 启动 Wireshark 捕捉封包 打开以下 URL，http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-lab-file3.html。你的浏览器应该再次显示相当长的美国权利法案 同样设置不显示 IP 和更高层协议，请选择 Analyze-&gt; Enabled Protocols(分析 -启用的协议)。 然后取消选中 IP 框(译者注:这里指的 IPV4 协议，下面有 搜索)并选择确定。 您现在 Wireshark 窗口应该如下所示: 图示是作者的抓包结果截图，您可以发现第 1，2，6 帧都包含 ARP 消息 Answer the following questions: (回答下列问题) 包含 ARP 请求消息的以太网帧中源和目标地址的十六进制值是什么? 以太网帧上层协议 16 进制值是什么? 下载 ARP 规范(ftp://ftp.rfc-editor.org/in-notes/std/std37.txt.),讨论请移步 (http://www.erg.abdn.ac.uk/users/gorry/course/inet-pages/arp.html) a) ARP 操作码字段开始从以太网帧的最开始有多少字节? 0x13Byte = 19Byte, 操作码：1为ARP请求，2为ARP应答，3为RARP请求，4为RARP应答。 b) 在进行 ARP 请求的以太网帧的 ARP 负载部分中，操作码字段的值是 多少? 操作码1为ARP请求 c) ARP 消息是否包含发送方的 IP 地址? 不包括. d) 在 ARP 请求中从哪里看出我们要查询相应 IP 的以太网地址? 图中蓝色部分, 可以看到要查询的IP(16进制), 转换为十进制为: 10.51.187.123 找到相应 ARP 请求的而发送 ARP 回复 1. a) ARP 操作码字段开始从以太网帧的最开始有多少字节? 2. b) 在进行 ARP 响应的以太网帧的 ARP 负载部分中，操作码字段的值是 多少? 2, 表示ARP响应 3. c) 在响应 ARP 中从哪里看出现早期 ARP 请求的答案? 响应ARP中的源MAC地址 包含 ARP 回复消息的以太网帧中的源地址和目标地址的十六进制值是多 少? 在作者抓包结果中，他有两台电脑，一台运行 wireshark 进行抓包，一台没 有，那么为什么运行 wireshark 那台电脑发送 ARP 请求得到了应答，另外一 台电脑的 ARP 请求没有得到应答?(没有相应第 6 帧的 ARP 的请求) 请求ARP的目标MAC地址48位全1, 是广播地址, 所以局域网设备都能收到, 而响应ARP是单播地址, 目标MAC为请求目标的MAC地址, 故只有发起对该IP请求对电脑能收到. Extra Credit 额外实验 EX-1. The arp command: arp 命令: arp -s InetAddr EtherAddr 这个命令允许你手动添加 arp 记录到缓存表中。它会把您输入的 IP 地址 (InetAddr)解析为物理地址(EtherAddr)，请问您输入正确 IP 地址但是物理地 址错误会发生什么。 成功写入了, 类型为permanent, 没有发生什么, 而且可以在ARP table中看到两条同一IP地址的不同MAC地址条目. EX-2. 在删除 ARP 缓存之前，请问它们默认的有效时间是多少，您可以通过不定 时的查看缓存内容得出结论或者查询相应的操作系统文档。","categories":[{"name":"学习记录","slug":"学习记录","permalink":"https://trevoewu.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"computer network","slug":"computer-network","permalink":"https://trevoewu.github.io/tags/computer-network/"}]},{"title":"Wireshark Lab 802.11","slug":"Wireshark-Lab-802-11","date":"2023-05-08T10:36:45.000Z","updated":"2023-05-08T11:01:19.094Z","comments":true,"path":"2023/05/08/Wireshark-Lab-802-11/","link":"","permalink":"https://trevoewu.github.io/2023/05/08/Wireshark-Lab-802-11/","excerpt":"","text":"Wireshark 实验: 802.11 《计算机网络：自顶向下方法（第6版）》补充材料，J.F. Kurose and K.W. Ross “不闻不若闻之，闻之不若见之，见之不若知之，知之不若行之。” ——中国谚语 © 2005-2012, J.F Kurose and K.W. Ross, All Rights Reserved 在本实验中，我们将研究 802.11 无线协议。在开始本实验之前，建议您重新阅读课本的中第 7.3 节。因为我们将比课本深入研究 802.11 协议内容，因此您可能需要查看 Pablo Brenner (Breezecom Communications)写的《802.11 协议技术指南》ATechnical Tutorial on the 802.11Protocol 以及 Jim Geier 写的《了解 802.11 帧类型》Understanding 802.11 Frame Types 。当然，您还需要查阅 802.11 的圣经-它的标准书《ANSI / IEEE 标准 802.11,1999 版(R2003)》(ANSI/IEEE Std 802.11, 1999 Edition (R2003)。您可能会发现标准书第 36 页的表 1 在分析无线跟踪特别有用. 在除本次实验以外其它的 Wireshark 实验中，我们都是在有线以太网连接进行抓包(捕获帧)。在本实验中，因为 802.11 是无线链路层协议，我们将在“空中”捕获帧。不幸的是，带有 802.11 协议的无线网卡(NIC)设备驱动无法提供钩子将捕获/接收的 802.11 帧用于 Wireshark 实验分析。因此，在本实验中，您可能会使用作 者捕获的 802.11 帧(抓包结果)进行分析。如果您有能力自己捕获，欢迎您自己动手。如果您乐意自己跟踪，或许你可以买一个小的 USB 网卡 AirPcap 用以捕获 802.1 帧 Getting Started 开始实验 从 http://gaia.cs.umass.edu/wireshark-labs/wireshark-traces.zip 下载压缩包并且得到 Wireshark_802_11.pcap。本结果由团队的一个作者在家庭网络使用 AirPcap 以及运行 Wireshark 的计算机得到，结果其中包括 Linksys 802.11g 的组合接入点(路由器)，该接入点为两台有线 PC 和一台无线 PC 提供服务。作者幸运邻居也使用无线接入点。在此跟踪文件中，我们能看到在通道 6 上捕获的帧。由于我们需要分析主机和接入点不是使用通道 6 的唯一组合，我们也会看到其他例如邻居接入点使用通道6被作者收集到。跟踪文件中采用的无线主机活动包括: 跟踪开始时，主机已经与 30 Munroe St 接入点关联(associated)。 在时间 24.82 时刻，主机向 IP 地址 128.119.245.12 的服务器发送 HTTP 请 求，请求内容是 http://gaia.cs.umass.edu/wireshark-labs/alice.txt 。 在时间 32.82 时刻，主机向 IP 地址 128.119.240.19.的服务器发送 HTTP 请求，请求内容是 http://www.cs.umass.edu。 在时间 49.58 的时刻，主机断开了与 30 Munroe St 接入点的关联，并且尝试 连接到 linksys_ses_24086 接入点。该接入点不是开放的接入点，因此主机始终没有成功与该接入点关联成功。 在时间 63.0 时刻，主机放弃尝试关联 linksys_ses_24086 接入点，并且再次连接30 Munroe St 接入点关联。 下载作者的抓包结果后，使用 Wireshark 的 File 菜单打开该文件 Wireshark_802_11.pcap，您应该看到与图 1 显示相同的结果 Beacon Frames 信标帧 回想一下，802.11 接入点使用信标帧表示其存在。要回答下面的问题，您或许应该 展开 IEEE 802.11 帧并在 Wireshark 中间窗口看到它的字段详细信息。请尽量清晰 的展示您的答案，必要时您可以在图中用标记辅以说明。您的答案应该简单可读。 发送最多信标帧的两个接入点的服务集标识符是多少(SSID)? inksys_ses_24086 接入点和 30 Munroe St.接入点的信标帧传输时间是多少?(提示:此时间间隔包含在信标帧本身之中。) 请以十六进制表示法找到 30 Munroe St 接入点的源 MAC 地址。回想课本中 图 7-13，并说明源地址，目的地址，基本服务集(BSS)的地址是什么。有 关 802.11 帧结构的详细讨论说明，请参阅 IEEE 802.11 标准文档(上文所 提)中的第 7 节。 30 Munroe St 接入点的信标帧目的地址十六进制表示是什么? 30 Munroe St 接入点的 BSS ID 地址是什么? 来自 30 Munroe St 接入点的信标帧宣告接入点可以支持四种数据速率和八种 额外的“扩展支持速率”。这些速率是多少? Data Transfer 数据传输 由于作者抓包开始时，主机已经与 AP 关联，因此在做下面 AP 关联/解除关联之 前，我们首先研究已经主机与关联 802.11 AP 的数据传输。回想一下，在作者抓包 结果中，在时间 24.82 的时刻，主机向 http://gaia.cs.umass.edu/wireshark- labs/alice.txt 发出 HTTP 请求。 gaia.cs.umass.edu 的 IP 地址是 128.119.245.12。然 后，在 32.82 时刻，主机向 http://www.cs.umass.edu 发出 HTTP 请求。 找到包含第一个 TCP SYN TCP 报文(下载 alice.txt 会话)的 802.11 帧。 802.11 帧中三个 MAC 地址字段分别是什么?此帧中那个 MAC 地址对应十 六进制的无线主机的 MAC 地址?那个对应接入点 MAC 地址，第一跳路由 器的 MAC 地址?发送此 TCP 报文的无线主机 IP 是什么?目的地 IP 地址是 什么?此目的地是否与主机地址，接入点地址，第一跳路由器地址或者某些 其他网络设备相对应，解释并且说明。 找到包含此 TCP 会话 SYN ACK 报文的 802.11 帧。该帧中三个 MAC 地址 字段是什么?那个 MAC 地址对应十六进制的无线主机的 MAC 地址?那个 对应接入点 MAC 地址，第一跳路由器的 MAC 地址?帧中的发送方 MAC 地址是否与发送此 TCP 报文的设备的 IP 地址相对应? Association/Disassociation 关联/解除关联 回想一下课本的第 7.3.1 节，主机在发送数据之前必须与接入点关联。802.11 中的关联使用 ASSOCIATE REQUEST 帧(从主机发送到 AP，帧类型 0 和子类型 0，参 见本文中的第 7.3.3 节)和 ASSOCIATE RESPONSE 帧(由 AP 发送给具有主机， 帧类型 0 和子类型 1，响应于接收到的 ASSOCIATE REQUEST)。有关 802.11 帧 中每个字段的详细说明，请参阅 http://gaia.cs.umass.edu/wireshark-labs/802.11- 1999.pdf 中 802.11 规范的第 34 页(第 7 节)。 在时间 49 的时刻，主机在跟踪中使用那两个动作(例如:发送帧)解除在 跟踪开始之前就已经连接的 30 Munroe St AP 的关联。(提示:一个是 IP 层 多宗，一个是 802.11 层动作)。在查看 802.11 规范之后，请找出抓包结果 中未显示一个动作帧。 在抓包结果中，找到主机发送给无线 AP 的 AUTHENICATION 帧，同时也 找无线 AP 的回复响应帧。在时间 49 时刻之后，无线主机向 linksys_ses_24086 AP(MAC 地址包括 Cisco_Li_f5:ba:bb)发送了多少 AUTHENTICATION 消息? 主机是否希望身份认证和关联 AP? 您是否在跟踪中看到来自 linksys_ses_24086 AP 回的 AUTHENTICATION? 现在让我们来分析当主机放弃尝试与 linksys_ses_24086 AP 关联并且现在尝 试与 30 Munroe St AP 关联发生什么。查找从主机发送到 AP 的 AUTHENICATION 帧，同时也找无线 AP 的回复响应帧。在什么时间有一 个主机到 30 Munroe St AP 的帧，在什么时间无线 AP 回主机该帧的回复。 (注意:您可以使用“ wlan.fc.subtype == 11and wlan.fc.type == 0 and wlan.addr == IntelCor_d1:b6:4f ”(不含引号)在此跟踪中仅显示无线主机的 AUTHENTICATION 帧) 从主机到 AP 的关联请求，以及相应的 AP 对主机关联请求的响应。在什么 时候有来自主机到 AP 关联请求，什么时候 AP 对主机关联请求响应。(注 意:你可以使用过滤表达式“wlan.fc.subtype &lt; 2 and wlan.fc.type == 0 and wlan.addr == IntelCor_d1:b6:4f”来仅显示 ASSOCIATE REQUEST 和 ASSOCIATE RESPONSE 帧。 主机和 AP 愿意使用什么传输速率?要回答此问题，您或许要查看 802.11 无 线管理帧的字段。 Other Frame types 其他帧类型 作者的抓包结果中含许多 PROBE REQUEST 和 PROBE RESPONSE 帧。 这些帧中的发送方，接收方和 BSS ID MAC 地址是什么? 这两种帧的目的是什么? (要回答最后一个问题，您需要深入研究本实验前面引用说明的 在线参考资料)。","categories":[{"name":"学习记录","slug":"学习记录","permalink":"https://trevoewu.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"computer network","slug":"computer-network","permalink":"https://trevoewu.github.io/tags/computer-network/"}]},{"title":"Wireshark Lab: ICMP","slug":"Wireshark-Lab-ICMP","date":"2023-05-05T02:48:32.000Z","updated":"2023-05-05T07:21:30.475Z","comments":true,"path":"2023/05/05/Wireshark-Lab-ICMP/","link":"","permalink":"https://trevoewu.github.io/2023/05/05/Wireshark-Lab-ICMP/","excerpt":"In this lab, we’ll explore several aspects of the ICMP protocol: 在本实验中，我们将探讨 ICMP 协议的几个方面:","text":"In this lab, we’ll explore several aspects of the ICMP protocol: 在本实验中，我们将探讨 ICMP 协议的几个方面: ICMP messages generating by the Ping program; Ping 程序生成的 ICMP 消息; ICMP messages generated by the Traceroute program; Traceroute 程序生成的 ICMP 消息; the format and contents of an ICMP message. ICMP 消息的格式和内容。 Before attacking this lab, you’re encouraged to review the ICMP material in section 5.6 of the text1. We present this lab in the context of the Microsoft Windows operating system. However, it is straightforward to translate the lab to a Unix or Linux environment. 在开始本实验之前，我们建议您查看课本的 5.6 节中的 ICMP 章节。此实验是在Windows 下完成的，如果您使用其他系统也不用担心，因为大体都相同。 ICMP and Ping ICMP 协议和 Ping 程序 Let’s begin our ICMP adventure by capturing the packets generated by the Ping program. You may recall that the Ping program is simple tool that allows anyone (for example, a network administrator) to verify if a host is live or not. The Ping program in the source host sends a packet to the target IP address; if the target is live, the Ping program in the target host responds by sending a packet back to the source host. As you might have guessed (given that this lab is about ICMP), both of these Ping packets are ICMP packets. 让我们通过捕获 Ping 程序生成的数据包开始我们的 ICMP 实验。 您可能还记得Ping 程序是一个简单的工具，允许任何人(例如:网络管理员)验证主机是否存在。 源主机中的 Ping 程序将数据包发送到目标 IP 地址; 如果目标是在线的，则目标主机中的 Ping 程序将会发送响应 Ping 数据包证明他在线，这两个 Ping 数据包都是 ICMP 数据包。 因此您可能猜出我们这个实验都是关于 ICMP 的实验了。 Do the following: 请按照以下动作做: Let’s begin this adventure by opening the Windows Command Prompt application (which can be found in your Accessories folder). 打开 windows 的命令提示符。 Start up the Wireshark packet sniffer, and begin Wireshark packet capture. 启动 Wireshark 数据包嗅探器，并开始 Wireshark 数据包捕获。 The ping command is in c:\\windows\\system32, so type either “ping –n 10 hostname” or “c:\\windows\\system32\\ping –n 10 hostname” in the MS-DOS command line (without quotation marks), where hostname is a host on another continent. If you’re outside of Asia, you may want to enter www.ust.hk for the Web server at Hong Kong University of Science and Technology. The argument “-n 10” indicates that 10 ping messages should be sent. Then run the Ping program by typing return. Ping 程序在 c:\\windows\\system32 目录中，所以您在命令提示符中输入“ping –n 10 hostname” 或 “c:\\windows\\system32\\ping –n 10 hostname”都是正确的 (注意命令是引号里的内容)。其中 hostname 是另一个大陆的主机名。如 您如果在非亚洲地区，建议您访问香港科技大学 www.ust.hk ， 参数-n 10 代表发送 10 个 Ping 消息，然后按下回车执行命令。 When the Ping program terminates, stop the packet capture in Wireshark. 当 Ping 程序终止时，停止在 Wireshark 中捕获数据包。 At the end of the experiment, your Command Prompt Window should look something like Figure 1. In this example, the source ping program is in Massachusetts and the destination Ping program is in Hong Kong. From this window we see that the source ping program sent 10 query packets and received 10 responses. Note also that for each response, the source calculates the round-trip time (RTT), which for the 10 packets is on average 375 msec. 在实验结束时，您的命令提示符窗口应如图 1 所示。在此示例中，源 ping 程序位 于马萨诸塞州，目标 Ping 程序位于香港。 从这个窗口我们看到源 ping 程序发送了10 个查询包并收到了 10 个响应。 另请注意，对于每个响应，源计算往返时间 (RTT)，对于 10 个数据包平均为 375 毫秒。 Figure 2 provides a screenshot of the Wireshark output, after “icmp” has been entered into the filter display window. Note that the packet listing shows 20 packets: the 10 Ping queries sent by the source and the 10 Ping responses received by the source. Also note that the source’s IP address is a private address (behind a NAT) of the form 192.168/12; the destination’s IP address is that of the Web server at HKUST. Now let’s zoom in on the first packet (sent by the client); in the figure below, the packet contents area provides information about this packet. We see that the IP datagram within this packet has protocol number 01, which is the protocol number for ICMP. This means that the payload of the IP datagram is an ICMP packet. 如图 2，在将“icmp”输入过滤器显示窗口后 Wireshark 输出的屏幕截图。 请注意， 数据包列表显示 20 个数据包:源发送的 10 个 Ping 查询和源接收的 10 个 Ping 响 应。 另请注意，源的 IP 地址是 192.168 / 12 格式的私有地址(通过 NAT 协议连接 互联网); 目的地的 IP 地址是香港科技大学网络服务器的 IP 地址。 现在让我们点 击显示第一个由客户端发送的数据包; 在图中的下方，数据包内容区域提供有关此 数据包的信息。 我们看到该数据包中的 IP 数据报具有协议号 01，这是 ICMP 的协 议号。 这意味着 IP 数据报的有效载荷是 ICMP 数据包 图 2 在 Wireshark 中过滤 ICMP 协议并且选中某个 ICMP 消息 Figure 3 focuses on the same ICMP but has expanded the ICMP protocol information in the packet contents window. Observe that this ICMP packet is of Type 8 and Code 0 - a so-called ICMP “echo request” packet. (See Figure 5.19 of text.) Also note that this ICMP packet contains a checksum, an identifier, and a sequence number. 图 3 同样使用相同的 ICMP 过滤器，展开可以看到该 ICMP 包的详情信息。 观察到 该 ICMP 数据包是类型 8 和代码 0 ——所谓的 ICMP“回应请求”数据包。 (请参见 书本的图 5.19。)此外，此 ICMP 数据包包含校验和，标识符和序列号 What to Hand In: 回答问题 You should hand in a screen shot of the Command Prompt window similar to Figure 1 above. Whenever possible, when answering a question below, you should hand in a printout of the packet(s) within the trace that you used to answer the question asked. Annotate the printout to explain your answer. To print a packet, use File-&gt;Print, choose Selected packet only, choose Packet summary line, and select the minimum amount of packet detail that you need to answer the question. 请尽量清晰的展示您的答案，必要时您可以在图中用标记辅以说明。您的答案应该 简单可读。 ping -c 10 bing.com // [-c count] You should answer the following questions: 请回答以下问题: What is the IP address of your host? What is the IP address of the destination host? 您的主机的 IP 地址是多少? 目标主机的 IP 地址是多少? Why is it that an ICMP packet does not have source and destination port numbers? 为什么 ICMP 数据包没有源端口号和目的端口号? 大多数TCP/IP实现直接在操作系统中支持ping服务器, 即该服务器不是一个进程. ICMP（Internet Control Message Protocol）数据包没有源端口号和目的端口号，因为ICMP不像TCP（传输控制协议）或UDP（用户数据报协议）那样是传输层协议。相反，ICMP是一种直接在IP（Internet Protocol）层之上运行的网络层协议。 TCP和UDP使用源和目的地端口号来在同一设备上运行的不同应用程序之间进行多路复用和解复用数据。然而，ICMP不用于传输应用程序数据，而是用于在网络设备之间传递错误消息和网络状态信息。因此，ICMP消息并不是针对设备上的特定端口而言的，而是针对设备本身的。 ICMP消息包含类型、代码和校验和等字段，这些字段用于指示消息的目的和内容。这些字段允许网络设备适当地解释和响应ICMP消息。例如，当从一个设备发送ping命令到另一个设备时，ping数据包包含一个ICMP回显请求消息，这促使接收设备向发送方发送一个ICMP回显回复消息。ICMP数据包中缺少源和目的端口号是由于这些信息对协议的运行不必要。 Examine one of the ping request packets sent by your host. What are the ICMP type and code numbers? What other fields does this ICMP packet have? How many bytes are the checksum, sequence number and identifier fields? 查看任意的请求 ICMP 数据包， ICMP 类型和代码是什么? 该 ICMP 数据包还有哪些其他字段? 校验和，序列号和标识符字段有多少字节? Type: 8 code: 0 回显请求。还包括检验和(2 Byte), id(2 Byte), sequence number(2 Byte) Examine the corresponding ping reply packet. What are the ICMP type and code numbers? What other fields does this ICMP packet have? How many bytes are the checksum, sequence number and identifier fields? 查看任意的响应 ICMP 数据包， ICMP 类型和代码是什么? 该 ICMP 数据包 还有哪些其他字段? 校验和，序列号和标识符字段有多少字节? Type: 0(Echo reply) Code : 0 还包括检验和(2 Byte), id(2 Byte), sequence number**(2 Byte**) ICMP and Traceroute ICMP 协议和 Traceroute 命令 Let’s now continue our ICMP adventure by capturing the packets generated by the Traceroute program. You may recall that the Traceroute program can be used to figure out the path a packet takes from source to destination. Traceroute is discussed in Section 1.4 and in Section 5.6 of the text. 现在让我们通过捕获 Traceroute 程序生成的数据包继续我们的 ICMP 实验。 您可能 还记得 Traceroute 程序可用于确定数据包从源到目的地的路径。 Traceroute 命令可 以在课本中的 1.4 节和 5.6 节中找到 Traceroute is implemented in different ways in Unix/Linux/MacOS and in Windows. In Unix/Linux, the source sends a series of UDP packets to the target destination using an unlikely destination port number; in Windows, the source sends a series of ICMP packets to the target destination. For both operating systems, the program sends the first packet with TTL=1, the second packet with TTL=2, and so on. Recall that a router will decrement a packet’s TTL value as the packet passes through the router. When a packet arrives at a router with TTL=1, the router sends an ICMP error packet back to the source. In the following, we’ll use the native Windows tracert program. A shareware version of a much nice Windows Traceroute program is pingplotter (www.pingplotter.com). We’ll use pingplotter in our Wireshark IP lab since it provides additional functionality that we’ll need there. 每个系统有不同路由跟踪实现办法，在 Unix / Linux 中，路由跟踪 traceroute 使用 发送不可到达(无使用的)端口的 UDP 包来实现，在 Windows 中，路由跟踪 tracert 仅使用 ICMP 数据包来实现，但是对于他们来说，都是发送 TTL 增加的数据 包，例如 TTL=1,TTL=2，回想下，每经过一个路由器，TTL 就会减一，当 TTL=1 的包达到路由器，该路由器会将该包丢弃，并且发送 ICMP 错误给请求的机器，在 本次实验，我们使用 window 自带的 tracert。有一个跨平台 Windows Traceroute 程序的是 pingplotter(www.pingplotter.com)(收费但可以试用)。 我们将在 Wireshark IP 实验室中使用 pingplotter，因为它提供了我们在那里需要的其他功能。 Do the following4: 请执行以下步骤 Let’s begin by opening the Windows Command Prompt application (which can be found in your Accessories folder). 打开 windows 的命令提示符。 Start up the Wireshark packet sniffer, and begin Wireshark packet capture. 启动 Wireshark 数据包嗅探器，并开始 Wireshark 数据包捕获。 The tracert command is in c:\\windows\\system32, so type either “tracert hostname” or “c:\\windows\\system32\\tracert hostname” in the MS-DOS command line (without quotation marks), where hostname is a host on another continent. (Note that on a Windows machine, the command is “tracert” and not “traceroute”.) If you’re outside of Europe, you may want to enter www.inria.fr for the Web server at INRIA, a computer science research institute in France. Then run the Traceroute program by typing return. tracert 程序在 c:\\windows\\system32 目录中，所以您在命令提示符中输入 “tracert hostname” 或 “c:\\windows\\system32\\ tracert hostname”都是正确的(注 意命令是引号里的内容)。其中 hostname 是另一个大陆的主机名。如您如 果在非欧洲地区，建议您访问法国 INRIA(计算机科学研究所) www.inria.fr 然后按下回车执行命令。 When the Traceroute program terminates, stop packet capture in Wireshark. 当 Traceroute 程序终止时，停止在 Wireshark 中捕获数据包。 At the end of the experiment, your Command Prompt Window should look something like Figure 4. In this figure, the client Traceroute program is in Massachusetts and the target destination is in France. From this figure we see that for each TTL value, the source program sends three probe packets. Traceroute displays the RTTs for each of the probe packets, as well as the IP address (and possibly the name) of the router that returned the ICMP TTL-exceeded message. 在实验结束时，您的命令提示符窗口应如图 4 所示。在此图中，客户端 Traceroute程序主机位于马萨诸塞州，目标主机位于法国。 从该图中我们看到，对于每个 TTL 值，源程序发送三个探测包。 Traceroute 显示每个探测包的 RTT，以及返回 ICMP TTL 超出消息的路由器的 IP 地址(可能还有名称)。 Figure 5 displays the Wireshark window for an ICMP packet returned by a router. Note that this ICMP error packet contains many more fields than the Ping ICMP messages. 图 5 显示了路由器返回的 ICMP 数据包的 Wireshark 窗口。 请注意，此 ICMP 错误数据包包含的字段比 Ping ICMP 消息多得多。 If you are unable to run Wireshark live on a computer, you can download the zip file http://gaia.cs.umass.edu/wireshark-labs/wireshark-traces.zip and extract the file ICMP-ethereal-trace-2. The traces in this zip file were collected by Wireshark running on one of the author’s computers, while performing the steps indicated in the Wireshark lab. Once you have downloaded the trace, you can load it into Wireshark and view the trace using the File pull down menu, choosing Open, and then selecting the ICMP-ethereal-trace-2 trace file. You can then use this trace file to answer the questions below. 同样如果您无法抓包，建议您下载作者的抓包结果 http://gaia.cs.umass.edu/wireshark-labs/wireshark-traces.zip 解压并且使用 Wireshark 打开 ICMP-ethereal-trace-2 进行分析。 What to Hand In: 回答问题 For this part of the lab, you should hand in a screen shot of the Command Prompt window. Whenever possible, when answering a question below, you should hand in a printout of the packet(s) within the trace that you used to answer the question asked. Annotate the printout to explain your answer. To print a packet, use File-&gt;Print, choose Selected packet only, choose Packet summary line, and select the minimum amount of packet detail that you need to answer the question. 请尽量清晰的展示您的答案，必要时您可以在图中用标记辅以说明。您的答案应该简单可读 Answer the following questions: 请回答以下问题: What is the IP address of your host? What is the IP address of the target destination host? 您的主机的 IP 地址是多少? 目标目标主机的 IP 地址是多少? If ICMP sent UDP packets instead (as in Unix/Linux), would the IP protocol number still be 01 for the probe packets? If not, what would it be? 如果 ICMP 发送了 UDP 数据包(如在 Unix / Linux 中)，那么探测数据包的 IP 协议号仍然是 01 吗? 如果没有，它会是什么? Examine the ICMP echo packet in your screenshot. Is this different from the ICMP ping query packets in the first half of this lab? If yes, how so? 检查屏幕截图中的 ICMP 响应数据包。 这与本实验的前半部分中的 ICMP ping 查询数据包不同吗? 如果不同，请解释为什么? 该ICMP Message Type:11 Code: 0 , 路由器告诉源主机你的分组由于TTL减为0被我丢掉了(Time-to-live exceeded), 这是Ping和treaceroute程序的工作原理不同导致的, Ping程序发送请求回显报文, 目标主机收到后回复(回显回答), 而traceroute程序通过发送TTL从1递增的UPD数据报来获得路由信息. Examine the ICMP error packet in your screenshot. It has more fields than the ICMP echo packet. What is included in those fields? 检查屏幕截图中的 ICMP 错误数据包。 它具有比 ICMP 响应数据包更多的字段。 这个数据包含哪些内容? 多了IP头部, IP头部包含了被丢弃的IP数据报的头部字段 Examine the last three ICMP packets received by the source host. How are these packets different from the ICMP error packets? Why are they different? 检查源主机收到的最后三个 ICMP 数据包。 这些数据包与 ICMP 错误数据包有何不同? 他们为什么不同? 找不到…最后都没有收到, 但我还是说几句. 这些同为ICMP数据包, 但TYPE和Code字段的字不同, Type:3 Code:3 目标主机告诉源主机目标端口不可达, 这是因为treaceroute程序发送了不可达的端口 Within the tracert measurements, is there a link whose delay is significantly longer than others? Refer to the screenshot in Figure 4, is there a link whose delay is significantly longer than others? On the basis of the router names, can you guess the location of the two routers on the end of this link? 在 tracert 跟踪测量中，是否有一个连接的延迟比其他连接长得多? 请参阅 图 4 中的屏幕截图，是否有连接的延迟明显长于其他连接? 根据路由器名 称，您能猜出这个连接末端的两个路由器的位置吗? 可以发现TTL为6和为10时, 延迟变化很大, 通过best trace程序发现, 这两个路由器的位置分别是中国北京和德国，黑森州，法兰克福， Extra Credit 额外问题 For one of the programming assignments you created a UDP client ping program. This ping program, unlike the standard ping program, sends UDP probe packets rather than ICMP probe packets. Use the client program to send a UDP packet with an unusual destination port number to some live host. At the same time, use Wireshark to capture any response from the target host. Provide a Wireshark screenshot for the response as well as an analysis of the response. 对于一个编程任务，您可能创建了一个 UDP 客户端 ping 程序。 与标准 ping 程序 不同，此 ping 程序发送 UDP 探测包而不是 ICMP 探测包。 使用客户端程序将具有 异常目标端口号的 UDP 数据包发送到某个活动主机。 同时，使用 Wireshark 捕获 目标主机的任何响应。 提供响应的 Wireshark 屏幕截图以及响应分析。","categories":[{"name":"学习","slug":"学习","permalink":"https://trevoewu.github.io/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"computer network","slug":"computer-network","permalink":"https://trevoewu.github.io/tags/computer-network/"},{"name":"lab","slug":"lab","permalink":"https://trevoewu.github.io/tags/lab/"}]},{"title":"Wireshark Lab: DNS","slug":"Wireshark-Lab-DNS","date":"2023-04-21T13:05:21.000Z","updated":"2023-04-21T13:18:17.607Z","comments":true,"path":"2023/04/21/Wireshark-Lab-DNS/","link":"","permalink":"https://trevoewu.github.io/2023/04/21/Wireshark-Lab-DNS/","excerpt":"","text":"官方英文文档：Wireshark_Intro_v6.01.pdf 以下内容为笔者翻译： Wireshark 实验: DNS v6.01 《计算机网络：自顶向下方法（第6版）》补充材料，J.F. Kurose and K.W. Ross “不闻不若闻之，闻之不若见之，见之不若知之，知之不若行之。” ——中国谚语 © 2005-2012, J.F Kurose and K.W. Ross, All Rights Reserved 如书中第2.5节所述，域名系统(DNS)将主机名转换为IP地址，在互联网基础架构中发挥关键作用。在本实验中，我们将仔细查看DNS在客户端的细节。回想一下，客户端在DNS中的角色相对简单——客户端向其本地DNS服务器发送请求，并接收一个响应。如书中的图2.21和2.22所示，由于DNS分层服务器之间相互通信，可以递归地或迭代地解析客户端的DNS查询请求，而大多数操作是不可见的。然而，从DNS客户端的角度来看，协议非常简 ——将查询指向为本地DNS服务器，并从该服务器接收到响应。 在开始本实验之前，您可能需要阅读书中的第2.5节来了解DNS。另外，您可能需要查看关于本地DNS服务器，DNS缓存，DNS记录和消息，以及DNS记录中的TYPE字段的资料。 1. nslookup 在本实验中，我们将大量使用nslookup工具，这个工具在现在的大多数Linux/Unix和Microsoft平台中都有。要在Linux/Unix中运行nslookup，您只需在命令行中键入nslookup命令即可。要在Windows中运行，请打开命令提示符并在命令行上运行nslookup。 在这是最基本的操作，nslookup工具允许主机查询任何指定的DNS服务器的DNS记录。DNS服务器可以是根DNS服务器，顶级域DNS服务器，权威DNS服务器或中间DNS服务器（有关这些术语的定义，请参阅书本）。要完成此任务，nslookup将DNS查询发送到指定的DNS服务器，然后接收DNS回复，并显示结果。 上面的屏幕截图显示了三个不同nslookup命令的结果（显示在Windows命令提示符中）。在此示例中，客户端主机位于布鲁克林理工大学校园，默认本地DNS服务器为dns-prime.poly.edu。运行nslookup时，如果没有指定DNS服务器，则nslookup会将查询发送到默认的DNS服务器（在这种情况下为dnsprime.poly.edu）。来看第一个命令： nslookup www.mit.edu 说这个命令是说，请告诉我主机 www.mit.edu 的IP地址。如屏幕截图所示，此命令的响应提供两条信息：（1）提供响应的DNS服务器的名称和IP地址；（2）响应本身，即 www.mit.edu 的主机名和IP地址。虽然响应来自理工大学的本地DNS服务器，但本地DNS服务器很可能会迭代地联系其他几个DNS服务器来获得结果，如书中第2.4节所述。 现在来看第二个命令： nslookup -type=NS mit.edu 在这个例子中，我们添加了选项&quot;-type=NS&quot;和域名&quot;mit.edu&quot;。这将使得nslookup将NS记录发送到默认的本地DNS服务器。换句话说，“请给我发送mit.edu的权威DNS的主机名” （当不使用-type选项时，nslookup使用默认值，即查询A类记录。）上述屏幕截图中，首先显示了提供响应的DNS服务器（这是默认本地DNS服务器）以及三个MIT域名服务器。这些服务器中的每一个确实都是麻省理工学院校园主机的权威DNS服务器。然而，nslookup也表明该响应是非权威的，这意味着这个响应来自某个服务器的缓存，而不是来自权威MIT DNS服务器。最后，响应结果还显示了麻省理工学院权威DNS服务器的IP地址。 （即使nslookup生成的NS类型查询没有明确要求IP地址，本地DNS服务器依然”免费“返回了这些信息，然后被nslookup显示出来。） 最后来看第三个命令： nslookup www.aiit.or.kr bitsy.mit.edu 在这个例子中，我们希望将查询请求发送到DNS服务器 bitsy.mit.edu ，而不是默认的DNS服务器（dns-prime.poly.edu）。因此，查询和响应事务直接发生在我们的主机和 bitsy.mit.edu 之间。在这个例子中，DNS服务器 bitsy.mit.edu 提供主机 www.aiit.or.kr 的IP地址，它是高级信息技术研究所（韩国）的Web服务器。 现在我们了解了一些示例，您现在可能想知道nslookup命令的一般语法。语法是： nslookup -option1 -option2 host-to-find dns-server 一般来说，nslookup可以不添加选项，或者添加一两个甚至更多选项。正如我们在上面的示例中看到的，dns-server也是可选的；如果这项没有提供，查询将发送到默认的本地DNS服务器。 现在我们提供了总览了nslookup，现在是你自己驾驭它的时候了。执行以下操作（并记下结果）： 运行nslookup以获取一个亚洲的Web服务器的IP地址。该服务器的IP地址是什么？ 查询了哈尔滨理工大学的ip地址, 通过得到的信息可以知道, 该服务器的IP地址为202.118.201.1 可以发现这是一个来自DNS服务器182.254.116.116的应答, 搜索发现, 这是腾讯的备用域名服务器. 继续查询权威名字服务器, 得到的是非权威的, 这是因为腾讯的DNS服务器不知道哈尔滨理工大学的权威名字服务器, 只能向根DNS→TLD(顶级域DNS)(.cn)→edu.cnDNS→hrbust.edu.cnDNS, 迭代查询获得 如果我们之间对这个DNS服务器发起DNS查询: 可以发现, 这样一条来自权威名字服务器的应答. 运行nslookup来确定一个欧洲的大学的权威DNS服务器。 查询了苏黎世联邦理工大学的权威DNS 可以发现权威名字服务器为: ns1.ethz.ch 运行nslookup，使用问题2中一个已获得的DNS服务器，来查询Yahoo!邮箱的邮件服务器。它的IP地址是什么？ 查不到好吧…人家是大学的权威DNS, 没有雅虎的邮件服务器地址, 只维护了大学的IP地址查询, 不当然公共DNS的指责, 即不去迭代的查询(个人猜测) 又到了问聪明的chatGPT的时间了: 使用腾讯的公共DNS服务器我们可以得到Yahoo的邮件服务器地址. 同时为发现查询www.mail.yahoo.com和mail.yahoo.com的结果不同 查询chatGPT得到以下回复: 2. ipconfig ipconfig（对于Windows）和ifconfig（对于Linux / Unix）是主机中最实用的程序，尤其是用于调试网络问题时。这里我们只讨论ipconfig，尽管Linux / Unix的ifconfig与其非常相似。 ipconfig可用于显示您当前的TCP/IP信息，包括您的地址，DNS服务器地址，适配器类型等。例如，您只需进入命令提示符，输入 ipconfig /all ipconfig对于管理主机中存储的DNS信息也非常有用。在第2.5节中，我们了解到主机可以缓存最近获得的DNS记录。要查看这些缓存记录，在 C:\\&gt; 提示符后输入以下命令： ipconfig /displaydns 每个条目显示剩余的生存时间（TTL）（秒）。要清除缓存，请输入 ipconfig /flushdns 清除了所有条目并从hosts文件重新加载条目。 3. 使用Wireshark追踪DNS 现在，我们熟悉nslookup和ipconfig，我们准备好了一些正经的事情。首先让我们捕获一些由常规上网活动生成的DNS数据包。 使用ipconfig清空主机中的DNS缓存。 打开浏览器并清空浏览器缓存。 （若使用Internet Explorer，转到工具菜单并选择Internet选项；然后在常规选项卡中选择删除文件。） 打开Wireshark，然后在过滤器中输入“ip.addr==your_IP_address”，您可以先使用ipconfig获取你的IP地址。此过滤器将删除既从你主机不发出也不发往你主机的所有数据包。 在Wireshark中启动数据包捕获。 使用浏览器访问网页： http://www.ietf.org 停止数据包捕获。 如果您无法在你的网络连接上运行Wireshark，则可以下载一个捕获了数据包的文件，这个文件是本书作者在自己计算机上 按照上述步骤捕获的（原文注：Download the zip file http://gaia.cs.umass.edu/wireshark-labs/wireshark-traces.zip and extract the file dnsethereal-trace-1. The traces in this zip file were collected by Wireshark running on one of the author’s computers, while performing the steps indicated in the Wireshark lab. Once you have downloaded the trace, you can load it into Wireshark and view the trace using the File pull down menu, choosing Open, and then selecting the dns-ethereal-trace-1 trace file. ）。回答下列问题。您应该在解答中尽可能展示你使用了哪些你捕获到的数据包，并注释出来（原文注：What do we mean by “annotate”? If you hand in a paper copy, please highlight where in the printout you’ve found the answer and add some text (preferably with a colored pen) noting what you found in what you ‘ve highlight. If you hand in an electronic copy, it would be great if you could also highlight and annotate. ）。若要打印数据包，请使用文件-&gt;打印，只勾选仅选中分组，和概要行，并选中你所需要用于解答问题的数据包。 找到DNS查询和响应消息。它们是否通过UDP或TCP发送？ 通过UDP发送 DNS查询消息的目标端口是什么？ DNS响应消息的源端口是什么？ 目标端口通过上一问的图片可以得到为: 53, 响应DNS到源端口也是53 DNS查询消息发送到哪个IP地址？使用ipconfig来确定本地DNS服务器的IP地址。这两个IP地址是否相同？ 本地IP 地址: 10.51.172.226 DNS服务器IP地址: 182.254.116.116 相同 检查DNS查询消息。DNS查询是什么&quot;Type&quot;的？查询消息是否包含任何&quot;answers&quot;？ TYPE: A 不包含 检查DNS响应消息。提供了多少个&quot;answers&quot;？这些答案具体包含什么？ 三个answer 第一个answer: TYPE CNAME, 主机别名到规范主机名的对应关系 包含NAME(域名),TYPE, Class, TTL, Data. CNAME(规范主机名) 第二个answer: TYPE A, 域名和IP地址 得到了规范主机名的IP地址 第三个answer: 另一个规范主机名的IP地址 考虑从您主机发送的后续TCP SYN数据包。 SYN数据包的目的IP地址是否与DNS响应消息中提供的任何IP地址相对应？ 直接过滤ip.addr==104.16.44.99 结果如下: 可以发现我的主机向这个IP地址发起了TCP的链接请求 这个网页包含一些图片。在获取每个图片前，您的主机是否都发出了新的DNS查询？ 有一个对r3.o.lencr.org的DNS查询, 搜索发现这是一个恶意的软件发起的, 目的是给浏览器带来广告(服了…) 现在让我们玩玩nslookup（原文注：If you are unable to run Wireshark and capture a trace file, use the trace file dns-ethereal-trace-2 in the zip file http://gaia.cs.umass.edu/wireshark-labs/wireshark-traces.zip ）。 启动数据包捕获。 使用nslookup查询 www.mit.edu 停止数据包捕获。 我们从上面的屏幕截图看到，nslookup实际上发送了三个DNS查询，并收到了三个DNS响应。只考虑本次实验相关结果，在回答以下问题时，请忽略前两组查询/响应，因为nslookup的一些特殊性，这些查询通常不是由标准网络应用程序生成的。您应该专注于最后一个查询和响应消息。 DNS查询消息的目标端口是什么？ DNS响应消息的源端口是什么？ 查询: 响应: DNS查询消息的目标IP地址是什么？这是你的默认本地DNS服务器的IP地址吗？ 是的 检查DNS查询消息。DNS查询是什么&quot;Type&quot;的？查询消息是否包含任何&quot;answers&quot;？ TYPE A, 不包含 检查DNS响应消息。提供了多少个&quot;answers&quot;？这些答案包含什么？ 三个 包含主机别名到规范主机名的转化关系(TYPE:CNAME) 规范主机名到IP地址到转换关系 现在重复上一个实验，但换成以下命令： nslookup -type=NS mit.edu 回答下列问题： DNS查询消息发送到的IP地址是什么？这是您的默认本地DNS服务器的IP地址吗？ 是的 检查DNS查询消息。DNS查询是什么&quot;Type&quot;的？查询消息是否包含任何&quot;answers&quot;？ Type: NS 不包含 检查DNS响应消息。响应消息提供的MIT域名服务器是什么？此响应消息还提供了MIT域名服务器的IP地址吗？ ![image-20230416184356921](/Users/trevorwu/Library/Application Support/typora-user-images/image-20230416184356921.png) 现在重复上一个实验，但换成以下命令： nslookup www.aiit.or.kr bitsy.mit.edu 该DNS服务器已停用, 使用作者提供的抓包结果dns-ethereal-trace-4 回答下列问题： DNS查询消息发送到的IP地址是什么？这是您的默认本地DNS服务器的IP地址吗？如果不是，这个IP地址是什么？ 理论上不是, 因为已经指定了对应的DNS服务器,目标IP地址应该是DNS服务器名字bitsy.mit.edu 的IP地址 检查DNS查询消息。DNS查询是什么&quot;Type&quot;的？查询消息是否包含任何&quot;answers&quot;？ 第一个查询: TYPE: PTR 通过IP反向查询域名 第二个查询: TYPE A, 查询www.aiit.or.kr.poly.edu的IP地址, 目标IP地址是18.72.0.3 第三个查询: TYPE A, 查询www.aiit.or.kr的IP地址, 目标IP和上一个查询相同. 检查DNS响应消息。提供了多少个&quot;answers&quot;？这些答案包含什么？ 第一个响应: 提供了一个answer TYPE:PTR 回答里包含IP地址3.0.72.18对应的域名 第二个响应: TYPE: SOA(Start Of a zone of Authority) 响应结果为找不到: 第三个响应: ansewer为目标域名的IP地址.","categories":[{"name":"学习","slug":"学习","permalink":"https://trevoewu.github.io/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"computer cetwork","slug":"computer-cetwork","permalink":"https://trevoewu.github.io/tags/computer-cetwork/"}]},{"title":"Wireshark Lab: TCP","slug":"Wireshark-Lab-TCP","date":"2023-04-21T12:48:28.000Z","updated":"2023-04-21T13:04:35.920Z","comments":true,"path":"2023/04/21/Wireshark-Lab-TCP/","link":"","permalink":"https://trevoewu.github.io/2023/04/21/Wireshark-Lab-TCP/","excerpt":"","text":"在本实验中，我们将详细研究著名的 TCP 协议的行为。 我们将通过从您的电脑向 远程服务器传输一份 150KB 的文件(一份 Lewis Carrol 的“爱丽丝梦游仙境”文本)，并分析 TCP 传输内容的发送和接收过程来实现。 我们将研究 TCP 对序列和 确认号的使用，以提供可靠的数据传输;我们将看到 TCP 的拥塞控制算法 – 慢启 动和拥塞避免 – 在过程中，我们将看看 TCP 的接收器发送流量控制的机制。 我们还将简要地观察 TCP 连线的设置，我们还会研究计算机和服务器之间 TCP 连线的性能(吞吐量和往返时间)。 A first look at the captured trace 将文件传输到 gaia.cs.umass.edu 的客户端计算机使用的 IP 地址和 TCP 端口号是什么? gaia.cs.umass.edu 的 IP 地址是什么? 在哪个端口号上发送和接收此连接的 TCP 段? Client IP Addressee: 10.51.172.226 Client Port: 61084 gaia.cs.umass.edu IP Address: 128.119.245.12 客户端计算机将文件传输到 gaia.cs.umass.edu 所使用的 IP 地址和 TCP 端口号是多少? Client IP Addressee: 10.51.172.226 Client Port: 61084 用于在客户端计算机和 gaia.cs.umass.edu 之间启动 TCP 连接的 TCP SYN 段的序列号是什么? 标识为 SYN 段的段有什么功能? 如图, SYN序列号为4095602682, 标识为SYN的segment用于建立TCP链接 gaia.cs.umass.edu 发送给客户端计算机以回复 SYN 的 SYNACK 段的序列号是多少? 2017202044 SYNACK 段中的 Acknowledgment 栏位的值是多少? 为4095602683 观察到除了 SYN 标志位，ACK(Acknoledment)标志位也设 1，意思服务器接收到我约连按请求并且发 SYN-ACIK 确认，这是三次握手的第二步。 Gaia.cs.umass.edu 是如何确定此 Acknowledgment 的数值的? 收到的$$seqence number + Len.$$ 在将段标识 为 SYNACK 段的段在连线中有什么功能? 用于建立链接, 是三次握手的第二次, 表示同样连接请求 包含 HTTP POST 命令的 TCP 区段的序列号是多少? 如图为4095602683,TCP PSH 字段设为1表示要传送数据. HTTP的POST方法借助于TCP提供的服务实现, 在TCP中表现为TCP的PUSH字段设为1. 将包含 HTTP POST 的 TCP 区段视为 TCP 连接中的第一个区段。在这个 TCP 连线中前六个 TCP 区段的序列号是什么(包括包含 HTTP POST的段 每区段发送的时间是什么时候? 收到的每个区段的 ACK 是什么时候? 鉴于发送每个 TCP 区段的时间与收到确认的时间之间的差异，六个区段中每个区段的 RTT 值是多少? 如图是前6段的信息: 第一段Frame1: (发送第一个frame,在 Wireshark中序号为frame69,这是Wireshark捕获到的序号, 由于这是发送数据的第一帧记frame1) RTT: note: 这里的Timestamps是Wireshark提供的额外的功能, 和TCP段Optionfields 里的Timestamps不同. 通过Wireshark的分析, 可以知道IRTT(initial RTT 表示握手阶段的RTT)为0.39900200s ACK(对第一个frame)的ACK 发现这里的ACK number = 4095603435, 而seq1 的Next sequence = 4095603298, 而恰好, frame2的Next sequence = 4095603435 所以这是对frame1和frame2的累计确认, 这是因为TCP 采用了延迟到ACK(delay ACK), 具有所期望的序号报文到达时, 等待一段时间(通常为40ms), 如果下一个按序报文到达, 立即发送单个累计ACK, 以确认两个按序到达的报文段. 如果下一个按序报文段没有在这个时间内到达, 则发送一个ACK. 我们继续观察第一个报文段段Timestamps字段的值: 对比ACK1的Timestamps: 可以发现, 第一个报文段的TSval和ACK1的TimestampsTSerc相等, 进一步验证了之前的说法, 当接受到连续两个按序到达的报文时, 用于回复的ACK报文段段TSerc值的最早接受到的报文段的TSval, 这是为了对方更够更好的估算RTT. 时间戳选项主要的功能有两个： 用来计算往返时间RTT。 发送方在发送报文段时把当前时钟的时间值放入时间戳字段，接收方在确认该报文段时把时间戳字段值复制到时间戳回送回答字段。因此，发送方在收到确认报文后，可以准确计算出RTT。时间戳是一个单调增长的值，接收方只需要回显收到的内容，因此是不需要关注时间戳的单元是什么，也不需要连接双发的时钟同步。 PAWS:防止回绕的序号。 我们知道序列号只有32位，而每增加2^32个序列号后就会重复使用原来用过的序列号。假设我们有一条高速网络，通信的主机双方有足够大的带宽用来快速的传输数据。例如1Gb/s（TCP 的窗口经过窗口缩放可以最高到 1GB（2^30)）的速率发送报文段，则不到35秒钟数据字节的序列号就会重复。这样对TCP传输带来混乱的情况。这种情况之出现在高速链路上。而采用时间戳选项，可以很容易的分辨出相同序列号的数据报，哪个是最近发送，哪个是以前发送的。 参考文章TCP timestamp 选项那点事 接着我们观察ACK1报文的ACK分析(由wireshark提供), RTT为: 0.40989700s 第二段: 我们直接去找, 收到的第二个ACK报文 对比sequence的值, 可以发现, 这是对frame75的ACK, 也就是, 收到了对第七个报文段的ACK. 说明服务器已经收到了第七个报文段以及之前的报文. 我们还发现, 收到了一条[Windows Update]的报文, 这是TCP的流量控制, 用来告诉发送端根据这个值适当的调节发送速率. 根据wireshark的分析, 可以知道, RTT为0.409390000s 第三段: 第四段: 第五段: 第六段 收到每个 ACK 后，EstimatedRTT 值(参 见本节中的第 3.5.3 节，第 242 页)是什么? 假设第一个 EstimatedRTT 的 值等于第一个区段的测量 RTT，然后使用课本第 242 页的 EstimatedRTT 公式计算所有后续区段。 What is the length of each of the first six TCP segments?4 前六个 TCP 区段的长度是多少? What is the minimum amount of available buffer space advertised at the received for the entire trace? Does the lack of receiver buffer space ever throttle the sender? 对于整个跟踪包，收到的最小可用缓冲区空间量是多少? 缺少接收缓冲区空间是否会限制发送方传送 TCP 区段? 大部分Win都是很大的值, 太多包了, 懒得分析了.通过检查此跟踪，发送器永远不会因为接收器缓冲区空间不足而受到抑制。 Are there any retransmitted segments in the trace file? What did you check for (in the trace) in order to answer this question? 在跟踪文件中是否有重传的段? 为了回答这个问题，您检查了什么(在跟踪包中)? 观察序列号的变化: 可以发现, 序列号一直在增加, 所以没有重传的段. 通常到收到了不同的两个冗余ACK, 但这不一定意味着丢包, 这是因为分组乱序到达接受方导致的. How much data does the receiver typically acknowledge in an ACK? Can you identify cases where the receiver is ACKing every other received segment (see Table 3.2 on page 250 in the text). 接收方通常在 ACK 中确认多少数据? 您是否可以识别接收方每隔一个接收到的区段才发送确认的情况(参见本文第 250 页的表 3.2) 按照表3-2的说明, 接受方最多确认两个段, 但是观察了捕获结果, 发现很多事确认了超过两个段段情况, 比如在下图中, 收到的第一个ACK确认了69,70两段. 这是一次典型的delay ACK 但是观察收到的第二个ACK, 是对75段及之前段的累积确认, 这同时累积确认了71,72,73,74,75这五个段. 且观察后续的ACK, 除了在上一问题上出现的冗余ACK外, 无其他冗余ACK. 如果严格按照表3-2的叙述来看, 这只可能是部分ACK丢失导致的, 这就意味着网络拥塞, 但很明显这是不可能的, 因为没有发现任何一个重传的段, 网络很通畅. 让我们问问万能的chatGPT吧: 最多可以合并2~5个报文段哦!!! chatGPT yyds! What is the throughput (bytes transferred per unit time) for the TCP connection? Explain how you calculated this value.TCP 连接的吞吐量(每单位时间传输的节数)是多少? 解释你如何计算 这个值。 TCP吞吐量的计算在很大程度上取决于平均时间段的选择。作为一种常见的吞吐量计算，在本问题中，我们选择平均时间周期作为整个连接时间。然后，该TCP连接的平均吞吐量被计算为总数据量与总传输时间之间的比率。可以通过第一个TCP数据段的序列号和最后一个确认确认的序列号之间的差来计算发送的总数据量。 最后一个由我发给服务器的最后一个ACK的seqence numerber为4095755619, 我发送的报文段第一个序列号为: 4095602682 所以接受方的接受到的总数据为: 4095755619- 4095602682 = 152936Byte 总传输时间为5.455830-0.026477=2.50933秒。 因此，tcp连接的吞吐量计算为152936/2.50933=60946.945997537191202B/s = 60KB/s。 图由wireshark产生 4tcp-ethereal-trace-1 跟踪文件中的 TCP 区段都小于 1460 􏰁节。 这是因为收集跟踪 的计算机具有以太网卡，该最大 IP 数据包的长度限制为 1500 􏰁节(40 􏰁节的 TCP / IP 报头数据和 1460 􏰁节的 TCP 有效负载)。此 1500 􏰁节值是以太网允许 的标准最大长度。 如果您的跟踪包内容指示 TCP 区段长度大于 1500 􏰁节，并且 您的计算机使用以太网连接网路，则是 Wireshark 报告了错误的 TCP 区段长度;它 也可能是只显示一个大的 TCP 段而不是多个较小的区段，而您的计算机确实可能 正在发送多个较小的区段，这可以由收到的 ACK 区段来证明。 报告的区段长度的 这种不一致是由于以太网驱动程序和 Wireshark 软件之间的交互作用所导致。 如果 您有这种不一致情形，我们建议您使用本文所提供的跟踪文件来执行本实验的分析 内容。 TCP congestion control in action (TCP 拥塞控制) 现在让我们检查从客户端服务器的每单位时间发送的数据量。 而不是(繁琐 地!)从 Wireshark 窗口中的原始数据计算这些数值，我们将使用 Wireshark 的 TCP 图形工具 – 时序图(Stevens) - 来绘制数据。 使用时序图(Stevens)绘图工具查看从客户端发送到 gaia.cs.umass.edu 服务 器的区段的序列号与时间关系图。您能否确定 TCP 的慢启动阶段的开始和 结束位置，以及拥塞避免接管的位置? 评论测量数据与我们在文本中研究 的 TCP 的理想化行为的不同之处。 计算每轮发送的段数量分别为: 12,17,36,87 呈指数增长, 一只在慢启动阶段.","categories":[{"name":"学习","slug":"学习","permalink":"https://trevoewu.github.io/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"computer network","slug":"computer-network","permalink":"https://trevoewu.github.io/tags/computer-network/"}]},{"title":"MAC M1 安装Oracle数据库教程","slug":"MAC-M1-安装Oracle数据库教程","date":"2023-04-21T12:35:34.000Z","updated":"2023-04-21T12:37:22.477Z","comments":true,"path":"2023/04/21/MAC-M1-安装Oracle数据库教程/","link":"","permalink":"https://trevoewu.github.io/2023/04/21/MAC-M1-%E5%AE%89%E8%A3%85Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E6%95%99%E7%A8%8B/","excerpt":"","text":"MAC M1 安装Oracle数据库教程 oracle目前还没有支持M1的版本, 本教程使用SSH来远程登录oracle服务器 在开始之前, 请确保你的mac安装了parallels Desktop, 并安装windows系统 如果你身边有windows环境, 比如你的室友的电脑, 你可以跳过1. 在windows电脑中安装Oracle Database Software. 安装OpenSSH服务 在window设置中 适用于 Windows Server 2019、Windows 10,11、Windows Server 2022 OpenSSH 是一款用于远程登录的连接工具，它使用 SSH 协议。 它会加密客户端与服务器之间的所有流量，从而遏止窃听、连接劫持和其他攻击。 OpenSSH 可用于将安装了 OpenSSH 客户端的 Window 10（版本 1809 及更高版本）或 Windows Server 2019 设备连接到那些安装了 OpenSSH 服务器的设备。 使用windous设置安装OpenSSSH 可以使用 Windows Server 2019 和 Windows 10 设备上的 Windows 设置安装这两个 OpenSSH 组件。 若要安装 OpenSSH 组件： 打开“设置”，选择“应用”&gt;“应用和功能”，然后选择“可选功能” 。 扫描列表，查看是否已安装 OpenSSH。 如果未安装，请在页面顶部选择“添加功能”，然后： 查找“OpenSSH 客户端”，再单击“安装” 查找“OpenSSH 服务器”，再单击“安装” 设置完成后，回到“应用”&gt;“应用和功能”和“可选功能”，你应会看到已列出 OpenSSH 。 安装 OpenSSH 服务器将创建并启用一个名为 OpenSSH-Server-In-TCP 的防火墙规则。 这允许端口 22 上的入站 SSH 流量。 如果未启用此规则且未打开此端口，那么连接将被拒绝或重置。 使用PowerShell安装OpenSSH 若要使用 PowerShell 安装 OpenSSH，请先以管理员身份运行 PowerShell。 为了确保 OpenSSH 可用，请运行以下 cmdlet： Get-WindowsCapability -Online | Where-Object Name -like 'OpenSSH*' 如果两者均尚未安装，则此操作应返回以下输出： Name : OpenSSH.Client~~~~0.0.1.0 State : NotPresent Name : OpenSSH.Server~~~~0.0.1.0 State : NotPresent 然后，根据需要安装服务器或客户端组件： # Install the OpenSSH Client Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0 # Install the OpenSSH Server Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0 这两者应该都会返回以下输出： Path : Online : True RestartNeeded : False 启动并配置 OpenSSH 服务器 若要启动并配置 OpenSSH 服务器来开启使用，请以管理员身份打开 PowerShell，然后运行以下命令来启动 sshd service： # Start the sshd service Start-Service sshd # OPTIONAL but recommended: Set-Service -Name sshd -StartupType 'Automatic' # Confirm the Firewall rule is configured. It should be created automatically by setup. Run the following to verify if (!(Get-NetFirewallRule -Name \"OpenSSH-Server-In-TCP\" -ErrorAction SilentlyContinue | Select-Object Name, Enabled)) &#123; Write-Output \"Firewall Rule 'OpenSSH-Server-In-TCP' does not exist, creating it...\" New-NetFirewallRule -Name 'OpenSSH-Server-In-TCP' -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22 &#125; else &#123; Write-Output \"Firewall rule 'OpenSSH-Server-In-TCP' has been created and exists.\" &#125; 连接到 OpenSSH 服务器 mac自带SSH服务, 所以安装后，可以使用MAC连接到 OpenSSH 服务器, 在终端中运行一下命令: ssh username@ipadress #username是安装了Oracle的windows电脑的用户名 #ipaddress是该电脑的ip地址 可以通过在windows的PowerShell中运行以下命令来查看ip地址: ipconfig 安装要求输入密码, 注意是微软用户的密码, 不是电脑的开机密码 连接后，你将看到 Windows 命令行界面提示符： domain\\username@SERVERNAME C:\\Users\\username> 用户登录Oracle数据库 c成功链接后, 在终端输入: sqlplus / as sysdba 按照提示输入用户名: sys as sysdba 并按照提示输入口令, 这个口令是在你安装Orecle软件的过程中设置的. 产生一下输出则链接成功 连接到: Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production With the Partitioning, OLAP, Data Mining and Real Application Testing options 使用ctrl+c退出sql服务, 输入exit退出ssh链接 用Navicat远程登陆Oracle数据库 打开Navicat, 左上角选择, 之后选择Oracle. 链接名请随意填写, 主机位置填入localhost, 端口默认为1521 服务名默认为ORCL, 如果你在安装Oracle中没有更改, 则保持不变, 我的改为了ORACLE 角色选择SYSDBA,用户名为sys, 密码就是之前提到的口令. 点击SSH选项 主机填入windows主机的IP地址, 端口默认22, 用户名是windows账户的用户名, 密码是该账户的密码 点击链接测试, 成功链接后点击保存即可.","categories":[{"name":"mac使用指南","slug":"mac使用指南","permalink":"https://trevoewu.github.io/categories/mac%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"}],"tags":[{"name":"mac使用指南","slug":"mac使用指南","permalink":"https://trevoewu.github.io/tags/mac%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"},{"name":"oracle","slug":"oracle","permalink":"https://trevoewu.github.io/tags/oracle/"},{"name":"教程","slug":"教程","permalink":"https://trevoewu.github.io/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"计算机系统漫游","slug":"计算机系统漫游","date":"2023-04-21T12:31:56.000Z","updated":"2023-04-21T12:33:26.396Z","comments":true,"path":"2023/04/21/计算机系统漫游/","link":"","permalink":"https://trevoewu.github.io/2023/04/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/","excerpt":"","text":"信息就是位(bit)加上下文(context) 我们学习一门新的语言, 往往是从Hello world开始的, 我想没有一个程序员不喜欢这句话, 就像一个刚出生的婴儿, 对着这个陌生的世界微笑一样. 这次对计算机系统的学习就从一个hello world程序的生命周期开始. 从他被我们键入编辑器, 到在系统运行, 打印hello world最后interminates. #include&lt;stdio.h> int main()&#123; printf(\"hello world\\n\"); return 0; &#125; 我们的hello world程序生命的开始是源程序(source progam)或者源文件(source file), 以后缀 .c 结尾, 它是由一系列的0,1代码构成, 我们把每一位叫做bit. 每八个bit组成一个块, 我们称之为一个字节byte. 它是计算机处理信息的最小单位. 每一个byte对应着一个字符. 大多数计算机系统都采用ASCII标准来表示字符, 每一个ASCII码的值都对应着一个唯一的字符. 我们可以在linux或者like-unix系统的终端中键入man ascii来查看对应关系 我们把像hello.c这样用ASCII码表示的文件叫做文本文件(text files), 而其他形式的文件叫做二进制文件(binary files) 在计算机中, 所以的信息都是都是一连串的由0和1组成, 而唯一区分这些信息就是上下文. 在不同上下文中, 相同的一段比特序列可能表示一个整数, 浮点数, 或者一条指令. 程序被编译器翻译成不同的格式 计算机只认识二进制序列, helloworld这样的程序是不能被计算机理解的. 为了让计算机正确的执行我们的指令, 我们必须把它翻译成以二进制表示的形式, 我们把这样由二进制表示的语言叫做机器语言. 这些指令最后被打包成名叫可执行程序的形式, 存储为磁盘中的二进制文件. 在unix系统中, 这个由源文件翻译为可执行文件的过程是由一个叫编译器的程序完成. 整个边缘过程分为4个阶段, 分别是预编译处理, 编译, 汇编, 链接. 预编译阶段修改由#为开始的语句, 比如这段hello.c程序中的#include&lt;stdio.h&gt;, 预编译阶段会在目标路径中找到对应的stdio.h文件, 并直接插入到程序中, 有点内容复制粘贴到过程. ​ 这个stdio.h文件中主要包括函数声明, 宏定义, 以及结构体定义, 这个阶段会生成以.i为后缀的文本文件. ​ 默认情况下，预处理器的输出会被导入到标准输出流（也就是显示器），可以利用-o选项把它导入到某个输出文件, 在shell中键入gcc -E hello.c -o hello.i来输出到hello.i文件中 extern int __vsnprintf_chk (char * restrict, size_t, int, size_t, const char * restrict, va_list); # 400 \"/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h\" 2 3 4 # 2 \"hello.c\" 2 int main()&#123; printf(\"hello world\\n\"); return 0; &#125; 产生的代码很长很长, 大概有500行,这里只截取最后一部分. 可以发现, 即使是想helloworld这样极端简单的程序, 编译之后也会比源文件大很多. 编译阶段把预编译产生的以.i结尾的文件翻译成以汇编语言表示的文本文件, 汇编是一种很有用的低一级的语言, 在不同的编译器编译不同的高级语言中, 它往往作为编译阶段的输出语言. 我们可以在shell中键入gcc -S hello.c生产汇编程序hello.s : _main: ; @main .cfi_startproc ; %bb.0: sub sp, sp, #32 ; &#x3D;32 stp x29, x30, [sp, #16] ; 16-byte Folded Spill add x29, sp, #16 ; &#x3D;16 .cfi_def_cfa w29, 16 .cfi_offset w30, -8 .cfi_offset w29, -16 mov w8, #0 str w8, [sp, #8] ; 4-byte Folded Spill stur wzr, [x29, #-4] adrp x0, l_.str@PAGE add x0, x0, l_.str@PAGEOFF bl _printf ldr w0, [sp, #8] ; 4-byte Folded Reload ldp x29, x30, [sp, #16] ; 16-byte Folded Reload add sp, sp, #32 ; &#x3D;32 ret 汇编阶段 在汇编阶段编译器会把上一阶段用ASCII表示的文本文件hello.s转化为机器语言表示的指令, 并打包生成叫做可重定位的二进制文件文件, 存储在hello.o的文件中, 如果我们打开这个文件, 文本编辑器会按照ASCII表示成对应的字符, 所以我们将会看到一堆乱码. 链接阶段 注意到我们的helloworld程序调用了一个名为printf的函数, 这个函数是C标准库函数的一部分,由编译起提供. 这个函数保持在一个单独的预编译的目标文件中, 叫做printf.o它必须和我们的hello.o合并, 这个工作由链接器完成, 生成和以直接运行可执行文件hello. 现在, 我们的源程序以及被翻译成了可执行文件, 并存储来磁盘中. 我们可以在shell中键入./hello来运行我们的程序.","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://trevoewu.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"computer system","slug":"computer-system","permalink":"https://trevoewu.github.io/tags/computer-system/"}]},{"title":"纪念拥有了自己的博客","slug":"纪念拥有了自己的博客","date":"2023-04-21T12:28:51.000Z","updated":"2023-04-21T12:30:45.584Z","comments":true,"path":"2023/04/21/纪念拥有了自己的博客/","link":"","permalink":"https://trevoewu.github.io/2023/04/21/%E7%BA%AA%E5%BF%B5%E6%8B%A5%E6%9C%89%E4%BA%86%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/","excerpt":"当一个由你亲手塑造的东西第一次呈现在你面前的时候, 那种兴奋感以及成就感是难以比拟的.","text":"当一个由你亲手塑造的东西第一次呈现在你面前的时候, 那种兴奋感以及成就感是难以比拟的. 比如当我第一次用自己的废旧的电脑组装成一台显示器, 当看到显示器作为switch副屏被点亮的时候. 比如自己照着教程给路由器刷插件来破解校园网, 看见Wi-Fi信号出现, 设备连接后, 绕过认证连接上互联网的时候. 那时候, 我好高兴好高兴, 我很想分享我的成果, 告诉宿舍的每一个人让他们连我的Wi-Fi, 从此实现Wi-Fi自由. 平时沉默不语的我在这时候犹豫了. 我只能强迫自己去做一些别的事来抑制这份心情. 而用于自己的博客带来的悸动是更胜过这两件事的. 我很开心当我告诉我的两位异性朋友时, 虽然她们对此并不了解, 仅仅是看见她们好奇和称赞我就好开心. 第一次听到博客这个词是在初二的时候, 老师给我们发了一份调查问卷, 其中一个问题便是有没有自己的博客, 那时候我还不知道博客是什么, 便以为是微博, 于是填上了是. 想必那时候拿到数据的人会不会惊讶于一个初二学生会拥有自己的博客呢. 上大学后, 靠搜索学习也让我遇见了很多优秀的博客, 有着精致的页面, 充满个人特色的UI, 以及那些学习和生活的记录, 每次翻阅, 我都觉得他们好优秀. 好像成为他们那样优秀的人.","categories":[{"name":"日常","slug":"日常","permalink":"https://trevoewu.github.io/categories/%E6%97%A5%E5%B8%B8/"}],"tags":[{"name":"日常","slug":"日常","permalink":"https://trevoewu.github.io/tags/%E6%97%A5%E5%B8%B8/"},{"name":"talk","slug":"talk","permalink":"https://trevoewu.github.io/tags/talk/"}]},{"title":"hexo插入图片问题","slug":"hexo插入图片问题","date":"2023-04-21T03:46:44.000Z","updated":"2023-04-21T04:47:56.326Z","comments":true,"path":"2023/04/21/hexo插入图片问题/","link":"","permalink":"https://trevoewu.github.io/2023/04/21/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98/","excerpt":"昨天刚搭建完博客, 发现直接写markdown, hexo 生成后图片全部都没法显示了, 毕竟图片都在本地, 以绝对路径的方式存储的, markdown的路径的hexo的路径不匹配.","text":"昨天刚搭建完博客, 发现直接写markdown, hexo 生成后图片全部都没法显示了, 毕竟图片都在本地, 以绝对路径的方式存储的, markdown的路径的hexo的路径不匹配. 以前搭博客的时候这个图片问题就老是困扰着我, 我用typora编写的文章转到html之后, 我还得把图片也引到项目目录来, 然后在一个个的该路径. 体验可以说是很差了, 这也导致哪怕写完文章, 我也懒得发布了, 太麻烦. 这次用hexo搭建也遇到了同样的问题, 按照老方法, 我能想到的就只有把图片全部拉过来了, 我直接把全部图片mv到了public目录的imag目录下, 部署到github上的时候, 由于图片太多了, 进度条老是卡住, 我只好放弃了. 我直接ctl+c, hexo clean,hexo s.这时候我还不知道hexo clean意味这什么, 只是看教程大家都是这样做的, 结果, 结果hexo把我pubilc目录下的文件全部删了…, 我的图片, 也全没了. 今天发现一个绝好的解决方案, 将Typora和hexo完美结合起来. 第一步 修改hexo的站点配置文件_config.yml 首先安装插件: npm install hexo-renderer-marked 在_config.yml搜索post_asset_folder改为true 如下: post_asset_folder: true marked: prependRoot: true postAsset: true 修改之后会开启 Hexo 的文章资源文件管理功能。Hexo 将会在我们每一次通过 hexo new &lt;title&gt; 命令创建新文章时自动创建一个同名文件夹，并在执行hexo g的时候连同图片以前复制到public目录下(网站的根目录).于是我们便可以将文章所引用的相关资源放到这个同名文件夹下，然后通过相对路径引用。例如，你把一个 example.jpg 图片放在了这个同名文件夹中，使用相对路径的常规 markdown 语法 ![](example/example.jpg)即可访问 。 也就是这样 但是呢, 执行hexo g生成的时候, hexo会把sourec目录下的_posts文件的转化为成html, 并保存在pubilc对应日期的路径中, 可以看到, 此时index中的图片路径和markdown的图片路径是冲突的. typora的路径使用: ![](./example/example.jpg) 这样页面上的img路径就会是: /你的文章标题/example/example.jpg 正确的图片地址: /example/example.jpg 这是因为hexo g把文件夹里面图片复制过来了, 但并没有复制整个图片的文件夹. 所以我只需要拿到当前博客的路径，直接加上图片名字就行. 第二步, 编写路径替换脚本 在全局js文件 themes\\next\\source\\js\\next-boot.js中，编写img 路径替换脚本 // 脚本提供者 //http://songpengpeng.com var images = document.getElementsByTagName(\"img\"); var loHref = window.location.href let baseHref = loHref.substring(0,loHref.lastIndexOf(\"/\")+1) for (let i = 0; i &lt;images.length; i++) &#123; let executeNum = 0; let src = images[i]['src'] let img = new Image(); img.src = src img.onload= ()=> &#123; &#125; img.onerror= ()=> &#123; executeNum ++ ; handAMark(src) if(executeNum>3)&#123; return; &#125; let fileName = src.substring(src.lastIndexOf(\"/\")+1); images[i].src= baseHref+fileName &#125; &#125; function handAMark(src)&#123; var as = document.getElementsByClassName(\"fancybox\"); for (let i = 0; i &lt;as.length; i++) &#123; let executeNum = 0; let href = as[i]['href'] if(href==src)&#123; let img = new Image(); img.src = src img.onload= ()=> &#123; &#125; img.onerror= ()=> &#123; executeNum ++ ; if(executeNum>3)&#123; return; &#125; let fileName = src.substring(src.lastIndexOf(\"/\")+1); as[i].href= baseHref+fileName &#125; &#125; &#125; &#125; 这样, 使用hexo g生成的时候, 就会自动将图片的路径替换. 第三步, 搭配typora才是最佳 但是还是不够方便啊, 我们得先把图片放到文章的资源文件夹中. Typora对插图片的支持非常好, 可以在复制图片的同时, 把物品保存在对应的文件夹中 打开Typora, ⌘+,进入系统偏好设置, 点击image选项卡, 修改为以下格式: 这样当插入图片的时候, 会自动把图片放到当前目录的markdown相名的文件夹中, 恰好, Hexo 在我们每一次通过 hexo new &lt;title&gt; 命令创建新文章时自动创建一个同名文件夹. 完美! 这样, 我们在Typora上写文章, 完全不用担心插入图片问题, 而且文章的图片也会有序的存放, 方面日后的管理. 现在我们只需要hexo n 'title'然后在Typora上写文章, 就可以直接推到博客了, 照片也可以正常显示. 你看, 我写完这篇文章的时候, hexo已经完美的生成网页了. 这太棒了, 不是吗?","categories":[],"tags":[{"name":"日常","slug":"日常","permalink":"https://trevoewu.github.io/tags/%E6%97%A5%E5%B8%B8/"}]},{"title":"使用hexo重新搭建博客","slug":"使用hexo重新搭建博客","date":"2023-04-20T16:52:00.000Z","updated":"2023-04-20T16:58:45.077Z","comments":true,"path":"2023/04/21/使用hexo重新搭建博客/","link":"","permalink":"https://trevoewu.github.io/2023/04/21/%E4%BD%BF%E7%94%A8hexo%E9%87%8D%E6%96%B0%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"之前的博客是学web的时候手搓的, 导致后期管理困难, 每次发布文章我甚至得手写HTML. 后来发现大家都是用hexo搭建博客, 我也尝试了一下. 我真的好喜欢自己之前博客的风格Peekaboo的部落格 现在就先用next主题吧, 这个主题虽然不怎么好看, 但是帮助文档太友好了, 感谢感谢.","categories":[],"tags":[{"name":"Talk","slug":"Talk","permalink":"https://trevoewu.github.io/tags/Talk/"}]},{"title":"Wireshark lab HTTP","slug":"Wireshark-lab-HTTP","date":"2023-04-20T15:01:49.000Z","updated":"2023-05-15T13:16:02.833Z","comments":true,"path":"2023/04/20/Wireshark-lab-HTTP/","link":"","permalink":"https://trevoewu.github.io/2023/04/20/Wireshark-lab-HTTP/","excerpt":"","text":"Wireshark实验 - HTTP 官方英文文档：[Wireshark_HTTP_v7.0](Wireshark_HTTP_v7.0) 以下内容为笔者翻译： 《计算机网络：自顶向下方法（第6版）》补充材料，J.F. Kurose and K.W. Ross “不闻不若闻之，闻之不若见之，见之不若知之，知之不若行之。” ——中国谚语 © 2005-2012, J.F Kurose and K.W. Ross, All Rights Reserved 在介Wireshark实验-入门里，我们已经初步使用了Wireshark包嗅探器，我们现在可以操作Wireshark来查看网络协议。在这个实验中，我们会探索HTTP协议的几个方面：基本的GET/response交互，HTTP消息格式，检索大型HTML文件，检索具有嵌入对象的HTML文件，HTTP认证和安全性。在开始这些实验之前，您可能想查看书中第2.2节。 1.基本HTTP GET/response交互 我们开始探索HTTP，方法是下载一个非常简单的HTML文件 非常短，并且不包含嵌入的对象。执行以下操作： 启动您的浏览器。 启动Wireshark数据包嗅探器，如Wireshark实验-入门所述（还没开始数据包捕获）。在display-filter-specification窗口中输入“http”（只是字母，不含引号标记），这样就在稍后的分组列表窗口中只捕获HTTP消息。（我们只对HTTP协议感兴趣，不想看到其他所有的混乱的数据包）。 稍等一会儿（我们将会明白为什么不久），然后开始Wireshark数据包捕获。 在浏览器中输入以下内容 http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file1.html 您的浏览器应显示非常简单的单行HTML文件。 停止Wireshark数据包捕获。 你的Wireshark窗口应该类似于图1所示的窗口。如果你无法连接网络并运行Wireshark，您可以根据后面的步骤下载已捕获的数据包： 下载zip文件 http://gaia.cs.umass.edu/wireshark-labs/wireshark-traces.zip 解压缩文件 http-ethereal-trace-1。这个zip文件中的数据是由本书作者之一使用Wireshark在作者电脑上收集的，并且是按照Wireshark实验中的步骤做的。 如果你下载了数据文件，你可以将其加载到Wireshark中，并使用文件菜单选择打开并查看数据，然后选择http-ethereal-trace-1文件。 结果显示应与图1类似。（在不同的操作系统上，或不同的Wireshark版本上，Wireshark的界面会不同）。 图1：Wireshark显示 http://gaia.cs.umass.edu/wireshark-labs/HTTPwireshark-file1.html 已被您的浏览器打开 图1中的示例在分组列表窗口中显示了两个被捕获的HTTP消息：GET消息（从您的浏览器发送到gaia.cs.umass.edu 的web服务器）和从服务器到浏览器的响应消息。分组内容窗口显示所选消息的详细信息（在这种情况下为HTTP OK消息，其在分组列表窗口中高亮显示）。回想一下，因为HTTP消息被装载在TCP报文段内，该报文段是在IP分组封装吗，进而在以太网帧，和帧中封装，所以界面中显示了帧，以太网，IP，TCP分组信息以及HTTP报文信息。我们想最小化非HTTP数据的显示（我们这里只对HTTP感兴趣，这些其他协议将在以后的实验中研究），所以确保帧，以太网，IP和TCP行的信息被隐藏，注意左边有一个加号或一个向右的三角形（这意味着有信息被隐藏），而HTTP行具有减号或向下三角形（表示显示有关HTTP消息的所有信息）。 （注意：您应该忽略与favicon.ico相关的任何HTTP GET和response。 如果你看到一个关于这个文件的引用，这是你的浏览器自动询问服务器是否有一个图标文件应显示在浏览器的URL旁边。 我们会忽略这个引起麻烦的引用。） 通过查看HTTP GET和响应消息中的信息，回答以下问题。 在回答以下问题时，您应该打印出GET和响应消息（请参阅Wireshark-入门实验以获取信息），并指出您在消息中的哪个具体位置找到了回答以下问题的信息。 当您上交作业时，请注明输出，显示您在哪些地方表示了您的答案（例如，对于我们的课程，我们要求学生用笔标记纸质副本，或用彩色字体在电子副本的中注释文本）。 您的浏览器是否运行HTTP版本1.0或1.1？服务器运行什么版本的HTTP？ HTTP/1.1 ![image-20230416143533797](/Users/trevorwu/Library/Application Support/typora-user-images/image-20230416143533797.png) 您的浏览器会从接服务器接受哪种语言（如果有的话）？ ![image-20230416144437584](/Users/trevorwu/Library/Application Support/typora-user-images/image-20230416144437584.png) 您的计算机的IP地址是什么？ gaia.cs.umass.edu服务器地址呢？ ![image-20230416143642203](/Users/trevorwu/Library/Application Support/typora-user-images/image-20230416143642203.png) 服务器返回到浏览器的状态代码是什么？ ![image-20230416144507009](/Users/trevorwu/Library/Application Support/typora-user-images/image-20230416144507009.png) 服务器上HTML文件的最近一次修改是什么时候？ ![image-20230416144603595](/Users/trevorwu/Library/Application Support/typora-user-images/image-20230416144603595.png) 服务器返回多少字节的内容到您的浏览器？ ![image-20230416144632313](/Users/trevorwu/Library/Application Support/typora-user-images/image-20230416144632313.png) 通过检查数据包内容窗口中的原始数据，你是否看到有协议头在数据包列表窗口中未显示？ 如果是，请举一个例子。 没有 在您对上述问题5的回答中，您可能会惊讶地发现您刚才检索的文档在下载文档之前最近一次修改是一分钟前。 那是因为（对于这个特定文件），gaia.cs.umass.edu服务器将文件的最后修改时间设置为当前时间，并且每分钟执行一次。 因此，如果您在两次访问之间等待一分钟，则该文件看起来已被修改，因此您的浏览器将下载文档的“新”副本。 2.HTTP条件Get/response交互 回顾书的第2.2.5节，大多数Web浏览器使用对象缓存，从而在检索HTTP对象时执行条件GET。执行以下步骤之前，请确保浏览器的缓存为空。（要在Firefox下执行此操作，请选择“工具” - &gt; “清除最近历史记录”，然后检查缓存框，对于Internet Explorer，选择“工具” - &gt;“Internet选项” - &gt;“删除文件”；这些操作将从浏览器缓存中删除缓存文件。 现在按下列步骤操作： 启动您的浏览器，并确保您的浏览器的缓存被清除，如上所述。 启动Wireshark数据包嗅探器。 在浏览器中输入以下URL http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file2.html 您的浏览器应显示一个非常简单的五行HTML文件。 再次快速地将相同的URL输入到浏览器中（或者只需在浏览器中点击刷新按钮）。 停止Wireshark数据包捕获，并在display-filter-specification窗口中输入“http”，以便只捕获HTTP消息，并在数据包列表窗口中显示。 （注意：如果无法连接网络并运行Wireshark，则可以使用http-ethereal-trace-2数据包跟踪来回答以下问题；请参见上文注释。） 回答下列问题： 检查第一个从您浏览器到服务器的HTTP GET请求的内容。您在HTTP GET中看到了“IF-MODIFIED-SINCE”行吗？ 没有 检查服务器响应的内容。服务器是否显式返回文件的内容？ 你是怎么知道的？ 是的,![image-20230416150206500](/Users/trevorwu/Library/Application Support/typora-user-images/image-20230416150206500.png) 现在，检查第二个HTTP GET请求的内容。 您在HTTP GET中看到了“IF-MODIFIED-SINCE:”行吗？ 如果是，“IF-MODIFIED-SINCE:”头后面包含哪些信息？ 看见了. 日期 ![image-20230416151334645](/Users/trevorwu/Library/Application Support/typora-user-images/image-20230416151334645.png) 针对第二个HTTP GET，从服务器响应的HTTP状态码和短语是什么？服务器是否明确地返回文件的内容？请解释。 ![image-20230416150249214](/Users/trevorwu/Library/Application Support/typora-user-images/image-20230416150249214.png) 3.检索长文件 在我们到目前为止的例子中，检索的文档是简短的HTML文件。 接下来我们来看看当我们下载一个长的HTML文件时会发生什么。 按以下步骤操作： 启动您的浏览器，并确保您的浏览器缓存被清除，如上所述。 启动Wireshark数据包嗅探器 在您的浏览器中输入以下URL http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file3.html 您的浏览器应显示相当冗长的美国权利法案。 停止Wireshark数据包捕获，并在display-filter-specification窗口中输入“http”，以便只显示捕获的HTTP消息。 （注意：如果无法连接网络并运行Wireshark，则可以使用http-ethereal-trace-3数据包跟踪来回答以下问题；请参见上文注释。） 在分组列表窗口中，您应该看到您的HTTP GET消息，然后是对您的HTTP GET请求的多个分组的TCP响应。这个多分组响应值得进行一点解释。回顾第2.2节（见文中的图2.9），HTTP响应消息由状态行组成，后跟标题行，后跟一个空行，后跟实体主体。在我们的HTTP GET这种情况下，响应中的实体主体是整个请求的HTML文件。在我们的例子中，HTML文件相当长，4500字节太大，一个TCP数据包不能容纳。因此，单个HTTP响应消息由TCP分成几个部分，每个部分包含在单独的TCP报文段中（参见书中的图1.24）。在Wireshark的最新版本中，Wireshark将每个TCP报文段指定为独立的数据包，并且单个HTTP响应在多个TCP数据包之间分段的事实由Wireshark显示的Info列中的“重组PDU的TCP段”指示。 Wireshark的早期版本使用“继续”短语表示HTTP消息的整个内容被多个TCP段打断。我们在这里强调，HTTP中没有“继续”消息！ 回答下列问题： 您的浏览器发送多少HTTP GET请求消息？哪个数据包包含了美国权利法案的消息？ ![image-20230416151626850](/Users/trevorwu/Library/Application Support/typora-user-images/image-20230416151626850.png) 两个, 第一个 哪个数据包包含响应HTTP GET请求的状态码和短语？ ![image-20230416151652019](/Users/trevorwu/Library/Application Support/typora-user-images/image-20230416151652019.png) 第二个 响应中的状态码和短语是什么？ 200 OK 需要多少包含数据的TCP段来执行单个HTTP响应和权利法案文本？ 4个TCP段 ![image-20230416151853132](/Users/trevorwu/Library/Application Support/typora-user-images/image-20230416151853132.png) 4.具有嵌入对象的HTML文档 现在我们已经看到Wireshark如何显示捕获的大型HTML文件的数据包流量，我们可以看看当浏览器使用嵌入的对象下载文件时，会发生什么，即包含其他对象的文件（在下面的例子中是图像文件） 的服务器。 执行以下操作： 启动您的浏览器。 启动Wireshark数据包嗅探器。 在浏览器中输入以下URL http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file4.html 您的浏览器应显示包含两个图像的短HTML文件。这两个图像在基本HTML文件中被引用。也就是说，图像本身不包含在HTML文件中；相反，图像的URL包含在已下载的HTML文件中。如书中所述，您的浏览器将不得不从指定的网站中检索这些图标。我们的出版社的图标是从 www.aw-bc.com 网站检索的。而我们第5版（我们最喜欢的封面之一）的封面图像存储在manic.cs.umass.edu服务器。 停止Wireshark数据包捕获，并在display-filter-specification窗口中输入“http”，以便只显示捕获的HTTP消息。 （注意：如果无法连接网络并运行Wireshark，则可以使用http-ethereal-trace-4数据包跟踪来回答以下问题；请参见上文注释。） 回答下列问题： 您的浏览器发送了几个HTTP GET请求消息？ 这些GET请求发送到哪个IP地址？ 三个 ![image-20230416152201783](/Users/trevorwu/Library/Application Support/typora-user-images/image-20230416152201783.png) 浏览器从两个网站串行还是并行下载了两张图片？请说明。 猜测为串行, 因为这两个GET请求发送有时间差 ![image-20230416152416694](/Users/trevorwu/Library/Application Support/typora-user-images/image-20230416152416694.png) 5.HTTP认证 最后，我们尝试访问受密码保护的网站，并检查网站的HTTP消息交换的序列。URL http://gaia.cs.umass.edu/wireshark-labs/protected_pages/HTTP-wireshark-file5.html 是受密码保护的。用户名是“wireshark-students”（不包含引号），密码是“network”（再次不包含引号）。所以让我们访问这个“安全的”受密码保护的网站。执行以下操作： 请确保浏览器的缓存被清除，如上所述，然后关闭你的浏览器，再然后启动浏览器 启动Wireshark数据包嗅探器。 在浏览器中输入以下URL http://gaia.cs.umass.edu/wireshark-labs/protected_pages/HTTP-wiresharkfile5.html 在弹出框中键入所请求的用户名和密码。 停止Wireshark数据包捕获，并在display-filter-specification窗口中输入“http”，以便只显示捕获的HTTP消息。 （注意：如果无法连接网络并运行Wireshark，则可以使用http-ethereal-trace-5数据包跟踪来回答以下问题；请参见上文注释。） 现在来看看Wireshark输出。 您可能需要首先阅读HTTP身份验证相关信息，方法是在 http://frontier.userland.com/stories/storyReader$2159 上查看“HTTP Access Authentication Framework ”上的易读材料。 回答下列问题： 对于您的浏览器的初始HTTP GET消息，服务器响应（状态码和短语）是什么响应？ ![image-20230416152712931](/Users/trevorwu/Library/Application Support/typora-user-images/image-20230416152712931.png) 未授权 当您的浏览器第二次发送HTTP GET消息时，HTTP GET消息中包含哪些新字段？ ![image-20230416152814670](/Users/trevorwu/Library/Application Support/typora-user-images/image-20230416152814670.png) 一个Credentials: 的字段 您输入的用户名（wireshark-students）和密码（network）按照客户端HTTP GET消息中请求头的“Authorization: Basic ”的字符串（d2lyZXNoYXJrLXN0dWRlbnRzOm5ldHdvcms=）编码。虽然您的用户名和密码可能加密，但它们只是以一种称为Base64格式的格式进行编码。用户名和密码并没有加密！要确认这些，请访问 http://www.motobit.com/util/base64-decoder-encoder.asp 并输入base64编码的字符串d2lyZXNoYXJrLXN0dWRlbnRz 并进行解码。瞧！您已从Base64编码转换为ASCII编码，因此应该看到您的用户名！要查看密码，请输入字符串Om5ldHdvcms=的剩余部分，然后按解码。因为任何人都可以下载像Wireshark这样的工具，而且可以通过网络适配器嗅探数据包（不仅仅是自己的），任何人都可以从Base64转换为ASCII（你刚刚就这么做了！），所以你应该很清楚，WWW网站上的简单密码并不安全，除非采取其他措施。 wireshark自带解码… 不要害怕！ 正如我们将在第8章中看到的，有一些方法可以使WWW访问更加安全。然而，我们显然需要一些超出基本HTTP认证框架的知识！","categories":[],"tags":[{"name":"computer network","slug":"computer-network","permalink":"https://trevoewu.github.io/tags/computer-network/"}]},{"title":"Wireshark Lab: IP v7.0","slug":"Wireshark-Lab-IP-v7-0","date":"2023-04-20T10:22:06.000Z","updated":"2023-04-21T03:44:49.965Z","comments":true,"path":"2023/04/20/Wireshark-Lab-IP-v7-0/","link":"","permalink":"https://trevoewu.github.io/2023/04/20/Wireshark-Lab-IP-v7-0/","excerpt":"Select the first ICMP Echo Request message sent by your computer, and expand the Internet Protocol part of the packet in the packet details window.(选择您的计算机发送的第一个 ICMP Echo Request 消息，并在数据包详细信息窗口中展开数据包的 Internet 协议部分) 不知道为什么, 我的电脑只能收到Time to live exceeded报文段.","text":"Select the first ICMP Echo Request message sent by your computer, and expand the Internet Protocol part of the packet in the packet details window.(选择您的计算机发送的第一个 ICMP Echo Request 消息，并在数据包详细信息窗口中展开数据包的 Internet 协议部分) 不知道为什么, 我的电脑只能收到Time to live exceeded报文段. 结果是因为我在过滤了ICMP, 而traceroute默认使用UDP而不是ICMP, 所以只能收到路由器发给我的ICMP time to live exceeded 报文,告诉我的数据包被干掉了. tracert 默认使用 ICMP 包探测，traceroute 使用 UDP 包，也可以使用 ICMP 和 TCP 包探测, 带上参数-T即可. -I Use ICMP ECHO instead of UDP datagrams. (A synonym for \"-P icmp\"). traceroute baidu.com 2000 # 使用baidu测试, 默认使用UDP, 数据报大小为2000byte What is the IP address of your computer? 在 IP header 中，上层协议字段的值是多少? 我的IP地址: 10.51.172.226 这是traceroute发送的第一个数据报, 可以得到以下信息: 该数据报是IP数据报, 上层协议为UDP 数据报被分片了, More Fragment字段被设为1 源IP是10.51.172.226, 这是host IP 目标IP是110,242,68,66, 这是Baidu.com的IP地址, 我用百度来测试. IP datagram 的有效负载中有多少 bytes? 说明如何 确定 payload bytes 的数。 payload = Total Len - header Len = 1500 - 20 = 1480, 是的, 我直接发送了2000byte的报文 此 IP 数据报是否已被分段(fragmented)?解释您如何确定数据报是否已被分段(fragmented) 是的, 前文有提到, 这里不再赘述. 接下来，通过单击 Source 列标题，根据 IP 源地址对跟踪的数据包进行排序，一个小的向下箭头应出现在 Source 旁边，如果箭头指向上方请再次单击“Source column header”。选择计算机发送的第一个 ICMP Echo Request 消息，然后展开“details of selected packet header”窗口中的 Internet 协议部分。在“listing of captured packets”窗 口中，您应该在第一个 ICMP 下面看到所有后续 ICMP 消息(可能还有计算器上运行的其他协议发送的其他散布数据包)，使用向下箭头浏览计算器发送的 ICMP 消息。 在您的计算器发送的这一系列 ICMP 消息中，IP 数据报中的哪些字段总有改变 使用 traceroute -I gaia.cs.umass.edu -80 # 用作者给的网站测试, -I表示使用ICMP # The default probe datagram length is 40 bytes[traceroute manual] # 但是我使用作者提议用56作为数据报(ip datagrame)大小时, 收到以下警告: # traceroute: packet length must be > 71 # 所以这里数据报大小设为80, 实际上, 我使用不带数据报大小参数的命令时, 默认数据报大小为1380 再次抓包, 由于traceroute实际上会发送三个ICMP的数据报, 所以三个为一组. 所以可发现每一组的ID值差3, 当然是因为一组发了三个ICMP数据报啊… 第一个: 第二个: 第三个: 可以发现, Id, TTL, Header checksum改变了. 哪些字段保持不变? 哪个字段必须保持不变? 哪些字段必须更改? 为什么? Version, Header Length , TOS(Differentiate Services Field差异化服务领域), Flag, TTL, Protocol, SIP,DIP保持不变 Version, Protocol, TOS, Header Len必须保持不变. Identification, checksum,TTL必须更改 描述您在 IP 数据报的标识字段的值中看到的模式 每发一个ICMP的数据报, ID字段加一(不分片的情况下, 分片时一个IP数据报的不同片具有相同的ID) 下一步(数据包仍按来源地址排序)查找最近的(第一跳)路由器发送到您的计算器的一系列 ICMP TTL 超出的回复讯息。 ID 字段和 TTL 字段的值是多少? 对于最近(第一跳)路由器发送到您的计算器的所有 ICMP TTL 超出的回复，这些值是否保持不变?为什么? TTL保持不变, 但ID改变了. TTL都为64(可以改变, 理论上可以为1, 因为第一台路由器到我的主机一跳可达) 在不管是发回给我的time to live exceeded还是ICMP reply TTL的值都为64, 可能是默认的值. 单击“时间”列，再次按时间对数据包列表进行排序。 在将 pingplotter 中的数据包大小更改为 2000 后，查找计算机发送的第一个 ICMP Echo Request 消息。该消息是否已分片为多个 IP 数据报? 打印出碎片 IP 数据报的第一个片段。 IP 头中的哪些信息表明数据报已碎片 化? IP 头中的哪些信息表明这是第一个片段还是后一个片段? 这个 IP 数据报有多长? 打印出碎片 IP 数据报的第二个片段。 IP 标头中的哪些信息表明这不是第一 个数据报片段? 是否还有更多的片段? 你是如何知道的? 是的, 该消息被分片了, 可以通过flag字段看出, Fragmen Offset 为1480, 而More Fragment为0 ,告诉这是第二个message, 那第一个到哪里去了呢? Wireshark告诉我在frame 73, 于是我去寻找frame73 73frame和74frame的payload 和 为 1980, 因为规定了ICMP的IP数据报大小为2000, 但由于IP头部的20byte, 实际的payload恰好为1980byte 注意到发到第一个message竟然不是ICMPmessage, 而是一个IPdatagram 打开IP头部, 我们发现, 这仍然是一个ICMP的数据报, 但是在IP的数据部分并没有ICMP头部. 在第一个和第二个片段中，IP 标头中哪些字段发生了变化? 第一个fregment: 第二片: 注意到红色部分发送了改变, 而蓝色部分没有改变, IP数据报用ID来标识多个片是否属于同一个IP数据报. 现在，在将 pingplotter 中的数据包大小更改为 3500 后，找到计算机发送的第一个 ICMP Echo Request 消息。 从原始数据报创建了多少个片? 三个片 片段中 IP 标头中的哪些字段发生了变化? 和上一个结论相同, 红色部分发送了改变, 而蓝色部分没有改变, IP数据报用ID来标识多个片是否属于同一个IP数据报.","categories":[],"tags":[{"name":"computer network","slug":"computer-network","permalink":"https://trevoewu.github.io/tags/computer-network/"},{"name":"lab","slug":"lab","permalink":"https://trevoewu.github.io/tags/lab/"}]}],"categories":[{"name":"杂谈","slug":"杂谈","permalink":"https://trevoewu.github.io/categories/%E6%9D%82%E8%B0%88/"},{"name":"考研","slug":"考研","permalink":"https://trevoewu.github.io/categories/%E8%80%83%E7%A0%94/"},{"name":"必要的记录","slug":"必要的记录","permalink":"https://trevoewu.github.io/categories/%E5%BF%85%E8%A6%81%E7%9A%84%E8%AE%B0%E5%BD%95/"},{"name":"csapp","slug":"csapp","permalink":"https://trevoewu.github.io/categories/csapp/"},{"name":"spring","slug":"spring","permalink":"https://trevoewu.github.io/categories/spring/"},{"name":"java","slug":"spring/java","permalink":"https://trevoewu.github.io/categories/spring/java/"},{"name":"javaweb","slug":"spring/java/javaweb","permalink":"https://trevoewu.github.io/categories/spring/java/javaweb/"},{"name":"java EE","slug":"java-EE","permalink":"https://trevoewu.github.io/categories/java-EE/"},{"name":"java web","slug":"java-web","permalink":"https://trevoewu.github.io/categories/java-web/"},{"name":"Java web","slug":"Java-web","permalink":"https://trevoewu.github.io/categories/Java-web/"},{"name":"学习记录","slug":"学习记录","permalink":"https://trevoewu.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"},{"name":"学习","slug":"学习","permalink":"https://trevoewu.github.io/categories/%E5%AD%A6%E4%B9%A0/"},{"name":"mac使用指南","slug":"mac使用指南","permalink":"https://trevoewu.github.io/categories/mac%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://trevoewu.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"日常","slug":"日常","permalink":"https://trevoewu.github.io/categories/%E6%97%A5%E5%B8%B8/"}],"tags":[{"name":"建议","slug":"建议","permalink":"https://trevoewu.github.io/tags/%E5%BB%BA%E8%AE%AE/"},{"name":"考研","slug":"考研","permalink":"https://trevoewu.github.io/tags/%E8%80%83%E7%A0%94/"},{"name":"英语学习","slug":"英语学习","permalink":"https://trevoewu.github.io/tags/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"},{"name":"日记","slug":"日记","permalink":"https://trevoewu.github.io/tags/%E6%97%A5%E8%AE%B0/"},{"name":"lab","slug":"lab","permalink":"https://trevoewu.github.io/tags/lab/"},{"name":"csapp","slug":"csapp","permalink":"https://trevoewu.github.io/tags/csapp/"},{"name":"杂谈","slug":"杂谈","permalink":"https://trevoewu.github.io/tags/%E6%9D%82%E8%B0%88/"},{"name":"mybatis","slug":"mybatis","permalink":"https://trevoewu.github.io/tags/mybatis/"},{"name":"JDBC","slug":"JDBC","permalink":"https://trevoewu.github.io/tags/JDBC/"},{"name":"JDBCtemplate","slug":"JDBCtemplate","permalink":"https://trevoewu.github.io/tags/JDBCtemplate/"},{"name":"spring","slug":"spring","permalink":"https://trevoewu.github.io/tags/spring/"},{"name":"Spring","slug":"Spring","permalink":"https://trevoewu.github.io/tags/Spring/"},{"name":"Java","slug":"Java","permalink":"https://trevoewu.github.io/tags/Java/"},{"name":"MyBatis","slug":"MyBatis","permalink":"https://trevoewu.github.io/tags/MyBatis/"},{"name":"Java Web","slug":"Java-Web","permalink":"https://trevoewu.github.io/tags/Java-Web/"},{"name":"java web","slug":"java-web","permalink":"https://trevoewu.github.io/tags/java-web/"},{"name":"jsp","slug":"jsp","permalink":"https://trevoewu.github.io/tags/jsp/"},{"name":"servlet","slug":"servlet","permalink":"https://trevoewu.github.io/tags/servlet/"},{"name":"jdbc","slug":"jdbc","permalink":"https://trevoewu.github.io/tags/jdbc/"},{"name":"fullstack","slug":"fullstack","permalink":"https://trevoewu.github.io/tags/fullstack/"},{"name":"smbms","slug":"smbms","permalink":"https://trevoewu.github.io/tags/smbms/"},{"name":"JavaWeb","slug":"JavaWeb","permalink":"https://trevoewu.github.io/tags/JavaWeb/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://trevoewu.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"computer network","slug":"computer-network","permalink":"https://trevoewu.github.io/tags/computer-network/"},{"name":"computer cetwork","slug":"computer-cetwork","permalink":"https://trevoewu.github.io/tags/computer-cetwork/"},{"name":"mac使用指南","slug":"mac使用指南","permalink":"https://trevoewu.github.io/tags/mac%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"},{"name":"oracle","slug":"oracle","permalink":"https://trevoewu.github.io/tags/oracle/"},{"name":"教程","slug":"教程","permalink":"https://trevoewu.github.io/tags/%E6%95%99%E7%A8%8B/"},{"name":"computer system","slug":"computer-system","permalink":"https://trevoewu.github.io/tags/computer-system/"},{"name":"日常","slug":"日常","permalink":"https://trevoewu.github.io/tags/%E6%97%A5%E5%B8%B8/"},{"name":"talk","slug":"talk","permalink":"https://trevoewu.github.io/tags/talk/"},{"name":"Talk","slug":"Talk","permalink":"https://trevoewu.github.io/tags/Talk/"}]}